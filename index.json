{
  "api/Bonsai.Arduino.AnalogInput.html": {
    "href": "api/Bonsai.Arduino.AnalogInput.html",
    "title": "Class AnalogInput",
    "keywords": "Class AnalogInput Represents an operator that generates a sequence of digitized analog readings from the specified Arduino input pin. Inheritance Object Source < Int32 > AnalogInput Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class AnalogInput : Source<int> Properties Pin Gets or sets the analog input pin number from which to take readings. Declaration public int Pin { get; set; } Property Value Type Description Int32 PortName Gets or sets the name of the serial port used to communicate with the Arduino. Declaration [TypeConverter(typeof(PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods Generate() Generates an observable sequence of digitized analog values. Declaration public override IObservable<int> Generate() Returns Type Description IObservable < Int32 > An observable sequence that reports the digitized analog readings from the specified Arduino analog input pin. Overrides Bonsai.Source<System.Int32>.Generate()"
  },
  "api/Bonsai.Arduino.AnalogInputReceivedEventArgs.html": {
    "href": "api/Bonsai.Arduino.AnalogInputReceivedEventArgs.html",
    "title": "Class AnalogInputReceivedEventArgs",
    "keywords": "Class AnalogInputReceivedEventArgs Provides data for the AnalogInputReceived event. Inheritance Object EventArgs AnalogInputReceivedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class AnalogInputReceivedEventArgs : EventArgs Constructors AnalogInputReceivedEventArgs(Int32, Int32) Initializes a new instance of the AnalogInputReceivedEventArgs class using the pin number and analog value received in the analog input message. Declaration public AnalogInputReceivedEventArgs(int pin, int value) Parameters Type Name Description Int32 pin The pin number from which the analog value was sampled. Int32 value The digitized analog value. Properties Pin Gets the pin number from which the analog value was sampled. Declaration public int Pin { get; } Property Value Type Description Int32 Value Gets the digitized analog value. Declaration public int Value { get; } Property Value Type Description Int32"
  },
  "api/Bonsai.Arduino.AnalogOutput.html": {
    "href": "api/Bonsai.Arduino.AnalogOutput.html",
    "title": "Class AnalogOutput",
    "keywords": "Class AnalogOutput Represents an operator that writes the sequence of numerical values to the specified Arduino output pin using PWM. Inheritance Object Combinator < Int32 , Int32 > Sink < Int32 > AnalogOutput Inherited Members Combinator<Int32, Int32>.Process(IObservable<Int32>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class AnalogOutput : Sink<int> Properties Pin Gets or sets the digital output (PWM) pin number on which to write values. Declaration public int Pin { get; set; } Property Value Type Description Int32 PortName Gets or sets the name of the serial port used to communicate with the Arduino. Declaration [TypeConverter(typeof(PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods Process(IObservable<Int32>) Writes a sequence of Int32 values to the specified Arduino output pin using PWM. Declaration public override IObservable<int> Process(IObservable<int> source) Parameters Type Name Description IObservable < Int32 > source A sequence of Int32 values to write into the specified Arduino output pin. Returns Type Description IObservable < Int32 > A sequence of the Int32 values which have been written into the Arduino output pin. Overrides Bonsai.Combinator<System.Int32, System.Int32>.Process(System.IObservable<System.Int32>) Remarks This operator only subscribes to the source sequence after initializing the connection to the Arduino and configuring the output pin mode to PWM."
  },
  "api/Bonsai.Arduino.Arduino.html": {
    "href": "api/Bonsai.Arduino.Arduino.html",
    "title": "Class Arduino",
    "keywords": "Class Arduino Represents an Arduino board communicating with the host computer using the Firmata protocol. Inheritance Object Arduino Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public sealed class Arduino : IDisposable Constructors Arduino(String) Initializes a new instance of the Arduino class using the specified port name. Declaration public Arduino(string portName) Parameters Type Name Description String portName The port to use (for example, COM1). Arduino(String, Int32) Initializes a new instance of the Arduino class using the specified port name and baud rate. Declaration public Arduino(string portName, int baudRate) Parameters Type Name Description String portName The port to use (for example, COM1). Int32 baudRate The serial baud rate. Fields DefaultBaudRate Represents the default serial baud rate used to communicate with the Arduino. Declaration public const int DefaultBaudRate = 57600 Field Value Type Description Int32 DefaultSamplingInterval Represents the default sampling interval for analog pins. Declaration public const int DefaultSamplingInterval = 19 Field Value Type Description Int32 Properties IsOpen Gets a value indicating the open or closed status of the Arduino object. Declaration public bool IsOpen { get; } Property Value Type Description Boolean MajorVersion Gets the major version of the Firmata firmware reported by the board on initialization. Declaration public int MajorVersion { get; } Property Value Type Description Int32 MinorVersion Gets the minor version of the Firmata firmware reported by the board on initialization. Declaration public int MinorVersion { get; } Property Value Type Description Int32 Methods AnalogRead(Int32) Returns the current value of the specified analog pin. Declaration public int AnalogRead(int pin) Parameters Type Name Description Int32 pin The number of the analog pin to read. Returns Type Description Int32 A Int32 value representing a digitized analog measurement. AnalogWrite(Int32, Int32) Writes an analog value as a PWM wave to the specified digital output pin. Declaration public void AnalogWrite(int pin, int value) Parameters Type Name Description Int32 pin The number of the digital pin to write. Int32 value A Int32 value used to update the PWM signal. Close() Closes the port connection, sets the IsOpen property to false and disposes of the internal SerialPort object. Declaration public void Close() DigitalPortRead(Int32) Reads the current state of all the digital pins in the specified port. Declaration public byte DigitalPortRead(int port) Parameters Type Name Description Int32 port The number of the digital port (i.e. collection of 8 pins) to read. Returns Type Description Byte A Byte value where each bit represents the state of one pin in the digital port. DigitalPortWrite(Int32, Byte) Sets the state of all the digital output pins in the specified port simultaneously. Declaration public void DigitalPortWrite(int port, byte value) Parameters Type Name Description Int32 port The number of the digital port (i.e. collection of 8 pins) to write. Byte value A Byte value where each bit will be used to set the state of one pin in the digital port. DigitalRead(Int32) Reads the current state of the specified digital input pin. Declaration public bool DigitalRead(int pin) Parameters Type Name Description Int32 pin The number of the digital pin to read. Returns Type Description Boolean true if the pin is HIGH; false if the pin is LOW. DigitalWrite(Int32, Boolean) Sets the state of the specified digital output pin. Declaration public void DigitalWrite(int pin, bool value) Parameters Type Name Description Int32 pin The number of the digital pin to write. Boolean value true to set the pin HIGH; false to set the pin LOW. GetPortNumber(Int32) Gets the digital port number for the specified pin. Declaration public static int GetPortNumber(int pin) Parameters Type Name Description Int32 pin The pin number for which to retrieve the digital port. Returns Type Description Int32 A Int32 identifier for the digital port containing the specified pin. I2CConfig(Byte[]) Configures I2C settings such as delay time and power pins. Declaration public void I2CConfig(params byte[] args) Parameters Type Name Description Byte [] args The I2C configuration arguments. The first two bytes are used to configure the optional delay time, in microseconds, between writing to the I2C register, and reading the data from the device. I2CRequest(Int32, I2CRequestMode, Byte[]) Sends a request to the I2C device with the specified address. Declaration public void I2CRequest(int address, I2CRequestMode mode, params byte[] data) Parameters Type Name Description Int32 address The address of the slave device in the I2C bus. I2CRequestMode mode The read/write mode of the request. Byte [] data The data payload for the I2C request. I2CWrite(Int32, Byte[]) Writes a data payload to the I2C device with the specified address. Declaration public void I2CWrite(int address, params byte[] data) Parameters Type Name Description Int32 address The address of the slave device in the I2C bus. Byte [] data The data payload to write to the device. Open() Opens a new serial port connection to the Arduino board. Declaration public void Open() PinMode(Int32, PinMode) Sets the mode of an individual Arduino pin. Declaration public void PinMode(int pin, PinMode mode) Parameters Type Name Description Int32 pin The number of the pin to configure. PinMode mode The pin mode. ReportAnalog(Int32, Boolean) Enables or disables reporting of analog pin values for the specified pin number. Declaration public void ReportAnalog(int pin, bool state) Parameters Type Name Description Int32 pin The number of the pin to configure. Boolean state true if analog reporting for the pin should be enabled; false otherwise. ReportDigital(Int32, Boolean) Enables or disables reporting of digital pin changes for the specified digital port in the Arduino. Declaration public void ReportDigital(int port, bool state) Parameters Type Name Description Int32 port The digital port to configure. Boolean state true if reporting of digital pin changes on the specified port should be enabled; false otherwise. SamplingInterval(Int32) Sets the sampling rate for reporting analog and I2C data in the main firmware loop. Declaration public void SamplingInterval(int milliseconds) Parameters Type Name Description Int32 milliseconds The sampling interval, in milliseconds, between analog and I2C measurements. SendSysex(Byte, Byte[]) Sends the specified MIDI SysEx command using the specified arguments. Declaration public void SendSysex(byte command, params byte[] args) Parameters Type Name Description Byte command A Byte value indicating the SysEx command ID. Byte [] args The optional extended payload sent to configure the SysEx command. Events AnalogInputReceived Occurs when the Arduino object receives a new analog input event. Declaration public event EventHandler<AnalogInputReceivedEventArgs> AnalogInputReceived Event Type Type Description EventHandler < AnalogInputReceivedEventArgs > DigitalInputReceived Occurs when the Arduino object receives a new digital input event. Declaration public event EventHandler<DigitalInputReceivedEventArgs> DigitalInputReceived Event Type Type Description EventHandler < DigitalInputReceivedEventArgs > SysexReceived Occurs when the Arduino object receives a new MIDI SysEx message. Declaration public event EventHandler<SysexReceivedEventArgs> SysexReceived Event Type Type Description EventHandler < SysexReceivedEventArgs > Explicit Interface Implementations IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements System.IDisposable"
  },
  "api/Bonsai.Arduino.ArduinoConfiguration.html": {
    "href": "api/Bonsai.Arduino.ArduinoConfiguration.html",
    "title": "Class ArduinoConfiguration",
    "keywords": "Class ArduinoConfiguration Represents configuration settings used to initialize a Firmata serial connection. Inheritance Object ArduinoConfiguration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class ArduinoConfiguration Constructors ArduinoConfiguration() Initializes a new instance of the ArduinoConfiguration class. Declaration public ArduinoConfiguration() Properties BaudRate Gets or sets the serial baud rate. Declaration [TypeConverter(typeof(BaudRateConverter))] public int BaudRate { get; set; } Property Value Type Description Int32 PortName Gets or sets the name of the serial port. Declaration [TypeConverter(typeof(SerialPortNameConverter))] public string PortName { get; set; } Property Value Type Description String SamplingInterval Gets or sets the sampling interval, in milliseconds, between analog and I2C measurements. Declaration public int SamplingInterval { get; set; } Property Value Type Description Int32"
  },
  "api/Bonsai.Arduino.CreateArduino.html": {
    "href": "api/Bonsai.Arduino.CreateArduino.html",
    "title": "Class CreateArduino",
    "keywords": "Class CreateArduino Represents an operator that creates a connection to an Arduino board using the Firmata protocol. Inheritance Object Source < Arduino > CreateArduino Implements INamedElement Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class CreateArduino : Source<Arduino>, INamedElement Properties BaudRate Gets or sets the serial baud rate. Declaration [TypeConverter(typeof(BaudRateConverter))] public int BaudRate { get; set; } Property Value Type Description Int32 Name Gets or sets the optional alias for the Arduino board. Declaration public string Name { get; set; } Property Value Type Description String PortName Gets or sets the name of the serial port used to communicate with the Arduino. Declaration [TypeConverter(typeof(SerialPortNameConverter))] public string PortName { get; set; } Property Value Type Description String SamplingInterval Gets or sets the sampling interval, in milliseconds, between analog and I2C measurements. Declaration public int SamplingInterval { get; set; } Property Value Type Description Int32 Methods Generate() Generates an observable sequence that contains the Firmata connection object. Declaration public override IObservable<Arduino> Generate() Returns Type Description IObservable < Arduino > An instance of the Arduino class representing the Firmata connection. Overrides Bonsai.Source<Bonsai.Arduino.Arduino>.Generate() Implements INamedElement"
  },
  "api/Bonsai.Arduino.DigitalInput.html": {
    "href": "api/Bonsai.Arduino.DigitalInput.html",
    "title": "Class DigitalInput",
    "keywords": "Class DigitalInput Represents an operator that generates a sequence of digital state transitions from the specified Arduino input pin. Inheritance Object Source < Boolean > DigitalInput Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class DigitalInput : Source<bool> Properties Pin Gets or sets the digital input pin number from which to take readings. Declaration public int Pin { get; set; } Property Value Type Description Int32 PortName Gets or sets the name of the serial port used to communicate with the Arduino. Declaration [TypeConverter(typeof(PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods Generate() Configures the digital pin as INPUT and generates an observable sequence of all its state transitions. Declaration public override IObservable<bool> Generate() Returns Type Description IObservable < Boolean > An observable sequence that reports the binary state transitions from the specified Arduino input pin: true if the pin is HIGH; false if the pin is LOW. Overrides Bonsai.Source<System.Boolean>.Generate()"
  },
  "api/Bonsai.Arduino.DigitalInputReceivedEventArgs.html": {
    "href": "api/Bonsai.Arduino.DigitalInputReceivedEventArgs.html",
    "title": "Class DigitalInputReceivedEventArgs",
    "keywords": "Class DigitalInputReceivedEventArgs Provides data for the DigitalInputReceived event. Inheritance Object EventArgs DigitalInputReceivedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class DigitalInputReceivedEventArgs : EventArgs Constructors DigitalInputReceivedEventArgs(Int32, Byte) Initializes a new instance of the DigitalInputReceivedEventArgs class using the port number and port pin state received in the digital input message. Declaration public DigitalInputReceivedEventArgs(int port, byte state) Parameters Type Name Description Int32 port The number identifying the digital port (i.e. collection of 8 pins) from which the state transition event originated. Byte state The state of all the digital input pins in the specified port at the time the transition occurred. Properties Port Gets the number identifying the digital port from which the event originated. Declaration public int Port { get; } Property Value Type Description Int32 State Gets the state of all the digital input pins in the specified port at the time the transition occurred. Declaration public byte State { get; } Property Value Type Description Byte"
  },
  "api/Bonsai.Arduino.DigitalOutput.html": {
    "href": "api/Bonsai.Arduino.DigitalOutput.html",
    "title": "Class DigitalOutput",
    "keywords": "Class DigitalOutput Represents an operator that writes the sequence of digital state transitions to the specified Arduino output pin. Inheritance Object Combinator < Boolean , Boolean > Sink < Boolean > DigitalOutput Inherited Members Combinator<Boolean, Boolean>.Process(IObservable<Boolean>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class DigitalOutput : Sink<bool> Properties Pin Gets or sets the digital output pin number on which to write the state values. Declaration public int Pin { get; set; } Property Value Type Description Int32 PortName Gets or sets the name of the serial port used to communicate with the Arduino. Declaration [TypeConverter(typeof(PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods Process(IObservable<Boolean>) Writes a sequence of binary states to the specified Arduino digital output pin. Declaration public override IObservable<bool> Process(IObservable<bool> source) Parameters Type Name Description IObservable < Boolean > source A sequence of Boolean values used to update the state of the specified Arduino output pin. If a value in the sequence is true , the pin will be set to HIGH; otherwise, the pin will be set to LOW. Returns Type Description IObservable < Boolean > A sequence of the Boolean values which have been written into the Arduino output pin. Overrides Bonsai.Combinator<System.Boolean, System.Boolean>.Process(System.IObservable<System.Boolean>) Remarks This operator only subscribes to the source sequence after initializing the connection to the Arduino and configuring the digital pin mode to OUTPUT."
  },
  "api/Bonsai.Arduino.html": {
    "href": "api/Bonsai.Arduino.html",
    "title": "Namespace Bonsai.Arduino",
    "keywords": "Namespace Bonsai.Arduino Classes AnalogInput Represents an operator that generates a sequence of digitized analog readings from the specified Arduino input pin. AnalogInputReceivedEventArgs Provides data for the AnalogInputReceived event. AnalogOutput Represents an operator that writes the sequence of numerical values to the specified Arduino output pin using PWM. Arduino Represents an Arduino board communicating with the host computer using the Firmata protocol. ArduinoConfiguration Represents configuration settings used to initialize a Firmata serial connection. CreateArduino Represents an operator that creates a connection to an Arduino board using the Firmata protocol. DigitalInput Represents an operator that generates a sequence of digital state transitions from the specified Arduino input pin. DigitalInputReceivedEventArgs Provides data for the DigitalInputReceived event. DigitalOutput Represents an operator that writes the sequence of digital state transitions to the specified Arduino output pin. InputPullUp Represents an operator that generates a sequence of digital state transitions from the specified Arduino input pin in pull-up mode. ReceiveSysex Represents an operator that generates a sequence of system exclusive messages received from the specified Arduino. SendSysex Represents an operator that sends a sequence of system exclusive messages to the specified Arduino. ServoOutput Represents an operator that writes a sequence of angular positions to control a servomotor connected to an Arduino output pin. SysexReceivedEventArgs Provides data for the SysexReceived event. Enums I2CRequestMode Specifies the read/write mode for I2C requests. PinMode Specifies the mode of an individual Arduino pin."
  },
  "api/Bonsai.Arduino.I2CRequestMode.html": {
    "href": "api/Bonsai.Arduino.I2CRequestMode.html",
    "title": "Enum I2CRequestMode",
    "keywords": "Enum I2CRequestMode Specifies the read/write mode for I2C requests. Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public enum I2CRequestMode : byte Fields Name Description ReadContinuously A request to read and report data continuously from the device. ReadOnce A request to read one data sample from the device. StopReading A request to stop reading data from the device. Write A request to write data to the device."
  },
  "api/Bonsai.Arduino.InputPullUp.html": {
    "href": "api/Bonsai.Arduino.InputPullUp.html",
    "title": "Class InputPullUp",
    "keywords": "Class InputPullUp Represents an operator that generates a sequence of digital state transitions from the specified Arduino input pin in pull-up mode. Inheritance Object Source < Boolean > InputPullUp Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class InputPullUp : Source<bool> Properties Pin Gets or sets the digital input pin number from which to take readings. Declaration public int Pin { get; set; } Property Value Type Description Int32 PortName Gets or sets the name of the serial port used to communicate with the Arduino. Declaration [TypeConverter(typeof(PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods Generate() Configures the digital pin as INPUT_PULLUP and generates an observable sequence of all its state transitions. Declaration public override IObservable<bool> Generate() Returns Type Description IObservable < Boolean > An observable sequence that reports the binary state transitions from the specified Arduino input pin: true if the pin is HIGH; false if the pin is LOW. Overrides Bonsai.Source<System.Boolean>.Generate()"
  },
  "api/Bonsai.Arduino.PinMode.html": {
    "href": "api/Bonsai.Arduino.PinMode.html",
    "title": "Enum PinMode",
    "keywords": "Enum PinMode Specifies the mode of an individual Arduino pin. Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public enum PinMode : byte Fields Name Description Analog The analog pin is configured in analog input mode. Encoder The pin is configured for a rotary encoder. I2C The pin is configured to access I2C devices. Input The digital pin is configured as INPUT. InputPullUp The digital pin is configured as INPUT_PULLUP. OneWire The pin is configured as a 1-wire bus master. Output The digital pin is configured as OUTPUT. Pwm The digital pin is configured in PWM output mode. Serial The pin is configured for serial communication. Servo The digital pin is configured in Servo output mode. Shift The pin is configured as a data pin in shiftOut/shiftIn mode. Stepper The pin is configured for stepper motor control."
  },
  "api/Bonsai.Arduino.ReceiveSysex.html": {
    "href": "api/Bonsai.Arduino.ReceiveSysex.html",
    "title": "Class ReceiveSysex",
    "keywords": "Class ReceiveSysex Represents an operator that generates a sequence of system exclusive messages received from the specified Arduino. Inheritance Object Source < Byte []> ReceiveSysex Inherited Members Source<Byte[]>.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class ReceiveSysex : Source<byte[]> Properties Feature Gets or sets the feature ID used to identify the system exclusive message payload. Declaration public int Feature { get; set; } Property Value Type Description Int32 PortName Gets or sets the name of the serial port used to communicate with the Arduino. Declaration [TypeConverter(typeof(PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods Generate() Generates an observable sequence of all the system exclusive messages with the specified feature ID received from the Arduino. Declaration public override IObservable<byte[]> Generate() Returns Type Description IObservable < Byte []> A sequence of byte[] objects containing the payload data which was included with each system exclusive message received from the Arduino. Overrides Bonsai.Source<System.Byte[]>.Generate()"
  },
  "api/Bonsai.Arduino.SendSysex.html": {
    "href": "api/Bonsai.Arduino.SendSysex.html",
    "title": "Class SendSysex",
    "keywords": "Class SendSysex Represents an operator that sends a sequence of system exclusive messages to the specified Arduino. Inheritance Object Combinator < Byte [], Byte []> Sink < Byte []> SendSysex Inherited Members Combinator<Byte[], Byte[]>.Process(IObservable<Byte[]>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class SendSysex : Sink<byte[]> Properties Feature Gets or sets the feature ID used to identify the system exclusive message payload. Declaration public int Feature { get; set; } Property Value Type Description Int32 PortName Gets or sets the name of the serial port used to communicate with the Arduino. Declaration [TypeConverter(typeof(PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods Process(IObservable<Byte[]>) Writes a sequence of system exclusive messages to the specified Arduino. Declaration public override IObservable<byte[]> Process(IObservable<byte[]> source) Parameters Type Name Description IObservable < Byte []> source A sequence of byte[] specifying the payload data to include in each of the system exclusive messages sent to the Arduino. The specified feature ID will be used to identify each message. Returns Type Description IObservable < Byte []> A sequence of byte[] objects containing the payload data which was included with each system exclusive message sent to the Arduino. Overrides Bonsai.Combinator<System.Byte[], System.Byte[]>.Process(System.IObservable<System.Byte[]>) Remarks This operator only subscribes to the source sequence after initializing the connection to the Arduino."
  },
  "api/Bonsai.Arduino.ServoOutput.html": {
    "href": "api/Bonsai.Arduino.ServoOutput.html",
    "title": "Class ServoOutput",
    "keywords": "Class ServoOutput Represents an operator that writes a sequence of angular positions to control a servomotor connected to an Arduino output pin. Inheritance Object Combinator < Int32 , Int32 > Sink < Int32 > ServoOutput Inherited Members Combinator<Int32, Int32>.Process(IObservable<Int32>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class ServoOutput : Sink<int> Properties Pin Gets or sets the digital output pin number to which the servo is connected. Declaration public int Pin { get; set; } Property Value Type Description Int32 PortName Gets or sets the name of the serial port used to communicate with the Arduino. Declaration [TypeConverter(typeof(PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods Process(IObservable<Int32>) Writes a sequence of angular position values to control a servomotor connected to the specified Arduino output pin. Declaration public override IObservable<int> Process(IObservable<int> source) Parameters Type Name Description IObservable < Int32 > source A sequence of Int32 values specifying angular positions, in degrees from 0 to 180, used to control the servomotor connected to the specified Arduino output pin. Returns Type Description IObservable < Int32 > A sequence of Int32 values containing the angular positions which have been used to control the servomotor connected to the specified Arduino output pin. Overrides Bonsai.Combinator<System.Int32, System.Int32>.Process(System.IObservable<System.Int32>) Remarks This operator only subscribes to the source sequence after initializing the connection to the Arduino and configuring the digital pin as a Servo output."
  },
  "api/Bonsai.Arduino.SysexReceivedEventArgs.html": {
    "href": "api/Bonsai.Arduino.SysexReceivedEventArgs.html",
    "title": "Class SysexReceivedEventArgs",
    "keywords": "Class SysexReceivedEventArgs Provides data for the SysexReceived event. Inheritance Object EventArgs SysexReceivedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class SysexReceivedEventArgs : EventArgs Constructors SysexReceivedEventArgs(Byte, Byte[]) Initializes a new instance of the SysexReceivedEventArgs class using the specified feature ID and optional data payload. Declaration public SysexReceivedEventArgs(byte feature, byte[] args) Parameters Type Name Description Byte feature The identifier of the system exclusive (SysEx) feature received in the message event. Byte [] args The data payload received together with the SysEx message. Properties Args Gets the data payload received together with the SysEx message. Declaration public byte[] Args { get; } Property Value Type Description Byte [] Feature Gets the identifier of the system exclusive (SysEx) feature received in the message event. Declaration public byte Feature { get; } Property Value Type Description Byte"
  },
  "api/Bonsai.ArrayConvert.html": {
    "href": "api/Bonsai.ArrayConvert.html",
    "title": "Class ArrayConvert",
    "keywords": "Class ArrayConvert Provides methods for converting between instances of the Array class and String . Inheritance Object ArrayConvert Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public static class ArrayConvert Methods ToArray(String, Int32, Type) Converts the String to an Array equivalent with the specified rank and elementType . Declaration public static Array ToArray(string value, int rank, Type elementType) Parameters Type Name Description String value The string to convert. Int32 rank The rank of the result array; can be either one- or two-dimensional. Type elementType The type of the elements in the array. Returns Type Description Array An Array equivalent of the string. ToArray(String, Int32, Type, IFormatProvider) Converts the String to an Array equivalent with the specified rank and elementType using a provider of culture-specific formatting information. Declaration public static Array ToArray(string value, int rank, Type elementType, IFormatProvider provider) Parameters Type Name Description String value The string to convert. Int32 rank The rank of the result array; can be either one- or two-dimensional. Type elementType The type of the elements in the array. IFormatProvider provider An object that supplies culture-specific formatting information. Returns Type Description Array An Array equivalent of the string. ToString(Array) Converts the Array to a String . Declaration public static string ToString(Array array) Parameters Type Name Description Array array The Array to be converted. Returns Type Description String A string representation of the Array using the system's current culture. ToString(Array, IFormatProvider) Converts the Array to a String using the specified culture-specific format information. Declaration public static string ToString(Array array, IFormatProvider provider) Parameters Type Name Description Array array The Array to be converted. IFormatProvider provider An object that supplies culture-specific formatting information. Returns Type Description String A string representation of the Array using the specified culture-specific format information."
  },
  "api/Bonsai.Audio.AudioCapture.html": {
    "href": "api/Bonsai.Audio.AudioCapture.html",
    "title": "Class AudioCapture",
    "keywords": "Class AudioCapture Represents an operator that generates a sequence of buffered samples acquired from the specified audio capture device. Inheritance Object Source < Mat > AudioCapture Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class AudioCapture : Source<Mat> Constructors AudioCapture() Initializes a new instance of the AudioCapture class. Declaration public AudioCapture() Properties BufferLength Gets or sets the length of the capture buffer, in milliseconds. Declaration public double BufferLength { get; set; } Property Value Type Description Double DeviceName Gets or sets the name of the capture device from which to acquire samples. Declaration [TypeConverter(typeof(CaptureDeviceNameConverter))] public string DeviceName { get; set; } Property Value Type Description String SampleFormat Gets or sets the format of capture buffer samples. Declaration [TypeConverter(typeof(AudioCapture.SampleFormatConverter))] public ALFormat SampleFormat { get; set; } Property Value Type Description ALFormat SampleRate Gets or sets the sample rate used by the audio capture device, in Hz. Declaration public int SampleRate { get; set; } Property Value Type Description Int32 Methods Generate() Generates an observable sequence of buffered audio samples acquired from the specified audio capture device. Declaration public override IObservable<Mat> Generate() Returns Type Description IObservable < Mat > A sequence of Mat objects representing audio capture buffers of a fixed length. See BufferLength . Overrides Bonsai.Source<OpenCV.Net.Mat>.Generate()"
  },
  "api/Bonsai.Audio.AudioContextManager.html": {
    "href": "api/Bonsai.Audio.AudioContextManager.html",
    "title": "Class AudioContextManager",
    "keywords": "Class AudioContextManager Manages the lifetime of an audio context and its associated resources. Inheritance Object AudioContextManager Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class AudioContextManager : IDisposable Properties AudioContext Gets the audio context associated with any loaded audio resources. Declaration public AudioContext AudioContext { get; } Property Value Type Description AudioContext ResourceManager Gets the resource manager storing all the resources associated with this audio context. Declaration public ResourceManager ResourceManager { get; } Property Value Type Description ResourceManager Methods Dispose() Releases all resources used by the AudioContextManager class. Declaration public void Dispose() Implements System.IDisposable"
  },
  "api/Bonsai.Audio.AudioPlayback.html": {
    "href": "api/Bonsai.Audio.AudioPlayback.html",
    "title": "Class AudioPlayback",
    "keywords": "Class AudioPlayback Represents an operator that plays a sequence of buffered samples to the specified audio device. Inheritance Object Combinator < Mat , Mat > Sink < Mat > AudioPlayback Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class AudioPlayback : Sink<Mat> Properties DeviceName Gets or sets the name of the audio device used for playback. Declaration [TypeConverter(typeof(PlaybackDeviceNameConverter))] public string DeviceName { get; set; } Property Value Type Description String SampleRate Gets or sets the sample rate, in Hz, used to playback the audio buffers. Declaration public int SampleRate { get; set; } Property Value Type Description Int32 SourceName Gets or sets the optional name of the source used to playback the audio buffers. Declaration [TypeConverter(typeof(SourceNameConverter))] public string SourceName { get; set; } Property Value Type Description String Methods Process(IObservable<Mat>) Plays an observable sequence of buffered samples to the specified audio device. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of Mat objects representing the buffered audio samples to queue for playback on the specified audio device. Returns Type Description IObservable < Mat > An observable sequence that is identical to the source sequence but where there is an additional side effect of queueing the audio buffers for playback on the specified audio device. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>) Remarks This operator only subscribes to the source sequence after initializing the audio context on the specified audio device. Process(IObservable<Mat>, IObservable<AudioSource>) Plays an observable sequence of buffered samples to all the specified audio sources. Declaration public IObservable<Mat> Process(IObservable<Mat> dataSource, IObservable<AudioSource> audioSource) Parameters Type Name Description IObservable < Mat > dataSource A sequence of Mat objects representing the buffered audio samples to queue for playback on all the active audio sources. IObservable < AudioSource > audioSource A sequence of AudioSource objects on which to queue the buffered audio samples for playback. Returns Type Description IObservable < Mat > An observable sequence that is identical to the dataSource sequence but where there is an additional side effect of queueing the audio buffers for playback on all the active audio sources. Remarks This operator only subscribes to the dataSource sequence after initializing the audio context on the specified audio device."
  },
  "api/Bonsai.Audio.AudioReader.html": {
    "href": "api/Bonsai.Audio.AudioReader.html",
    "title": "Class AudioReader",
    "keywords": "Class AudioReader Represents an operator that generates a sequence of buffered audio samples from an uncompressed RIFF/WAV file. Inheritance Object Source < Mat > AudioReader Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class AudioReader : Source<Mat> Properties BufferLength Gets or sets the length of the sample buffer, in milliseconds. Declaration public double BufferLength { get; set; } Property Value Type Description Double FileName Gets or sets the name of the WAV file. Declaration [FileNameFilter(\"WAV Files (*.wav;*.wave)|*.wav;*.wave|All Files|*.*\")] public string FileName { get; set; } Property Value Type Description String SampleRate Gets or sets the sample rate, in Hz, used to playback the sample buffers. If it is zero, samples will be played at the rate specified in the RIFF/WAV file header. Declaration public int SampleRate { get; set; } Property Value Type Description Int32 Methods Generate() Generates a sequence of buffered audio samples from the specified WAV file. Declaration public override IObservable<Mat> Generate() Returns Type Description IObservable < Mat > A sequence of Mat objects representing audio sample buffers of a fixed length. See BufferLength . Overrides Bonsai.Source<OpenCV.Net.Mat>.Generate() Generate<TSource>(IObservable<TSource>) Generates a sequence of buffered audio samples from the specified WAV file, where each new buffer is emitted only when an observable sequence raises a notification. Declaration public IObservable<Mat> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting audio buffers. Returns Type Description IObservable < Mat > A sequence of Mat objects representing audio sample buffers of a fixed length. See BufferLength . Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Audio.AudioResources.html": {
    "href": "api/Bonsai.Audio.AudioResources.html",
    "title": "Class AudioResources",
    "keywords": "Class AudioResources Represents an operator that creates a collection of buffer resources and audio sources to be loaded into the resource manager. Inheritance Object Combinator < ResourceConfigurationCollection , ResourceConfigurationCollection > Transform < ResourceConfigurationCollection , ResourceConfigurationCollection > ResourceLoader AudioResources Inherited Members ResourceLoader.Process(IObservable<ResourceManager>) ResourceLoader.Process(IObservable<ResourceConfigurationCollection>) Combinator<ResourceConfigurationCollection, ResourceConfigurationCollection>.Process(IObservable<ResourceConfigurationCollection>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class AudioResources : ResourceLoader Properties Buffers Gets the collection of buffer resources to be loaded into the resource manager. Declaration public BufferConfigurationCollection Buffers { get; } Property Value Type Description BufferConfigurationCollection Sources Gets the collection of audio sources to be loaded into the resource manager. Declaration public SourceConfigurationCollection Sources { get; } Property Value Type Description SourceConfigurationCollection Methods GetResources() Declaration protected override IEnumerable<IResourceConfiguration> GetResources() Returns Type Description IEnumerable < IResourceConfiguration > Overrides ResourceLoader.GetResources() Process(IObservable<AudioContextManager>) Creates a collection of buffer resources and audio sources to be loaded into the resource manager. Declaration public IObservable<ResourceConfigurationCollection> Process(IObservable<AudioContextManager> source) Parameters Type Name Description IObservable < AudioContextManager > source A sequence of AudioContextManager objects containing the resource managers into which the resources will be loaded. Returns Type Description IObservable < ResourceConfigurationCollection > A sequence of ResourceConfigurationCollection objects which can be used to load resources into the resource manager."
  },
  "api/Bonsai.Audio.AudioSource.html": {
    "href": "api/Bonsai.Audio.AudioSource.html",
    "title": "Class AudioSource",
    "keywords": "Class AudioSource Represents a source of spatialized audio which can be used to define and control the audio landscape surrounding the listener. Inheritance Object AudioSource Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class AudioSource : IDisposable Constructors AudioSource() Initializes a new instance of the AudioSource class. Declaration public AudioSource() Properties Direction Gets or sets the direction vector of the audio source. Declaration public Vector3 Direction { get; set; } Property Value Type Description Vector3 Id Gets the name of the audio source. This is an OpenAL buffer reference which can be used to call audio source manipulation functions. Declaration public int Id { get; } Property Value Type Description Int32 Looping Gets or sets a value indicating whether the audio source is looping. Declaration public bool Looping { get; set; } Property Value Type Description Boolean Position Gets or sets the location of the audio source in three-dimensional space. Declaration public Vector3 Position { get; set; } Property Value Type Description Vector3 Relative Gets or sets a value indicating whether the audio source uses coordinates relative to the listener. Declaration public bool Relative { get; set; } Property Value Type Description Boolean State Gets information about the current source state. Declaration public ALSourceState State { get; } Property Value Type Description ALSourceState Velocity Gets or sets the velocity of the audio source in three-dimensional space. Declaration public Vector3 Velocity { get; set; } Property Value Type Description Vector3 Methods Dispose() Releases all resources used by the AudioSource class. Declaration public void Dispose() Implements System.IDisposable"
  },
  "api/Bonsai.Audio.AudioWriter.html": {
    "href": "api/Bonsai.Audio.AudioWriter.html",
    "title": "Class AudioWriter",
    "keywords": "Class AudioWriter Represents an operator that writes a sequence of buffered samples into an uncompressed RIFF/WAV file. Inheritance Object FileSink FileSink < Mat , RiffWriter > AudioWriter Inherited Members FileSink<Mat, RiffWriter>.CreateWriter(String, Mat) FileSink<Mat, RiffWriter>.Write(RiffWriter, Mat) FileSink<Mat, RiffWriter>.Process<TElement>(IObservable<TElement>, Func<TElement, Mat>) FileSink<Mat, RiffWriter>.Process(IObservable<Mat>) FileSink.FileName FileSink.Suffix FileSink.Buffered FileSink.Overwrite Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class AudioWriter : FileSink<Mat, RiffWriter> Constructors AudioWriter() Initializes a new instance of the AudioWriter class. Declaration public AudioWriter() Properties SampleRate Gets or sets the sample rate of the input signal, in Hz. Declaration public int SampleRate { get; set; } Property Value Type Description Int32 Methods CreateWriter(String, Mat) Declaration protected override RiffWriter CreateWriter(string fileName, Mat input) Parameters Type Name Description String fileName Mat input Returns Type Description RiffWriter Overrides Bonsai.IO.FileSink<OpenCV.Net.Mat, Bonsai.Audio.RiffWriter>.CreateWriter(System.String, OpenCV.Net.Mat) Write(RiffWriter, Mat) Writes a sample buffer into the WAV file. Declaration protected override void Write(RiffWriter writer, Mat input) Parameters Type Name Description RiffWriter writer The RiffWriter used to write data into the WAV file. Mat input A Mat object containing the audio samples to write into the file. Overrides Bonsai.IO.FileSink<OpenCV.Net.Mat, Bonsai.Audio.RiffWriter>.Write(Bonsai.Audio.RiffWriter, OpenCV.Net.Mat)"
  },
  "api/Bonsai.Audio.Buffer.html": {
    "href": "api/Bonsai.Audio.Buffer.html",
    "title": "Class Buffer",
    "keywords": "Class Buffer Represents an audio buffer which can be used to store and manipulate audio data. Inheritance Object Buffer Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class Buffer : IDisposable Constructors Buffer() Initializes a new instance of the Buffer class. Declaration public Buffer() Properties Id Gets the name of the buffer. This is an OpenAL buffer reference which can be used to call audio manipulation functions. Declaration public int Id { get; } Property Value Type Description Int32 Methods Dispose() Releases all resources used by the Buffer class. Declaration public void Dispose() Implements System.IDisposable"
  },
  "api/Bonsai.Audio.Configuration.BufferConfiguration.html": {
    "href": "api/Bonsai.Audio.Configuration.BufferConfiguration.html",
    "title": "Class BufferConfiguration",
    "keywords": "Class BufferConfiguration Provides configuration and loading functionality for audio buffer resources. Inheritance Object ResourceConfiguration < Buffer > BufferConfiguration SoundBuffer Implements IResourceConfiguration Inherited Members ResourceConfiguration<Buffer>.Name ResourceConfiguration<Buffer>.IResourceConfiguration.Type ResourceConfiguration<Buffer>.IResourceConfiguration.CreateResource(ResourceManager) ResourceConfiguration<Buffer>.ToString() ResourceConfiguration<Buffer>.OpenResource(String) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio.Configuration Assembly : Bonsai.Audio.dll Syntax public class BufferConfiguration : ResourceConfiguration<Buffer>, IResourceConfiguration Methods CreateResource(ResourceManager) Creates a new empty audio buffer resource, typically used for uploading dynamic data. Declaration public override Buffer CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager Returns Type Description Buffer A new instance of the Buffer class. Overrides Bonsai.Resources.ResourceConfiguration<Bonsai.Audio.Buffer>.CreateResource(Bonsai.Resources.ResourceManager) Implements IResourceConfiguration"
  },
  "api/Bonsai.Audio.Configuration.BufferConfigurationCollection.html": {
    "href": "api/Bonsai.Audio.Configuration.BufferConfigurationCollection.html",
    "title": "Class BufferConfigurationCollection",
    "keywords": "Class BufferConfigurationCollection Represents a collection of audio buffer resources. Inheritance Object Collection < BufferConfiguration > KeyedCollection < String , BufferConfiguration > BufferConfigurationCollection Implements IList < BufferConfiguration > ICollection < BufferConfiguration > IList ICollection IReadOnlyList < BufferConfiguration > IReadOnlyCollection < BufferConfiguration > IEnumerable < BufferConfiguration > IEnumerable Inherited Members KeyedCollection<String, BufferConfiguration>.Contains(String) KeyedCollection<String, BufferConfiguration>.Remove(String) KeyedCollection<String, BufferConfiguration>.ChangeItemKey(BufferConfiguration, String) KeyedCollection<String, BufferConfiguration>.ClearItems() KeyedCollection<String, BufferConfiguration>.GetKeyForItem(BufferConfiguration) KeyedCollection<String, BufferConfiguration>.InsertItem(Int32, BufferConfiguration) KeyedCollection<String, BufferConfiguration>.RemoveItem(Int32) KeyedCollection<String, BufferConfiguration>.SetItem(Int32, BufferConfiguration) KeyedCollection<String, BufferConfiguration>.Comparer KeyedCollection<String, BufferConfiguration>.Item[String] KeyedCollection<String, BufferConfiguration>.Dictionary Collection<BufferConfiguration>.Add(BufferConfiguration) Collection<BufferConfiguration>.Clear() Collection<BufferConfiguration>.CopyTo(BufferConfiguration[], Int32) Collection<BufferConfiguration>.Contains(BufferConfiguration) Collection<BufferConfiguration>.GetEnumerator() Collection<BufferConfiguration>.IndexOf(BufferConfiguration) Collection<BufferConfiguration>.Insert(Int32, BufferConfiguration) Collection<BufferConfiguration>.Remove(BufferConfiguration) Collection<BufferConfiguration>.RemoveAt(Int32) Collection<BufferConfiguration>.ClearItems() Collection<BufferConfiguration>.InsertItem(Int32, BufferConfiguration) Collection<BufferConfiguration>.RemoveItem(Int32) Collection<BufferConfiguration>.SetItem(Int32, BufferConfiguration) Collection<BufferConfiguration>.IEnumerable.GetEnumerator() Collection<BufferConfiguration>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Audio.Configuration.BufferConfiguration>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Audio.Configuration.BufferConfiguration>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<BufferConfiguration>.IList.Add(Object) Collection<BufferConfiguration>.IList.Contains(Object) Collection<BufferConfiguration>.IList.IndexOf(Object) Collection<BufferConfiguration>.IList.Insert(Int32, Object) Collection<BufferConfiguration>.IList.Remove(Object) Collection<BufferConfiguration>.Count Collection<BufferConfiguration>.Items Collection<BufferConfiguration>.Item[Int32] Collection<BufferConfiguration>.ICollection<BufferConfiguration>.IsReadOnly Collection<BufferConfiguration>.ICollection.IsSynchronized Collection<BufferConfiguration>.ICollection.SyncRoot Collection<BufferConfiguration>.IList.Item[Int32] Collection<BufferConfiguration>.IList.IsReadOnly Collection<BufferConfiguration>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio.Configuration Assembly : Bonsai.Audio.dll Syntax public class BufferConfigurationCollection : KeyedCollection<string, BufferConfiguration>, IList<BufferConfiguration>, ICollection<BufferConfiguration>, IList, ICollection, IReadOnlyList<BufferConfiguration>, IReadOnlyCollection<BufferConfiguration>, IEnumerable<BufferConfiguration>, IEnumerable Methods GetKeyForItem(BufferConfiguration) Declaration protected override string GetKeyForItem(BufferConfiguration item) Parameters Type Name Description BufferConfiguration item Returns Type Description String Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Bonsai.Audio.Configuration.BufferConfiguration>.GetKeyForItem(Bonsai.Audio.Configuration.BufferConfiguration) Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Audio.Configuration.html": {
    "href": "api/Bonsai.Audio.Configuration.html",
    "title": "Namespace Bonsai.Audio.Configuration",
    "keywords": "Namespace Bonsai.Audio.Configuration Classes BufferConfiguration Provides configuration and loading functionality for audio buffer resources. BufferConfigurationCollection Represents a collection of audio buffer resources. SoundBuffer Provides configuration and loading functionality for WAV audio buffers. SourceConfiguration Provides configuration and loading functionality for audio sources. SourceConfigurationCollection Represents a collection of audio source resources."
  },
  "api/Bonsai.Audio.Configuration.SoundBuffer.html": {
    "href": "api/Bonsai.Audio.Configuration.SoundBuffer.html",
    "title": "Class SoundBuffer",
    "keywords": "Class SoundBuffer Provides configuration and loading functionality for WAV audio buffers. Inheritance Object ResourceConfiguration < Buffer > BufferConfiguration SoundBuffer Implements IResourceConfiguration Inherited Members ResourceConfiguration<Buffer>.Name ResourceConfiguration<Buffer>.IResourceConfiguration.Type ResourceConfiguration<Buffer>.IResourceConfiguration.CreateResource(ResourceManager) ResourceConfiguration<Buffer>.OpenResource(String) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio.Configuration Assembly : Bonsai.Audio.dll Syntax public class SoundBuffer : BufferConfiguration, IResourceConfiguration Properties FileName Gets or sets the name of the sound WAV file. Declaration [FileNameFilter(\"WAV Files (*.wav;*.wave)|*.wav;*.wave|All Files|*.*\")] [TypeConverter(typeof(ResourceFileNameConverter))] public string FileName { get; set; } Property Value Type Description String Methods CreateResource(ResourceManager) Creates a new buffer resource by reading and storing audio data from a WAV file. Declaration public override Buffer CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager Returns Type Description Buffer A new instance of the Buffer class storing audio data from the loaded WAV file. Overrides BufferConfiguration.CreateResource(ResourceManager) ToString() Declaration public override string ToString() Returns Type Description String Overrides Bonsai.Resources.ResourceConfiguration<Bonsai.Audio.Buffer>.ToString() Implements IResourceConfiguration"
  },
  "api/Bonsai.Audio.Configuration.SourceConfiguration.html": {
    "href": "api/Bonsai.Audio.Configuration.SourceConfiguration.html",
    "title": "Class SourceConfiguration",
    "keywords": "Class SourceConfiguration Provides configuration and loading functionality for audio sources. Inheritance Object ResourceConfiguration < AudioSource > SourceConfiguration Implements IResourceConfiguration Inherited Members ResourceConfiguration<AudioSource>.Name ResourceConfiguration<AudioSource>.IResourceConfiguration.Type ResourceConfiguration<AudioSource>.IResourceConfiguration.CreateResource(ResourceManager) ResourceConfiguration<AudioSource>.ToString() ResourceConfiguration<AudioSource>.OpenResource(String) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio.Configuration Assembly : Bonsai.Audio.dll Syntax public class SourceConfiguration : ResourceConfiguration<AudioSource>, IResourceConfiguration Properties BufferName Gets or sets the optional name of a buffer to play when creating the source. Declaration [TypeConverter(typeof(BufferNameConverter))] public string BufferName { get; set; } Property Value Type Description String Direction Gets or sets the direction vector of the audio source. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Direction { get; set; } Property Value Type Description Vector3 Looping Gets or sets a value indicating whether the audio source is looping. Declaration public bool Looping { get; set; } Property Value Type Description Boolean Position Gets or sets the location of the audio source in three-dimensional space. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Position { get; set; } Property Value Type Description Vector3 Relative Gets or sets a value indicating whether the audio source uses coordinates relative to the listener. Declaration public bool Relative { get; set; } Property Value Type Description Boolean State Gets or sets a value specifying the state to which the source should be set after creation. Declaration public ALSourceState State { get; set; } Property Value Type Description ALSourceState Velocity Gets or sets the velocity of the audio source in three-dimensional space. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Velocity { get; set; } Property Value Type Description Vector3 Methods CreateResource(ResourceManager) Creates a new source of spatialized audio. Declaration public override AudioSource CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager Returns Type Description AudioSource A new instance of the AudioSource class. Overrides Bonsai.Resources.ResourceConfiguration<Bonsai.Audio.AudioSource>.CreateResource(Bonsai.Resources.ResourceManager) Implements IResourceConfiguration"
  },
  "api/Bonsai.Audio.Configuration.SourceConfigurationCollection.html": {
    "href": "api/Bonsai.Audio.Configuration.SourceConfigurationCollection.html",
    "title": "Class SourceConfigurationCollection",
    "keywords": "Class SourceConfigurationCollection Represents a collection of audio source resources. Inheritance Object Collection < SourceConfiguration > KeyedCollection < String , SourceConfiguration > SourceConfigurationCollection Implements IList < SourceConfiguration > ICollection < SourceConfiguration > IList ICollection IReadOnlyList < SourceConfiguration > IReadOnlyCollection < SourceConfiguration > IEnumerable < SourceConfiguration > IEnumerable Inherited Members KeyedCollection<String, SourceConfiguration>.Contains(String) KeyedCollection<String, SourceConfiguration>.Remove(String) KeyedCollection<String, SourceConfiguration>.ChangeItemKey(SourceConfiguration, String) KeyedCollection<String, SourceConfiguration>.ClearItems() KeyedCollection<String, SourceConfiguration>.GetKeyForItem(SourceConfiguration) KeyedCollection<String, SourceConfiguration>.InsertItem(Int32, SourceConfiguration) KeyedCollection<String, SourceConfiguration>.RemoveItem(Int32) KeyedCollection<String, SourceConfiguration>.SetItem(Int32, SourceConfiguration) KeyedCollection<String, SourceConfiguration>.Comparer KeyedCollection<String, SourceConfiguration>.Item[String] KeyedCollection<String, SourceConfiguration>.Dictionary Collection<SourceConfiguration>.Add(SourceConfiguration) Collection<SourceConfiguration>.Clear() Collection<SourceConfiguration>.CopyTo(SourceConfiguration[], Int32) Collection<SourceConfiguration>.Contains(SourceConfiguration) Collection<SourceConfiguration>.GetEnumerator() Collection<SourceConfiguration>.IndexOf(SourceConfiguration) Collection<SourceConfiguration>.Insert(Int32, SourceConfiguration) Collection<SourceConfiguration>.Remove(SourceConfiguration) Collection<SourceConfiguration>.RemoveAt(Int32) Collection<SourceConfiguration>.ClearItems() Collection<SourceConfiguration>.InsertItem(Int32, SourceConfiguration) Collection<SourceConfiguration>.RemoveItem(Int32) Collection<SourceConfiguration>.SetItem(Int32, SourceConfiguration) Collection<SourceConfiguration>.IEnumerable.GetEnumerator() Collection<SourceConfiguration>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Audio.Configuration.SourceConfiguration>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Audio.Configuration.SourceConfiguration>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<SourceConfiguration>.IList.Add(Object) Collection<SourceConfiguration>.IList.Contains(Object) Collection<SourceConfiguration>.IList.IndexOf(Object) Collection<SourceConfiguration>.IList.Insert(Int32, Object) Collection<SourceConfiguration>.IList.Remove(Object) Collection<SourceConfiguration>.Count Collection<SourceConfiguration>.Items Collection<SourceConfiguration>.Item[Int32] Collection<SourceConfiguration>.ICollection<SourceConfiguration>.IsReadOnly Collection<SourceConfiguration>.ICollection.IsSynchronized Collection<SourceConfiguration>.ICollection.SyncRoot Collection<SourceConfiguration>.IList.Item[Int32] Collection<SourceConfiguration>.IList.IsReadOnly Collection<SourceConfiguration>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio.Configuration Assembly : Bonsai.Audio.dll Syntax public class SourceConfigurationCollection : KeyedCollection<string, SourceConfiguration>, IList<SourceConfiguration>, ICollection<SourceConfiguration>, IList, ICollection, IReadOnlyList<SourceConfiguration>, IReadOnlyCollection<SourceConfiguration>, IEnumerable<SourceConfiguration>, IEnumerable Methods GetKeyForItem(SourceConfiguration) Declaration protected override string GetKeyForItem(SourceConfiguration item) Parameters Type Name Description SourceConfiguration item Returns Type Description String Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Bonsai.Audio.Configuration.SourceConfiguration>.GetKeyForItem(Bonsai.Audio.Configuration.SourceConfiguration) Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Audio.CreateAudioContext.html": {
    "href": "api/Bonsai.Audio.CreateAudioContext.html",
    "title": "Class CreateAudioContext",
    "keywords": "Class CreateAudioContext Represents an operator that creates an audio context using the specified device and listener properties. Inheritance Object Source < AudioContextManager > CreateAudioContext Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax [TypeConverter(typeof(CreateAudioContext.AudioContextConverter))] public class CreateAudioContext : Source<AudioContextManager> Properties DeviceName Gets or sets the name of the audio device used for playback. Declaration [TypeConverter(typeof(PlaybackDeviceNameConverter))] public string DeviceName { get; set; } Property Value Type Description String Direction Gets or sets the direction vector of the listener, in the world coordinate frame. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Direction { get; set; } Property Value Type Description Vector3 Gain Gets or sets the amount of amplification applied to the listener. Each multiplication by 2 increases gain by +6dB. Declaration public float Gain { get; set; } Property Value Type Description Single Position Gets or sets the location of the listener, in the world coordinate frame. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Position { get; set; } Property Value Type Description Vector3 Refresh Gets or sets the refresh frequency, in Hz, used by the audio device. Zero represents the driver default. Declaration public int Refresh { get; set; } Property Value Type Description Int32 SampleRate Gets or sets the sample rate, in Hz, used by the audio device. Zero represents the driver default. Declaration public int SampleRate { get; set; } Property Value Type Description Int32 Up Gets or sets the up vector of the listener, in the world coordinate frame. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Up { get; set; } Property Value Type Description Vector3 Velocity Gets or sets the velocity of the listener, in the world coordinate frame. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Velocity { get; set; } Property Value Type Description Vector3 Methods Generate() Generates an observable sequence that contains the audio context manager object. Declaration public override IObservable<AudioContextManager> Generate() Returns Type Description IObservable < AudioContextManager > A sequence containing a single instance of the AudioContextManager class which will manage the lifetime of the audio context. Overrides Bonsai.Source<Bonsai.Audio.AudioContextManager>.Generate()"
  },
  "api/Bonsai.Audio.CreateSource.html": {
    "href": "api/Bonsai.Audio.CreateSource.html",
    "title": "Class CreateSource",
    "keywords": "Class CreateSource Represents an operator that creates a spatialized source on the specified audio device. Inheritance Object Source < AudioSource > CreateSource Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class CreateSource : Source<AudioSource> Properties BufferName Gets or sets the optional name of a buffer to play when creating the source. Declaration [TypeConverter(typeof(BufferNameConverter))] public string BufferName { get; set; } Property Value Type Description String DeviceName Gets or sets the name of the audio device used for playback. Declaration [TypeConverter(typeof(PlaybackDeviceNameConverter))] public string DeviceName { get; set; } Property Value Type Description String Direction Gets or sets the direction vector of the audio source. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Direction { get; set; } Property Value Type Description Vector3 Looping Gets or sets a value indicating whether the audio source is looping. Declaration public bool Looping { get; set; } Property Value Type Description Boolean Position Gets or sets the current location of the audio source in three-dimensional space. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Position { get; set; } Property Value Type Description Vector3 Relative Gets or sets a value indicating whether the audio source uses coordinates relative to the listener. Declaration public bool Relative { get; set; } Property Value Type Description Boolean State Gets or sets a value specifying the state to which the source should be set after creation. Declaration public ALSourceState State { get; set; } Property Value Type Description ALSourceState Velocity Gets or sets the current velocity of the audio source in three-dimensional space. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Velocity { get; set; } Property Value Type Description Vector3 Methods Generate() Generates an observable sequence that contains the created audio source. Declaration public override IObservable<AudioSource> Generate() Returns Type Description IObservable < AudioSource > A sequence containing the created AudioSource instance. Overrides Bonsai.Source<Bonsai.Audio.AudioSource>.Generate()"
  },
  "api/Bonsai.Audio.html": {
    "href": "api/Bonsai.Audio.html",
    "title": "Namespace Bonsai.Audio",
    "keywords": "Namespace Bonsai.Audio Classes AudioCapture Represents an operator that generates a sequence of buffered samples acquired from the specified audio capture device. AudioContextManager Manages the lifetime of an audio context and its associated resources. AudioPlayback Represents an operator that plays a sequence of buffered samples to the specified audio device. AudioReader Represents an operator that generates a sequence of buffered audio samples from an uncompressed RIFF/WAV file. AudioResources Represents an operator that creates a collection of buffer resources and audio sources to be loaded into the resource manager. AudioSource Represents a source of spatialized audio which can be used to define and control the audio landscape surrounding the listener. AudioWriter Represents an operator that writes a sequence of buffered samples into an uncompressed RIFF/WAV file. Buffer Represents an audio buffer which can be used to store and manipulate audio data. CreateAudioContext Represents an operator that creates an audio context using the specified device and listener properties. CreateSource Represents an operator that creates a spatialized source on the specified audio device. PauseSource Represents an operator that pauses the specified set of audio sources. PlaySource Represents an operator that starts playing the specified set of audio sources. If a source is already playing, it will start from the beginning. RewindSource Represents an operator that rewinds the specified set of audio sources back to the initial state. RiffWriter Writes audio data into a stream following the RIFF/WAV format. StopSource Represents an operator that stops the specified set of audio sources. UpdateBuffer Represents an operator that updates the sample data of the specified audio buffer. UpdateListener Represents an operator that updates the properties of the audio listener. UpdateSource Represents an operator that updates the properties of an audio source. UpdateSourceState Provides an abstract base class for operators that update the state of specified audio sources."
  },
  "api/Bonsai.Audio.PauseSource.html": {
    "href": "api/Bonsai.Audio.PauseSource.html",
    "title": "Class PauseSource",
    "keywords": "Class PauseSource Represents an operator that pauses the specified set of audio sources. Inheritance Object Combinator Sink UpdateSourceState PauseSource Inherited Members UpdateSourceState.DeviceName UpdateSourceState.SourceName UpdateSourceState.Process<TSource>(IObservable<TSource>) UpdateSourceState.Process(IObservable<AudioSource>) UpdateSourceState.Process(IObservable<AudioSource[]>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class PauseSource : UpdateSourceState"
  },
  "api/Bonsai.Audio.PlaySource.html": {
    "href": "api/Bonsai.Audio.PlaySource.html",
    "title": "Class PlaySource",
    "keywords": "Class PlaySource Represents an operator that starts playing the specified set of audio sources. If a source is already playing, it will start from the beginning. Inheritance Object Combinator Sink UpdateSourceState PlaySource Inherited Members UpdateSourceState.DeviceName UpdateSourceState.SourceName UpdateSourceState.Process<TSource>(IObservable<TSource>) UpdateSourceState.Process(IObservable<AudioSource>) UpdateSourceState.Process(IObservable<AudioSource[]>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class PlaySource : UpdateSourceState"
  },
  "api/Bonsai.Audio.RewindSource.html": {
    "href": "api/Bonsai.Audio.RewindSource.html",
    "title": "Class RewindSource",
    "keywords": "Class RewindSource Represents an operator that rewinds the specified set of audio sources back to the initial state. Inheritance Object Combinator Sink UpdateSourceState RewindSource Inherited Members UpdateSourceState.DeviceName UpdateSourceState.SourceName UpdateSourceState.Process<TSource>(IObservable<TSource>) UpdateSourceState.Process(IObservable<AudioSource>) UpdateSourceState.Process(IObservable<AudioSource[]>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class RewindSource : UpdateSourceState"
  },
  "api/Bonsai.Audio.RiffWriter.html": {
    "href": "api/Bonsai.Audio.RiffWriter.html",
    "title": "Class RiffWriter",
    "keywords": "Class RiffWriter Writes audio data into a stream following the RIFF/WAV format. Inheritance Object RiffWriter Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public sealed class RiffWriter : IDisposable Constructors RiffWriter(Stream, Int32, Int32, Int32) Initializes a new instance of the RiffWriter class using the specified stream, number of channels, sample rate and bits per sample. Declaration public RiffWriter(Stream stream, int channels, int samplesPerSecond, int bitsPerSample) Parameters Type Name Description Stream stream The output stream. Int32 channels The number of audio channels. Int32 samplesPerSecond The playback sample frequency, in samples per second. Int32 bitsPerSample The number of bits per audio sample. Methods Close() Closes the current RiffWriter and the underlying stream. Declaration public void Close() Write(Byte[]) Writes an array containing raw audio data into the WAV stream. Declaration public void Write(byte[] buffer) Parameters Type Name Description Byte [] buffer A Byte array containing the data to write. Explicit Interface Implementations IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements System.IDisposable"
  },
  "api/Bonsai.Audio.StopSource.html": {
    "href": "api/Bonsai.Audio.StopSource.html",
    "title": "Class StopSource",
    "keywords": "Class StopSource Represents an operator that stops the specified set of audio sources. Inheritance Object Combinator Sink UpdateSourceState StopSource Inherited Members UpdateSourceState.DeviceName UpdateSourceState.SourceName UpdateSourceState.Process<TSource>(IObservable<TSource>) UpdateSourceState.Process(IObservable<AudioSource>) UpdateSourceState.Process(IObservable<AudioSource[]>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class StopSource : UpdateSourceState"
  },
  "api/Bonsai.Audio.UpdateBuffer.html": {
    "href": "api/Bonsai.Audio.UpdateBuffer.html",
    "title": "Class UpdateBuffer",
    "keywords": "Class UpdateBuffer Represents an operator that updates the sample data of the specified audio buffer. Inheritance Object Combinator < Mat , Mat > Sink < Mat > UpdateBuffer Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class UpdateBuffer : Sink<Mat> Properties BufferName Gets or sets the name of the buffer to update. Declaration [TypeConverter(typeof(BufferNameConverter))] public string BufferName { get; set; } Property Value Type Description String DeviceName Gets or sets the name of the audio device used for playback. Declaration [TypeConverter(typeof(PlaybackDeviceNameConverter))] public string DeviceName { get; set; } Property Value Type Description String SampleRate Gets or sets the sample rate, in Hz, used to playback the buffer data. Declaration public int SampleRate { get; set; } Property Value Type Description Int32 Methods Process(IObservable<Mat>) Updates the data of the specified audio buffer using an observable sequence of buffered samples. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of Mat objects representing the samples used to fill the buffer with audio data. Returns Type Description IObservable < Mat > An observable sequence that is identical to the source sequence but where there is an additional side effect of filling the buffer with audio data. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>) Remarks This operator only subscribes to the source sequence after initializing the audio context on the specified audio device."
  },
  "api/Bonsai.Audio.UpdateListener.html": {
    "href": "api/Bonsai.Audio.UpdateListener.html",
    "title": "Class UpdateListener",
    "keywords": "Class UpdateListener Represents an operator that updates the properties of the audio listener. Inheritance Object Combinator Sink UpdateListener Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class UpdateListener : Sink Properties Gain Gets or sets the amount of amplification applied to the listener. Each multiplication by 2 increases gain by +6dB. If this property is not set, the gain of the audio listener will not be updated. Declaration public float? Gain { get; set; } Property Value Type Description Nullable < Single > Orientation Gets or sets the current orientation of the listener, in the world coordinate frame. If this property is not set, the orientation of the audio listener will not be updated. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Quaternion? Orientation { get; set; } Property Value Type Description Nullable < Quaternion > Position Gets or sets the current location of the listener, in the world coordinate frame. If this property is not set, the location of the audio listener will not be updated. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3? Position { get; set; } Property Value Type Description Nullable < Vector3 > Velocity Gets or sets the current velocity of the listener, in the world coordinate frame. If this property is not set, the velocity of the audio listener will not be updated. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3? Velocity { get; set; } Property Value Type Description Nullable < Vector3 > Methods Process<TSource>(IObservable<TSource>) Updates the properties of the audio listener whenever the source sequence emits a notification. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used to trigger the update of the audio listener. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the properties of the audio listener whenever the sequence emits a new notification. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Audio.UpdateSource.html": {
    "href": "api/Bonsai.Audio.UpdateSource.html",
    "title": "Class UpdateSource",
    "keywords": "Class UpdateSource Represents an operator that updates the properties of an audio source. Inheritance Object Combinator Sink UpdateSource Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class UpdateSource : Sink Properties DeviceName Gets or sets the name of the audio device used for playback. Declaration [TypeConverter(typeof(PlaybackDeviceNameConverter))] public string DeviceName { get; set; } Property Value Type Description String Direction Gets or sets the current direction vector of the audio source. If this property is not set, the direction of the audio source will not be updated. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3? Direction { get; set; } Property Value Type Description Nullable < Vector3 > Position Gets or sets the current location of the audio source in three-dimensional space. If this property is not set, the location of the audio source will not be updated. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3? Position { get; set; } Property Value Type Description Nullable < Vector3 > SourceName Gets or sets the name of the audio source to update. Declaration [TypeConverter(typeof(SourceNameConverter))] public string SourceName { get; set; } Property Value Type Description String Velocity Gets or sets the current velocity of the audio source in three-dimensional space. If this property is not set, the velocity of the audio source will not be updated. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3? Velocity { get; set; } Property Value Type Description Nullable < Vector3 > Methods Process(IObservable<AudioSource>) Updates the properties of all the audio sources in an observable sequence. Declaration public IObservable<AudioSource> Process(IObservable<AudioSource> source) Parameters Type Name Description IObservable < AudioSource > source A sequence of AudioSource objects whose properties should be updated. Returns Type Description IObservable < AudioSource > An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the properties of each of the audio sources in the sequence. Remarks If SourceName is not null or empty, this method behaves as Process<TSource>(IObservable<TSource>) . Process<TSource>(IObservable<TSource>) Updates the properties of the specified audio source whenever the source sequence emits a notification. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used to trigger the update of the audio source. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the properties of the specified audio source whenever the sequence emits a new notification. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Audio.UpdateSourceState.html": {
    "href": "api/Bonsai.Audio.UpdateSourceState.html",
    "title": "Class UpdateSourceState",
    "keywords": "Class UpdateSourceState Provides an abstract base class for operators that update the state of specified audio sources. Inheritance Object Combinator Sink UpdateSourceState PauseSource PlaySource RewindSource StopSource Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public abstract class UpdateSourceState : Sink Properties DeviceName Gets or sets the name of the audio device used for playback. Declaration [TypeConverter(typeof(PlaybackDeviceNameConverter))] public string DeviceName { get; set; } Property Value Type Description String SourceName Gets or sets the name of the audio source, or a comma-separated list of names if specifying multiple sources. Declaration [TypeConverter(typeof(SourceNameArrayConverter))] public string[] SourceName { get; set; } Property Value Type Description String [] Methods Process(IObservable<AudioSource[]>) Updates the state of all the audio sources in an observable sequence. Declaration public IObservable<AudioSource[]> Process(IObservable<AudioSource[]> source) Parameters Type Name Description IObservable < AudioSource []> source A sequence of AudioSource arrays containing all the audio sources whose state should be updated. Returns Type Description IObservable < AudioSource []> An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the state of all the audio sources. Remarks If SourceName is not null or empty, this method behaves as Process<TSource>(IObservable<TSource>) . Process(IObservable<AudioSource>) Updates the state of all the audio sources in an observable sequence. Declaration public IObservable<AudioSource> Process(IObservable<AudioSource> source) Parameters Type Name Description IObservable < AudioSource > source A sequence of AudioSource objects whose state should be updated. Returns Type Description IObservable < AudioSource > An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the state of each of the audio sources in the sequence. Remarks If SourceName is not null or empty, this method behaves as Process<TSource>(IObservable<TSource>) . Process<TSource>(IObservable<TSource>) Updates the state of the specified audio source whenever the source sequence emits a notification. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used to trigger the update of the audio source. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the state of the specified audio source whenever the sequence emits a new notification. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.BinaryCombinator.html": {
    "href": "api/Bonsai.BinaryCombinator.html",
    "title": "Class BinaryCombinator",
    "keywords": "Class BinaryCombinator Represents a generic operation on two observable sequences where the elements of the first sequence are propagated based on notifications from the second sequence. Inheritance Object BinaryCombinator Gate Sample SkipUntil SubscribeWhen TakeUntil TimedGate Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [Combinator] public abstract class BinaryCombinator Methods Process<TSource, TOther>(IObservable<TSource>, IObservable<TOther>) Processes the source sequence into a new sequence of the same element type based on notifications from the other sequence. Declaration public abstract IObservable<TSource> Process<TSource, TOther>(IObservable<TSource> source, IObservable<TOther> other) Parameters Type Name Description IObservable <TSource> source The source sequence to process. IObservable <TOther> other Observable sequence which controls propagation of the source sequence. Returns Type Description IObservable <TSource> An observable sequence of the same data type as source . Type Parameters Name Description TSource The type of the elements in the first sequence. TOther The type of the elements in the other sequence."
  },
  "api/Bonsai.Combinator.html": {
    "href": "api/Bonsai.Combinator.html",
    "title": "Class Combinator",
    "keywords": "Class Combinator Represents a generic operation on observable sequences that preserves the sequence element type. Inheritance Object Combinator Delay DelaySubscription Distinct DistinctUntilChanged First FirstOrDefault GateInterval IgnoreElements Last LastOrDefault Repeat RepeatCount Retry RetryCount SampleInterval Skip SkipLast Slice Synchronize Take TakeLast Throttle Timeout Sink Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [Combinator] public abstract class Combinator Methods Process<TSource>(IObservable<TSource>) Processes the source sequence into a new sequence of the same element type. Declaration public abstract IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to process. Returns Type Description IObservable <TSource> An observable sequence of the same data type as source . Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Combinator-1.html": {
    "href": "api/Bonsai.Combinator-1.html",
    "title": "Class Combinator<TResult>",
    "keywords": "Class Combinator<TResult> Represents a generic operation on observable sequences that returns another sequence of the specified element type. Inheritance Object Combinator<TResult> Count Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [Combinator] public abstract class Combinator<TResult> Type Parameters Name Description TResult The type of the elements in the result sequence. Methods Process<TSource>(IObservable<TSource>) Processes the source sequence into a new sequence of the specified element type. Declaration public abstract IObservable<TResult> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to process. Returns Type Description IObservable <TResult> An observable sequence with elements of type TResult . Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Combinator-2.html": {
    "href": "api/Bonsai.Combinator-2.html",
    "title": "Class Combinator<TSource, TResult>",
    "keywords": "Class Combinator<TSource, TResult> Represents an operation on observable sequences of a specific element type. Inheritance Object Combinator<TSource, TResult> LoadResources Sink<TSource> Transform<TSource, TResult> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [Combinator] public abstract class Combinator<TSource, TResult> Type Parameters Name Description TSource The type of the elements in the source sequence. TResult The type of the elements in the result sequence. Methods Process(IObservable<TSource>) Processes the source sequence into a new sequence of the specified element type. Declaration public abstract IObservable<TResult> Process(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to process. Returns Type Description IObservable <TResult> An observable sequence with elements of type TResult ."
  },
  "api/Bonsai.CombinatorAttribute.html": {
    "href": "api/Bonsai.CombinatorAttribute.html",
    "title": "Class CombinatorAttribute",
    "keywords": "Class CombinatorAttribute Specifies that a class provides a method that can combine one or more observable sequences into a new observable sequence. Inheritance Object Attribute CombinatorAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class CombinatorAttribute : Attribute, _Attribute Constructors CombinatorAttribute() Initializes a new instance of the CombinatorAttribute class using the default expression builder class. Declaration public CombinatorAttribute() CombinatorAttribute(String) Initializes a new instance of the CombinatorAttribute class using the specified expression builder class. Declaration public CombinatorAttribute(string builderTypeName) Parameters Type Name Description String builderTypeName The fully qualified name of the expression builder class used to build expressions from this combinator. CombinatorAttribute(Type) Initializes a new instance of the CombinatorAttribute class using the specified expression builder class. Declaration public CombinatorAttribute(Type builderType) Parameters Type Name Description Type builderType The Type of the expression builder class used to build expressions from this combinator. Properties ExpressionBuilderTypeName Gets the fully qualified name of the expression builder class used to build expressions from this combinator. Declaration public string ExpressionBuilderTypeName { get; } Property Value Type Description String MethodName Gets or sets the name of the method that can combine one or more observable sequences into a new observable sequence. Declaration public string MethodName { get; set; } Property Value Type Description String Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.Dag.DirectedGraph-2.html": {
    "href": "api/Bonsai.Dag.DirectedGraph-2.html",
    "title": "Class DirectedGraph<TNodeValue, TEdgeLabel>",
    "keywords": "Class DirectedGraph<TNodeValue, TEdgeLabel> Represents a directed graph that consists of labeled nodes and edges. Inheritance Object DirectedGraph<TNodeValue, TEdgeLabel> ExpressionBuilderGraph Implements IEnumerable < Node <TNodeValue, TEdgeLabel>> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dag Assembly : Bonsai.Core.dll Syntax public class DirectedGraph<TNodeValue, TEdgeLabel> : IEnumerable<Node<TNodeValue, TEdgeLabel>>, IEnumerable Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. Constructors DirectedGraph() Initializes a new instance of the Bonsai.Dag.DirectedGraph`2{T,U} class. Declaration public DirectedGraph() DirectedGraph(IComparer<TNodeValue>) Initializes a new instance of the Bonsai.Dag.DirectedGraph`2{T,U} class that uses a specified comparer. Declaration public DirectedGraph(IComparer<TNodeValue> comparer) Parameters Type Name Description IComparer <TNodeValue> comparer The optional comparer to use for ordering node values. Properties Comparer Gets the optional IComparer<T> object used to determine the order of the values in the Bonsai.Dag.DirectedGraph`2{T,U} . Declaration public IComparer<TNodeValue> Comparer { get; } Property Value Type Description IComparer <TNodeValue> Count Gets the number of nodes in the Bonsai.Dag.DirectedGraph`2{T,U} . Declaration public int Count { get; } Property Value Type Description Int32 Methods Add(TNodeValue) Creates and adds a new node with the specified value to the Bonsai.Dag.DirectedGraph`2{T,U} . Declaration public Node<TNodeValue, TEdgeLabel> Add(TNodeValue value) Parameters Type Name Description TNodeValue value The value of the node label. Returns Type Description Node <TNodeValue, TEdgeLabel> A newly created Bonsai.Dag.Node`2{T,U} instance. Add(Node<TNodeValue, TEdgeLabel>) Adds a node to the Bonsai.Dag.DirectedGraph`2{T,U} . Declaration public void Add(Node<TNodeValue, TEdgeLabel> node) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> node The node to be added to the Bonsai.Dag.DirectedGraph`2{T,U} . AddEdge(Node<TNodeValue, TEdgeLabel>, Edge<TNodeValue, TEdgeLabel>) Adds a labeled outgoing edge from the specified node in the Bonsai.Dag.DirectedGraph`2{T,U} . Declaration public void AddEdge(Node<TNodeValue, TEdgeLabel> from, Edge<TNodeValue, TEdgeLabel> edge) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> from The node that is the source of the edge. Edge <TNodeValue, TEdgeLabel> edge The labeled outgoing edge to be added to the Bonsai.Dag.DirectedGraph`2{T,U} . AddEdge(Node<TNodeValue, TEdgeLabel>, Node<TNodeValue, TEdgeLabel>, TEdgeLabel) Creates and adds a new labeled edge linking the specified nodes in the Bonsai.Dag.DirectedGraph`2{T,U} . Declaration public Edge<TNodeValue, TEdgeLabel> AddEdge(Node<TNodeValue, TEdgeLabel> from, Node<TNodeValue, TEdgeLabel> to, TEdgeLabel label) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> from The node that is the source of the edge. Node <TNodeValue, TEdgeLabel> to The node that is the target of the edge. TEdgeLabel label The value of the edge label. Returns Type Description Edge <TNodeValue, TEdgeLabel> A newly created Bonsai.Dag.Edge`2{T,U} instance. Clear() Removes all nodes and corresponding edges from the Bonsai.Dag.DirectedGraph`2{T,U} . Declaration public void Clear() Contains(Node<TNodeValue, TEdgeLabel>) Determines whether a node is in the Bonsai.Dag.DirectedGraph`2{T,U} . Declaration public bool Contains(Node<TNodeValue, TEdgeLabel> node) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> node The node to locate in the Bonsai.Dag.DirectedGraph`2{T,U} . Returns Type Description Boolean true if node is found in the Bonsai.Dag.DirectedGraph`2{T,U} ; otherwise, false . GetEnumerator() Returns an enumerator that iterates through the nodes in the Bonsai.Dag.DirectedGraph`2{T,U} . Declaration public IEnumerator<Node<TNodeValue, TEdgeLabel>> GetEnumerator() Returns Type Description IEnumerator < Node <TNodeValue, TEdgeLabel>> An System.Collections.Generic.IEnumerator`1{T} of Bonsai.Dag.Node`2{T,U} for the directed graph. InsertEdge(Node<TNodeValue, TEdgeLabel>, Int32, Edge<TNodeValue, TEdgeLabel>) Inserts a labeled outgoing edge of a source node at the specified index. Declaration public void InsertEdge(Node<TNodeValue, TEdgeLabel> from, int edgeIndex, Edge<TNodeValue, TEdgeLabel> edge) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> from The node that is the source of the edge. Int32 edgeIndex The zero-based index at which the edge should be inserted on the successor list of the from node. Edge <TNodeValue, TEdgeLabel> edge The labeled outgoing edge that is to be inserted at the specified index on the successor list of the from node. InsertEdge(Node<TNodeValue, TEdgeLabel>, Int32, Node<TNodeValue, TEdgeLabel>, TEdgeLabel) Creates and inserts a labeled outgoing edge of the source node at the specified index. Declaration public Edge<TNodeValue, TEdgeLabel> InsertEdge(Node<TNodeValue, TEdgeLabel> from, int edgeIndex, Node<TNodeValue, TEdgeLabel> to, TEdgeLabel label) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> from The node that is the source of the edge. Int32 edgeIndex The zero-based index at which the edge should be inserted on the successor list of the from node. Node <TNodeValue, TEdgeLabel> to The node that is the target of the edge. TEdgeLabel label The value of the edge label. Returns Type Description Edge <TNodeValue, TEdgeLabel> A newly created Bonsai.Dag.Edge`2{T,U} instance. Remove(Node<TNodeValue, TEdgeLabel>) Removes the specified node from the Bonsai.Dag.DirectedGraph`2{T,U} . Declaration public bool Remove(Node<TNodeValue, TEdgeLabel> node) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> node The node to remove from the Bonsai.Dag.DirectedGraph`2{T,U} . Returns Type Description Boolean true if node is successfully removed; otherwise, false . This method also returns false if node was not found in the Bonsai.Dag.DirectedGraph`2{T,U} . RemoveEdge(Node<TNodeValue, TEdgeLabel>, Edge<TNodeValue, TEdgeLabel>) Removes the specified edge from the Bonsai.Dag.DirectedGraph`2{T,U} . Declaration public bool RemoveEdge(Node<TNodeValue, TEdgeLabel> from, Edge<TNodeValue, TEdgeLabel> edge) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> from The node that is the source of the edge. Edge <TNodeValue, TEdgeLabel> edge The outgoing edge to remove from the Bonsai.Dag.DirectedGraph`2{T,U} . Returns Type Description Boolean true if edge is successfully removed; otherwise, false . This method also returns false if edge was not found in the Bonsai.Dag.DirectedGraph`2{T,U} . SetEdge(Node<TNodeValue, TEdgeLabel>, Int32, Edge<TNodeValue, TEdgeLabel>) Replaces a labeled outgoing edge of a source node at the specified index. Declaration public void SetEdge(Node<TNodeValue, TEdgeLabel> from, int edgeIndex, Edge<TNodeValue, TEdgeLabel> edge) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> from The node that is the source of the edge. Int32 edgeIndex The zero-based index of the edge to replace on the successor list of the from node. Edge <TNodeValue, TEdgeLabel> edge The labeled outgoing edge that is to be set at the specified index on the successor list of the from node. SetEdge(Node<TNodeValue, TEdgeLabel>, Int32, Node<TNodeValue, TEdgeLabel>, TEdgeLabel) Creates and replaces a labeled outgoing edge of the source node at the specified index. Declaration public Edge<TNodeValue, TEdgeLabel> SetEdge(Node<TNodeValue, TEdgeLabel> from, int edgeIndex, Node<TNodeValue, TEdgeLabel> to, TEdgeLabel label) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> from The node that is the source of the edge. Int32 edgeIndex The zero-based index of the edge to replace on the successor list of the from node. Node <TNodeValue, TEdgeLabel> to The node that is the target of the edge. TEdgeLabel label The value of the edge label. Returns Type Description Edge <TNodeValue, TEdgeLabel> A newly created Bonsai.Dag.Edge`2{T,U} instance. Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods DirectedGraphExtensions.Predecessors<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>, Node<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.PredecessorEdges<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>, Node<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.Successors<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>, Node<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.Sources<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.Sinks<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.DepthFirstSearch<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.TopologicalSort<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.Acyclic<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>)"
  },
  "api/Bonsai.Dag.DirectedGraphExtensions.html": {
    "href": "api/Bonsai.Dag.DirectedGraphExtensions.html",
    "title": "Class DirectedGraphExtensions",
    "keywords": "Class DirectedGraphExtensions Provides a set of static methods for searching, sorting and manipulating directed graphs. Inheritance Object DirectedGraphExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dag Assembly : Bonsai.Core.dll Syntax public static class DirectedGraphExtensions Methods Acyclic<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) Determines whether a directed graph is acyclic. Declaration public static bool Acyclic<TNodeValue, TEdgeLabel>(this DirectedGraph<TNodeValue, TEdgeLabel> source) Parameters Type Name Description DirectedGraph <TNodeValue, TEdgeLabel> source The source directed graph to test. Returns Type Description Boolean true if source has no cycles; otherwise, false . Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. DepthFirstSearch<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) Traverses through all the directed graph nodes in depth-first order. Declaration public static IEnumerable<Node<TNodeValue, TEdgeLabel>> DepthFirstSearch<TNodeValue, TEdgeLabel>(this DirectedGraph<TNodeValue, TEdgeLabel> source) Parameters Type Name Description DirectedGraph <TNodeValue, TEdgeLabel> source The source directed graph that will be traversed. Returns Type Description IEnumerable < Node <TNodeValue, TEdgeLabel>> A sequence of Bonsai.Dag.Node`2{T,U} that contains the set of all graph nodes in depth-first order. Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. DepthFirstSearch<TNodeValue, TEdgeLabel>(Node<TNodeValue, TEdgeLabel>) Traverses through all the directed graph nodes in depth-first order, starting from the specified node. Declaration public static IEnumerable<Node<TNodeValue, TEdgeLabel>> DepthFirstSearch<TNodeValue, TEdgeLabel>(this Node<TNodeValue, TEdgeLabel> node) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> node The node from which to start the search. Returns Type Description IEnumerable < Node <TNodeValue, TEdgeLabel>> A sequence of Bonsai.Dag.Node`2{T,U} that contains the set of all nodes reachable from node in depth-first order. Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. PredecessorEdges<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>, Node<TNodeValue, TEdgeLabel>) Returns the sequence of predecessor edges to the specified node. Declaration public static IEnumerable<Tuple<Node<TNodeValue, TEdgeLabel>, Edge<TNodeValue, TEdgeLabel>, int>> PredecessorEdges<TNodeValue, TEdgeLabel>(this DirectedGraph<TNodeValue, TEdgeLabel> source, Node<TNodeValue, TEdgeLabel> node) Parameters Type Name Description DirectedGraph <TNodeValue, TEdgeLabel> source The source directed graph to search for predecessors. Node <TNodeValue, TEdgeLabel> node The node for which to obtain the sequence of predecessors. Returns Type Description IEnumerable < Tuple < Node <TNodeValue, TEdgeLabel>, Edge <TNodeValue, TEdgeLabel>, Int32 >> A sequence of triples containing the predecessor node, the edge linking the predecessor to the specified node and the edge index. Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. Predecessors<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>, Node<TNodeValue, TEdgeLabel>) Returns the sequence of predecessors to the specified node. Declaration public static IEnumerable<Node<TNodeValue, TEdgeLabel>> Predecessors<TNodeValue, TEdgeLabel>(this DirectedGraph<TNodeValue, TEdgeLabel> source, Node<TNodeValue, TEdgeLabel> node) Parameters Type Name Description DirectedGraph <TNodeValue, TEdgeLabel> source The source directed graph to search for predecessors. Node <TNodeValue, TEdgeLabel> node The node for which to obtain the sequence of predecessors. Returns Type Description IEnumerable < Node <TNodeValue, TEdgeLabel>> A sequence of Bonsai.Dag.Node`2{T,U} that contains all the predecessors to the specified node. Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. Sinks<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) Returns the sequence of all the nodes in the directed graph that have zero outgoing edges. Declaration public static IEnumerable<Node<TNodeValue, TEdgeLabel>> Sinks<TNodeValue, TEdgeLabel>(this DirectedGraph<TNodeValue, TEdgeLabel> source) Parameters Type Name Description DirectedGraph <TNodeValue, TEdgeLabel> source The directed graph to search for sinks. Returns Type Description IEnumerable < Node <TNodeValue, TEdgeLabel>> A sequence of Bonsai.Dag.Node`2{T,U} that contains all the nodes in the directed graph that have zero outgoing edges. Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. Sources<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) Returns the sequence of all the nodes in the directed graph that have zero incoming edges. Declaration public static IEnumerable<Node<TNodeValue, TEdgeLabel>> Sources<TNodeValue, TEdgeLabel>(this DirectedGraph<TNodeValue, TEdgeLabel> source) Parameters Type Name Description DirectedGraph <TNodeValue, TEdgeLabel> source The directed graph to search for sources. Returns Type Description IEnumerable < Node <TNodeValue, TEdgeLabel>> A sequence of Bonsai.Dag.Node`2{T,U} that contains all the nodes in the directed graph that have zero incoming edges. Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. Successors<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>, Node<TNodeValue, TEdgeLabel>) Returns the sequence of successors to the specified node. Declaration public static IEnumerable<Node<TNodeValue, TEdgeLabel>> Successors<TNodeValue, TEdgeLabel>(this DirectedGraph<TNodeValue, TEdgeLabel> source, Node<TNodeValue, TEdgeLabel> node) Parameters Type Name Description DirectedGraph <TNodeValue, TEdgeLabel> source The source directed graph to search for successors. Node <TNodeValue, TEdgeLabel> node The node for which to obtain the sequence of successors. Returns Type Description IEnumerable < Node <TNodeValue, TEdgeLabel>> A sequence of Bonsai.Dag.Node`2{T,U} that contains all the successors to the specified node. Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. TopologicalSort<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) Traverses through all the directed graph nodes in such a way as to guarantee that for every node in the sequence, all its predecessors have been visited first. Declaration public static IEnumerable<Node<TNodeValue, TEdgeLabel>> TopologicalSort<TNodeValue, TEdgeLabel>(this DirectedGraph<TNodeValue, TEdgeLabel> source) Parameters Type Name Description DirectedGraph <TNodeValue, TEdgeLabel> source The source directed graph that will be traversed. Returns Type Description IEnumerable < Node <TNodeValue, TEdgeLabel>> A sequence of Bonsai.Dag.Node`2{T,U} that contains the set of all graph nodes in topological sort order. Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges."
  },
  "api/Bonsai.Dag.Edge.html": {
    "href": "api/Bonsai.Dag.Edge.html",
    "title": "Class Edge",
    "keywords": "Class Edge Provides static methods for creating edge objects. Inheritance Object Edge Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dag Assembly : Bonsai.Core.dll Syntax public static class Edge Methods Create<TNodeValue, TEdgeLabel>(Node<TNodeValue, TEdgeLabel>, TEdgeLabel) Creates a new directed graph labeled edge. Declaration public static Edge<TNodeValue, TEdgeLabel> Create<TNodeValue, TEdgeLabel>(Node<TNodeValue, TEdgeLabel> target, TEdgeLabel label) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> target The node instance that is the target of the edge. TEdgeLabel label The value of the edge label. Returns Type Description Edge <TNodeValue, TEdgeLabel> A labeled edge targeting the specified node. Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges."
  },
  "api/Bonsai.Dag.Edge-2.html": {
    "href": "api/Bonsai.Dag.Edge-2.html",
    "title": "Class Edge<TNodeValue, TEdgeLabel>",
    "keywords": "Class Edge<TNodeValue, TEdgeLabel> Represents an outgoing labeled edge in a directed graph. Inheritance Object Edge<TNodeValue, TEdgeLabel> Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dag Assembly : Bonsai.Core.dll Syntax public class Edge<TNodeValue, TEdgeLabel> Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. Constructors Edge(Node<TNodeValue, TEdgeLabel>, TEdgeLabel) Initializes a new instance of the Bonsai.Dag.Edge`2{T,U} class with the specified target node and label . Declaration public Edge(Node<TNodeValue, TEdgeLabel> target, TEdgeLabel label) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> target The Bonsai.Dag.Node`2{T,U} instance that is the target of the edge. TEdgeLabel label The value of the edge label. Properties Label Gets the value of the Bonsai.Dag.Edge`2{T,U} label. Declaration public TEdgeLabel Label { get; } Property Value Type Description TEdgeLabel Target Gets the Bonsai.Dag.Node`2{T,U} instance that is the target of the Bonsai.Dag.Edge`2{T,U} . Declaration public Node<TNodeValue, TEdgeLabel> Target { get; } Property Value Type Description Node <TNodeValue, TEdgeLabel> Methods Equals(Object) Returns a value indicating whether this instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj An object to compare with this instance. Returns Type Description Boolean true if obj is an instance of Edge<TNodeValue, TEdgeLabel> and its index equals the index value of this instance; otherwise, false. Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() ToString() Returns a string that represents this Bonsai.Dag.Edge`2{T,U} instance. Declaration public override string ToString() Returns Type Description String The string representation of this Bonsai.Dag.Edge`2{T,U} object. Overrides Object.ToString()"
  },
  "api/Bonsai.Dag.EdgeCollection-2.html": {
    "href": "api/Bonsai.Dag.EdgeCollection-2.html",
    "title": "Class EdgeCollection<TNodeValue, TEdgeLabel>",
    "keywords": "Class EdgeCollection<TNodeValue, TEdgeLabel> Represents a collection of outgoing labeled edges in a directed graph. Inheritance Object Collection < Edge <TNodeValue, TEdgeLabel>> EdgeCollection<TNodeValue, TEdgeLabel> Implements IList < Edge <TNodeValue, TEdgeLabel>> ICollection < Edge <TNodeValue, TEdgeLabel>> IList ICollection IReadOnlyList < Edge <TNodeValue, TEdgeLabel>> IReadOnlyCollection < Edge <TNodeValue, TEdgeLabel>> IEnumerable < Edge <TNodeValue, TEdgeLabel>> IEnumerable Inherited Members Collection<Edge<TNodeValue, TEdgeLabel>>.Add(Edge<TNodeValue, TEdgeLabel>) Collection<Edge<TNodeValue, TEdgeLabel>>.Clear() Collection<Edge<TNodeValue, TEdgeLabel>>.CopyTo(Edge<TNodeValue, TEdgeLabel>[], Int32) Collection<Edge<TNodeValue, TEdgeLabel>>.Contains(Edge<TNodeValue, TEdgeLabel>) Collection<Edge<TNodeValue, TEdgeLabel>>.GetEnumerator() Collection<Edge<TNodeValue, TEdgeLabel>>.IndexOf(Edge<TNodeValue, TEdgeLabel>) Collection<Edge<TNodeValue, TEdgeLabel>>.Insert(Int32, Edge<TNodeValue, TEdgeLabel>) Collection<Edge<TNodeValue, TEdgeLabel>>.Remove(Edge<TNodeValue, TEdgeLabel>) Collection<Edge<TNodeValue, TEdgeLabel>>.RemoveAt(Int32) Collection<Edge<TNodeValue, TEdgeLabel>>.ClearItems() Collection<Edge<TNodeValue, TEdgeLabel>>.InsertItem(Int32, Edge<TNodeValue, TEdgeLabel>) Collection<Edge<TNodeValue, TEdgeLabel>>.RemoveItem(Int32) Collection<Edge<TNodeValue, TEdgeLabel>>.SetItem(Int32, Edge<TNodeValue, TEdgeLabel>) Collection<Edge<TNodeValue, TEdgeLabel>>.IEnumerable.GetEnumerator() Collection<Edge<TNodeValue, TEdgeLabel>>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Dag.Edge<TNodeValue, TEdgeLabel>>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Dag.Edge<TNodeValue, TEdgeLabel>>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<Edge<TNodeValue, TEdgeLabel>>.IList.Add(Object) Collection<Edge<TNodeValue, TEdgeLabel>>.IList.Contains(Object) Collection<Edge<TNodeValue, TEdgeLabel>>.IList.IndexOf(Object) Collection<Edge<TNodeValue, TEdgeLabel>>.IList.Insert(Int32, Object) Collection<Edge<TNodeValue, TEdgeLabel>>.IList.Remove(Object) Collection<Edge<TNodeValue, TEdgeLabel>>.Count Collection<Edge<TNodeValue, TEdgeLabel>>.Items Collection<Edge<TNodeValue, TEdgeLabel>>.Item[Int32] Collection<Edge<TNodeValue, TEdgeLabel>>.ICollection<Edge<TNodeValue, TEdgeLabel>>.IsReadOnly Collection<Edge<TNodeValue, TEdgeLabel>>.ICollection.IsSynchronized Collection<Edge<TNodeValue, TEdgeLabel>>.ICollection.SyncRoot Collection<Edge<TNodeValue, TEdgeLabel>>.IList.Item[Int32] Collection<Edge<TNodeValue, TEdgeLabel>>.IList.IsReadOnly Collection<Edge<TNodeValue, TEdgeLabel>>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dag Assembly : Bonsai.Core.dll Syntax public class EdgeCollection<TNodeValue, TEdgeLabel> : Collection<Edge<TNodeValue, TEdgeLabel>>, IList<Edge<TNodeValue, TEdgeLabel>>, ICollection<Edge<TNodeValue, TEdgeLabel>>, IList, ICollection, IReadOnlyList<Edge<TNodeValue, TEdgeLabel>>, IReadOnlyCollection<Edge<TNodeValue, TEdgeLabel>>, IEnumerable<Edge<TNodeValue, TEdgeLabel>>, IEnumerable Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Dag.EdgeDescriptor-1.html": {
    "href": "api/Bonsai.Dag.EdgeDescriptor-1.html",
    "title": "Class EdgeDescriptor<TEdgeLabel>",
    "keywords": "Class EdgeDescriptor<TEdgeLabel> Represents a serializable descriptor of an edge connecting two nodes in a directed graph. Inheritance Object EdgeDescriptor<TEdgeLabel> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dag Assembly : Bonsai.Core.dll Syntax public class EdgeDescriptor<TEdgeLabel> Type Parameters Name Description TEdgeLabel The type of the labels associated with graph edges. Constructors EdgeDescriptor() Initializes a new instance of the Bonsai.Dag.EdgeDescriptor`1{T} class. Declaration public EdgeDescriptor() EdgeDescriptor(Int32, Int32, TEdgeLabel) Initializes a new instance of the Bonsai.Dag.EdgeDescriptor`1{T} class with the specified indices for source and target nodes and a label value. Declaration public EdgeDescriptor(int from, int to, TEdgeLabel label) Parameters Type Name Description Int32 from The zero-based index of the node that is the source of the edge. Int32 to The zero-based index of the node that is the target of the edge. TEdgeLabel label The value of the edge label. Properties From Gets or sets the zero-based index of the node that is the source of the edge. Declaration public int From { get; set; } Property Value Type Description Int32 Label Gets or sets the value of the edge label. Declaration public TEdgeLabel Label { get; set; } Property Value Type Description TEdgeLabel To Gets or sets the zero-based index of the node that is the target of the edge. Declaration public int To { get; set; } Property Value Type Description Int32"
  },
  "api/Bonsai.Dag.html": {
    "href": "api/Bonsai.Dag.html",
    "title": "Namespace Bonsai.Dag",
    "keywords": "Namespace Bonsai.Dag Classes DirectedGraph<TNodeValue, TEdgeLabel> Represents a directed graph that consists of labeled nodes and edges. DirectedGraphExtensions Provides a set of static methods for searching, sorting and manipulating directed graphs. Edge Provides static methods for creating edge objects. Edge<TNodeValue, TEdgeLabel> Represents an outgoing labeled edge in a directed graph. EdgeCollection<TNodeValue, TEdgeLabel> Represents a collection of outgoing labeled edges in a directed graph. EdgeDescriptor<TEdgeLabel> Represents a serializable descriptor of an edge connecting two nodes in a directed graph. Node<TNodeValue, TEdgeLabel> Represents a labeled node in a directed graph."
  },
  "api/Bonsai.Dag.Node-2.html": {
    "href": "api/Bonsai.Dag.Node-2.html",
    "title": "Class Node<TNodeValue, TEdgeLabel>",
    "keywords": "Class Node<TNodeValue, TEdgeLabel> Represents a labeled node in a directed graph. Inheritance Object Node<TNodeValue, TEdgeLabel> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dag Assembly : Bonsai.Core.dll Syntax public class Node<TNodeValue, TEdgeLabel> Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. Constructors Node(TNodeValue) Initializes a new instance of the Bonsai.Dag.Node`2{T,U} class with the specified value . Declaration public Node(TNodeValue value) Parameters Type Name Description TNodeValue value The value of the node label. Properties Successors Gets the collection of successor edges leaving this node. Declaration public EdgeCollection<TNodeValue, TEdgeLabel> Successors { get; } Property Value Type Description EdgeCollection <TNodeValue, TEdgeLabel> Value Gets the value of the Bonsai.Dag.Node`2{T,U} label. Declaration public TNodeValue Value { get; } Property Value Type Description TNodeValue Methods ToString() Returns a string that represents the value of this Bonsai.Dag.Node`2{T,U} instance. Declaration public override string ToString() Returns Type Description String The string representation of this Bonsai.Dag.Node`2{T,U} object. Overrides Object.ToString() Extension Methods DirectedGraphExtensions.DepthFirstSearch<TNodeValue, TEdgeLabel>(Node<TNodeValue, TEdgeLabel>)"
  },
  "api/Bonsai.DesignTypes.html": {
    "href": "api/Bonsai.DesignTypes.html",
    "title": "Class DesignTypes",
    "keywords": "Class DesignTypes Provides assembly qualified names for well-known designer types. Inheritance Object DesignTypes Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public static class DesignTypes Fields FolderNameEditor The assembly qualified name of a UI editor that can edit folder name paths using a folder browser dialog. This field is read-only. Declaration public const string FolderNameEditor = \"Bonsai.Design.FolderNameEditor, Bonsai.Design\" Field Value Type Description String MultilineStringEditor The assembly qualified name of a UI editor that can edit multiline string values using a text box. This field is read-only. Declaration public const string MultilineStringEditor = \"System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" Field Value Type Description String NumericUpDownEditor The assembly qualified name of a UI editor that can edit numeric values using a numeric spin box. This field is read-only. Declaration public const string NumericUpDownEditor = \"Bonsai.Design.NumericUpDownEditor, Bonsai.Design\" Field Value Type Description String OpenFileNameEditor The assembly qualified name of a UI editor that can edit file name paths using an open file dialog. This field is read-only. Declaration public const string OpenFileNameEditor = \"Bonsai.Design.OpenFileNameEditor, Bonsai.Design\" Field Value Type Description String SaveFileNameEditor The assembly qualified name of a UI editor that can edit file name paths using a save file dialog. This field is read-only. Declaration public const string SaveFileNameEditor = \"Bonsai.Design.SaveFileNameEditor, Bonsai.Design\" Field Value Type Description String SliderEditor The assembly qualified name of a UI editor that can edit numeric values using a visual slider bar. This field is read-only. Declaration public const string SliderEditor = \"Bonsai.Design.SliderEditor, Bonsai.Design\" Field Value Type Description String UITypeEditor The assembly qualified name of the UI editor base class. This field is read-only. Declaration public const string UITypeEditor = \"System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" Field Value Type Description String"
  },
  "api/Bonsai.ElementCategory.html": {
    "href": "api/Bonsai.ElementCategory.html",
    "title": "Enum ElementCategory",
    "keywords": "Enum ElementCategory Specifies the category of a workflow element. Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public enum ElementCategory Fields Name Description Combinator An operator that can be applied to one or more observable sequences to produce a new observable sequence. Condition A combinator that propagates only the elements of an observable sequence matching some specific condition. Nested A combinator that allows the user to specify its operation in terms of a nested workflow. Property A generator of observable elements that can be used as a named workflow property. Sink A combinator that introduces side effects on an observable sequence without modifying its elements. Source A generator of observable sequences of data elements. Transform A combinator that transforms every element of an observable sequence into a new data element. Workflow A set of operators defining a data processing workflow."
  },
  "api/Bonsai.ExpressionHelper.html": {
    "href": "api/Bonsai.ExpressionHelper.html",
    "title": "Class ExpressionHelper",
    "keywords": "Class ExpressionHelper Provides a set of static methods to manipulate expression trees. Inheritance Object ExpressionHelper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public static class ExpressionHelper Fields ArgumentSeparator Represents the character separating selected members in a member selector expression. Declaration public const string ArgumentSeparator = \",\" Field Value Type Description String ImplicitParameterName Represents the name of the implicit parameter in a member selector expression. Declaration public const string ImplicitParameterName = \"it\" Field Value Type Description String MemberSeparator Represents the character separating class members in a member selector expression. Declaration public const string MemberSeparator = \".\" Field Value Type Description String Methods GetGenericTypeBindings(Type, Type) Returns an array of Type objects that represent the bounded type parameters resulting from matching the specified generic type with a concrete type. Declaration public static Type[] GetGenericTypeBindings(Type genericType, Type type) Parameters Type Name Description Type genericType The generic type definition used to test for bindings. Type type The Type used to bind against genericType . Returns Type Description Type [] The array of Type objects representing the bounded type parameters, or an empty array, in case no compatible bindings are found. IsCollectionType(Type) Tests whether the specified type implements a serialization compatible collection. Declaration public static bool IsCollectionType(Type type) Parameters Type Name Description Type type The Type to test. Returns Type Description Boolean true if the type implements a serialization compatible collection; otherwise, false . IsEnumerableType(Type) Tests whether the specified type implements the generic enumerable interface. Declaration public static bool IsEnumerableType(Type type) Parameters Type Name Description Type type The Type to test. Returns Type Description Boolean true if the type implements the generic enumerable interface; otherwise, false . MemberAccess(Expression, String) Creates an Expression representing a chained access to a member variable. Declaration public static Expression MemberAccess(Expression instance, string memberPath) Parameters Type Name Description Expression instance The object to which the member chain belongs. String memberPath The path to an inner member variable, separated by a dot. Indexed accessors are also allowed. Returns Type Description Expression The created Expression . Parse(Expression, String) Creates an Expression representing the result of parsing a string with the specified pattern. Declaration public static Expression Parse(Expression expression, string pattern) Parameters Type Name Description Expression expression An Expression that represents the string to parse. String pattern The parse pattern to match, including data type format specifiers. If pattern is null , the input string is returned. Returns Type Description Expression An Expression that represents the result of parsing the specified string. Parse(Expression, String, String[]) Creates an Expression representing the result of first splitting a string using separator tokens and then parsing each of the elements against the specified pattern. Declaration public static Expression Parse(Expression expression, string pattern, params string[] separator) Parameters Type Name Description Expression expression An Expression that represents the string to parse. String pattern The parse pattern to match, including data type format specifiers. If pattern is null , each of the resulting element strings is returned unchanged. String [] separator An optional array of delimiters used for splitting the string into individual elements before parsing. If the array is empty, the input string is parsed directly without further processing. Returns Type Description Expression An Expression that represents the result of splitting and parsing the specified string. If a separator array is specified, the resulting expression will be of type Array . SelectMemberNames(String) Extracts the set of member accessor paths from a composite selector string. Declaration public static IEnumerable<string> SelectMemberNames(string selector) Parameters Type Name Description String selector The comma-separated selector string used to extract multiple members. Returns Type Description IEnumerable < String > An enumerator of the set of member accessor paths extracted from the composite selector string. SelectMembers(Expression, String) Returns the set of member selector expressions specified by a composite selector string. Declaration public static IEnumerable<Expression> SelectMembers(Expression expression, string selector) Parameters Type Name Description Expression expression The object to which the members belong. String selector The comma-separated selector string used to extract multiple members. Returns Type Description IEnumerable < Expression > A set of Expression instances representing the member variables accessed by the composite selector string."
  },
  "api/Bonsai.Expressions.AddBuilder.html": {
    "href": "api/Bonsai.Expressions.AddBuilder.html",
    "title": "Class AddBuilder",
    "keywords": "Class AddBuilder Represents an expression builder that applies the arithmetic addition operation on paired elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder AddBuilder Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class AddBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ISerializableElement Methods BuildSelector(Expression, Expression) Returns the expression that applies the arithmetic addition operation to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies the arithmetic addition operation to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.AsyncSubjectBuilder.html": {
    "href": "api/Bonsai.Expressions.AsyncSubjectBuilder.html",
    "title": "Class AsyncSubjectBuilder",
    "keywords": "Class AsyncSubjectBuilder Represents an expression builder that broadcasts the last value of an observable sequence to all subscribed and future observers using a shared subject. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder AsyncSubjectBuilder Implements IExpressionBuilder INamedElement Inherited Members SubjectBuilder.Build(IEnumerable<Expression>) SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class AsyncSubjectBuilder : SubjectBuilder, IExpressionBuilder, INamedElement, IRequireBuildContext Methods BuildSubject(Expression) When overridden in a derived class, returns the expression that creates the shared subject. Declaration protected override Expression BuildSubject(Expression expression) Parameters Type Name Description Expression expression The expression representing the observable input sequence. Returns Type Description Expression The Expression that creates the shared subject. Overrides SubjectBuilder.BuildSubject(Expression) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.AsyncSubjectBuilder-1.html": {
    "href": "api/Bonsai.Expressions.AsyncSubjectBuilder-1.html",
    "title": "Class AsyncSubjectBuilder<T>",
    "keywords": "Class AsyncSubjectBuilder<T> Represents an expression builder that broadcasts the result of the first observable sequence to complete to all subscribed and future observers. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder <T> AsyncSubjectBuilder<T> Implements IExpressionBuilder INamedElement Inherited Members SubjectBuilder<T>.Build(IEnumerable<Expression>) SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class AsyncSubjectBuilder<T> : SubjectBuilder<T>, IExpressionBuilder, INamedElement, IRequireBuildContext Type Parameters Name Description T The type of the result stored by the subject. Methods CreateSubject() Creates a shared subject that broadcasts the result of the first observable sequence to complete to all subscribed and future observers. Declaration protected override ISubject<T> CreateSubject() Returns Type Description ISubject <T> A new instance of . Overrides Bonsai.Expressions.SubjectBuilder<T>.CreateSubject() Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.BehaviorSubjectBuilder.html": {
    "href": "api/Bonsai.Expressions.BehaviorSubjectBuilder.html",
    "title": "Class BehaviorSubjectBuilder",
    "keywords": "Class BehaviorSubjectBuilder Represents an expression builder that broadcasts the latest value of an observable sequence to all subscribed and future observers using a shared subject. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder BehaviorSubjectBuilder Implements IExpressionBuilder INamedElement Inherited Members SubjectBuilder.Build(IEnumerable<Expression>) SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class BehaviorSubjectBuilder : SubjectBuilder, IExpressionBuilder, INamedElement, IRequireBuildContext Methods BuildSubject(Expression) When overridden in a derived class, returns the expression that creates the shared subject. Declaration protected override Expression BuildSubject(Expression expression) Parameters Type Name Description Expression expression The expression representing the observable input sequence. Returns Type Description Expression The Expression that creates the shared subject. Overrides SubjectBuilder.BuildSubject(Expression) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.BehaviorSubjectBuilder-1.html": {
    "href": "api/Bonsai.Expressions.BehaviorSubjectBuilder-1.html",
    "title": "Class BehaviorSubjectBuilder<T>",
    "keywords": "Class BehaviorSubjectBuilder<T> Represents an expression builder that broadcasts the latest value from other observable sequences to all subscribed and future observers. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder <T> BehaviorSubjectBuilder<T> Implements IExpressionBuilder INamedElement Inherited Members SubjectBuilder<T>.Build(IEnumerable<Expression>) SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class BehaviorSubjectBuilder<T> : SubjectBuilder<T>, IExpressionBuilder, INamedElement, IRequireBuildContext Type Parameters Name Description T The type of the elements processed by the subject. Methods CreateSubject() Creates a shared subject that broadcasts the latest value from other observable sequences to all subscribed and future observers. Declaration protected override ISubject<T> CreateSubject() Returns Type Description ISubject <T> A new instance of . Overrides Bonsai.Expressions.SubjectBuilder<T>.CreateSubject() Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.BinaryOperatorBuilder.html": {
    "href": "api/Bonsai.Expressions.BinaryOperatorBuilder.html",
    "title": "Class BinaryOperatorBuilder",
    "keywords": "Class BinaryOperatorBuilder Provides a base class for expression builders that define a simple binary operator on paired elements of an observable sequence. This is an abstract class. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder AddBuilder BitwiseAndBuilder BitwiseOrBuilder DivideBuilder EqualBuilder GetValueOrDefaultBuilder GreaterThanBuilder GreaterThanOrEqualBuilder IndexBuilder LessThanBuilder LessThanOrEqualBuilder LogicalAndBuilder LogicalOrBuilder ModBuilder MultiplyBuilder NotEqualBuilder SubtractBuilder XorBuilder Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public abstract class BinaryOperatorBuilder : SelectBuilder, IPropertyMappingBuilder, IExpressionBuilder, ISerializableElement Properties Operand Gets or sets the value of the right hand operand which will be paired with elements of the observable sequence in case the sequence itself is not composed of paired elements. Declaration [Browsable(false)] public WorkflowProperty Operand { get; set; } Property Value Type Description WorkflowProperty Methods BuildSelector(Expression) Returns the expression that maps the specified input parameter to the selector result. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that maps the input parameter to the selector result. Overrides SelectBuilder.BuildSelector(Expression) BuildSelector(Expression, Expression) When overridden in a derived class, returns the expression that applies a binary operator to the left and right parameters. Declaration protected abstract Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies the binary operator to the left and right parameters. Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.BitwiseAndBuilder.html": {
    "href": "api/Bonsai.Expressions.BitwiseAndBuilder.html",
    "title": "Class BitwiseAndBuilder",
    "keywords": "Class BitwiseAndBuilder Represents an expression builder that applies a bitwise AND operation on paired elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder BitwiseAndBuilder Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class BitwiseAndBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ISerializableElement Methods BuildSelector(Expression, Expression) Returns the expression that applies a bitwise AND operation to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies a bitwise AND operation to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.BitwiseNotBuilder.html": {
    "href": "api/Bonsai.Expressions.BitwiseNotBuilder.html",
    "title": "Class BitwiseNotBuilder",
    "keywords": "Class BitwiseNotBuilder Represents an expression builder that applies a bitwise complement operation on elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BitwiseNotBuilder Implements IExpressionBuilder Inherited Members SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class BitwiseNotBuilder : SelectBuilder, IExpressionBuilder Methods BuildSelector(Expression) Returns the expression that applies a bitwise complement operation on the specified input parameter to the selector result. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that applies a bitwise complement operation on the input parameter to the selector result. Overrides SelectBuilder.BuildSelector(Expression) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.BitwiseOrBuilder.html": {
    "href": "api/Bonsai.Expressions.BitwiseOrBuilder.html",
    "title": "Class BitwiseOrBuilder",
    "keywords": "Class BitwiseOrBuilder Represents an expression builder that applies a bitwise OR operation on paired elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder BitwiseOrBuilder Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class BitwiseOrBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ISerializableElement Methods BuildSelector(Expression, Expression) Returns the expression that applies a bitwise OR operation to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies a bitwise OR operation to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.BooleanProperty.html": {
    "href": "api/Bonsai.Expressions.BooleanProperty.html",
    "title": "Class BooleanProperty",
    "keywords": "Class BooleanProperty Represents a workflow property containing a Boolean value. Inheritance Object WorkflowProperty WorkflowProperty < Boolean > BooleanProperty Inherited Members WorkflowProperty<Boolean>.Value WorkflowProperty<Boolean>.Generate() WorkflowProperty<Boolean>.Generate<TSource>(IObservable<TSource>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class BooleanProperty : WorkflowProperty<bool>"
  },
  "api/Bonsai.Expressions.ByteProperty.html": {
    "href": "api/Bonsai.Expressions.ByteProperty.html",
    "title": "Class ByteProperty",
    "keywords": "Class ByteProperty Represents a workflow property containing an 8-bit unsigned integer. Inheritance Object WorkflowProperty ByteProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class ByteProperty : WorkflowProperty Properties Value Gets or sets the value of the property. Declaration [Range(0, 255)] public byte Value { get; set; } Property Value Type Description Byte Methods Generate() Generates an observable sequence that produces a value whenever the workflow property changes, starting with the initial property value. Declaration public virtual IObservable<byte> Generate() Returns Type Description IObservable < Byte > An observable sequence of property values. Generate<TSource>(IObservable<TSource>) Generates an observable sequence that produces a value whenever the source sequence emits a new element. Declaration public IObservable<byte> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence used to generate new values. Returns Type Description IObservable < Byte > An observable sequence of property values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Expressions.CombinatorBuilder.html": {
    "href": "api/Bonsai.Expressions.CombinatorBuilder.html",
    "title": "Class CombinatorBuilder",
    "keywords": "Class CombinatorBuilder Represents an expression builder which uses a specified combinator instance to process one or more input observable sequences. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder CombinatorExpressionBuilder CombinatorBuilder Implements IPropertyMappingBuilder IExpressionBuilder INamedElement Inherited Members VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class CombinatorBuilder : CombinatorExpressionBuilder, IPropertyMappingBuilder, IExpressionBuilder, INamedElement Constructors CombinatorBuilder() Initializes a new instance of the CombinatorBuilder class. Declaration public CombinatorBuilder() Properties Combinator Gets or sets the combinator instance used to process input observable sequences. Declaration public object Combinator { get; set; } Property Value Type Description Object Name Gets the display name of the combinator. Declaration public string Name { get; } Property Value Type Description String Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides CombinatorExpressionBuilder.Build(IEnumerable<Expression>) BuildCombinator(IEnumerable<Expression>) Generates an Expression node that will be combined with any existing property mappings to produce the final output of the expression builder. Declaration protected override Expression BuildCombinator(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node that represents the combinator output. Overrides CombinatorExpressionBuilder.BuildCombinator(IEnumerable<Expression>) Implements IPropertyMappingBuilder IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.CombinatorExpressionBuilder.html": {
    "href": "api/Bonsai.Expressions.CombinatorExpressionBuilder.html",
    "title": "Class CombinatorExpressionBuilder",
    "keywords": "Class CombinatorExpressionBuilder Provides a base class for expression builders that will generate combinator outputs that can be combined with dynamic property mappings. This is an abstract class. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder CombinatorExpressionBuilder CombinatorBuilder CsvReader CsvWriter Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public abstract class CombinatorExpressionBuilder : VariableArgumentExpressionBuilder, IPropertyMappingBuilder, IExpressionBuilder Constructors CombinatorExpressionBuilder(Int32, Int32) Initializes a new instance of the CombinatorExpressionBuilder class with the specified argument range. Declaration protected CombinatorExpressionBuilder(int minArguments, int maxArguments) Parameters Type Name Description Int32 minArguments The inclusive lower bound of the argument range. Int32 maxArguments The inclusive upper bound of the argument range. Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) BuildCombinator(IEnumerable<Expression>) When overridden in a derived class, generates an Expression node that will be combined with any existing property mappings to produce the final output of the expression builder. Declaration protected abstract Expression BuildCombinator(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node that represents the combinator output. Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.ConditionBuilder.html": {
    "href": "api/Bonsai.Expressions.ConditionBuilder.html",
    "title": "Class ConditionBuilder",
    "keywords": "Class ConditionBuilder Represents an expression builder which filters the elements of an observable sequence according to a condition specified by the encapsulated workflow. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder SingleArgumentWorkflowExpressionBuilder ConditionBuilder SkipWhileBuilder TakeWhileBuilder Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members SingleArgumentWorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Condition)] public class ConditionBuilder : SingleArgumentWorkflowExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder, IRequireBuildContext Constructors ConditionBuilder() Initializes a new instance of the ConditionBuilder class. Declaration public ConditionBuilder() ConditionBuilder(ExpressionBuilderGraph) Initializes a new instance of the ConditionBuilder class with the specified expression builder workflow. Declaration public ConditionBuilder(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.CreateAsyncBuilder.html": {
    "href": "api/Bonsai.Expressions.CreateAsyncBuilder.html",
    "title": "Class CreateAsyncBuilder",
    "keywords": "Class CreateAsyncBuilder Represents an expression builder that creates a single value observable sequence from the result of the encapsulated workflow. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder CreateAsyncBuilder Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Source)] public class CreateAsyncBuilder : WorkflowExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder, IRequireBuildContext Constructors CreateAsyncBuilder() Initializes a new instance of the CreateAsyncBuilder class. Declaration public CreateAsyncBuilder() CreateAsyncBuilder(ExpressionBuilderGraph) Initializes a new instance of the CreateAsyncBuilder class with the specified expression builder workflow. Declaration public CreateAsyncBuilder(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Properties ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides WorkflowExpressionBuilder.ArgumentRange Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.CreateObservableBuilder.html": {
    "href": "api/Bonsai.Expressions.CreateObservableBuilder.html",
    "title": "Class CreateObservableBuilder",
    "keywords": "Class CreateObservableBuilder Represents an expression builder that creates higher-order observable sequences using the encapsulated workflow. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder CreateObservableBuilder Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class CreateObservableBuilder : WorkflowExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder, IRequireBuildContext Constructors CreateObservableBuilder() Initializes a new instance of the CreateObservableBuilder class. Declaration public CreateObservableBuilder() CreateObservableBuilder(ExpressionBuilderGraph) Initializes a new instance of the CreateObservableBuilder class with the specified expression builder workflow. Declaration public CreateObservableBuilder(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Properties ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides WorkflowExpressionBuilder.ArgumentRange Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.DateTimeOffsetProperty.html": {
    "href": "api/Bonsai.Expressions.DateTimeOffsetProperty.html",
    "title": "Class DateTimeOffsetProperty",
    "keywords": "Class DateTimeOffsetProperty Represents a workflow property containing a timestamp in Coordinated Universal Time (UTC). Inheritance Object WorkflowProperty DateTimeOffsetProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class DateTimeOffsetProperty : WorkflowProperty Properties Value Gets or sets the value of the property. Declaration public DateTimeOffset Value { get; set; } Property Value Type Description DateTimeOffset ValueXml Gets or sets an XML representation of the property value for serialization. Declaration [Browsable(false)] public string ValueXml { get; set; } Property Value Type Description String Methods Generate() Generates an observable sequence that produces a value whenever the workflow property changes, starting with the initial property value. Declaration public virtual IObservable<DateTimeOffset> Generate() Returns Type Description IObservable < DateTimeOffset > An observable sequence of property values. Generate<TSource>(IObservable<TSource>) Generates an observable sequence that produces a value whenever the source sequence emits a new element. Declaration public IObservable<DateTimeOffset> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence used to generate new values. Returns Type Description IObservable < DateTimeOffset > An observable sequence of property values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Expressions.DateTimeProperty.html": {
    "href": "api/Bonsai.Expressions.DateTimeProperty.html",
    "title": "Class DateTimeProperty",
    "keywords": "Class DateTimeProperty Represents a workflow property containing a date and time of day. Inheritance Object WorkflowProperty WorkflowProperty < DateTime > DateTimeProperty Inherited Members WorkflowProperty<DateTime>.Value WorkflowProperty<DateTime>.Generate() WorkflowProperty<DateTime>.Generate<TSource>(IObservable<TSource>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class DateTimeProperty : WorkflowProperty<DateTime>"
  },
  "api/Bonsai.Expressions.DeferBuilder.html": {
    "href": "api/Bonsai.Expressions.DeferBuilder.html",
    "title": "Class DeferBuilder",
    "keywords": "Class DeferBuilder Represents an expression builder that creates a new observable sequence for each subscription using the encapsulated workflow. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder DeferBuilder Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Source)] public class DeferBuilder : WorkflowExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder, IRequireBuildContext Constructors DeferBuilder() Initializes a new instance of the DeferBuilder class. Declaration public DeferBuilder() DeferBuilder(ExpressionBuilderGraph) Initializes a new instance of the DeferBuilder class with the specified expression builder workflow. Declaration public DeferBuilder(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Properties ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides WorkflowExpressionBuilder.ArgumentRange Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.DisableBuilder.html": {
    "href": "api/Bonsai.Expressions.DisableBuilder.html",
    "title": "Class DisableBuilder",
    "keywords": "Class DisableBuilder Represents an expression builder that disables the generation of expression tree nodes from its decorated builder. Inheritance Object ExpressionBuilder DisableBuilder Implements IExpressionBuilder INamedElement Inherited Members ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class DisableBuilder : ExpressionBuilder, IExpressionBuilder, INamedElement Constructors DisableBuilder() Initializes a new instance of the DisableBuilder class. Declaration public DisableBuilder() DisableBuilder(ExpressionBuilder) Initializes a new instance of the DisableBuilder class with the specified expression builder. Declaration public DisableBuilder(ExpressionBuilder builder) Parameters Type Name Description ExpressionBuilder builder The expression builder instance to be disabled. Properties ArgumentRange Gets the range of input arguments that the decorated expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides ExpressionBuilder.ArgumentRange Builder Gets or sets the expression builder to be disabled by this decorator. Declaration public ExpressionBuilder Builder { get; set; } Property Value Type Description ExpressionBuilder Name Gets the display name of the decorated expression builder. Declaration public string Name { get; } Property Value Type Description String Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.DivideBuilder.html": {
    "href": "api/Bonsai.Expressions.DivideBuilder.html",
    "title": "Class DivideBuilder",
    "keywords": "Class DivideBuilder Represents an expression builder that applies the arithmetic division operation on paired elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder DivideBuilder Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class DivideBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ISerializableElement Methods BuildSelector(Expression, Expression) Returns the expression that applies the arithmetic division operation to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies the arithmetic division operation to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.DoubleProperty.html": {
    "href": "api/Bonsai.Expressions.DoubleProperty.html",
    "title": "Class DoubleProperty",
    "keywords": "Class DoubleProperty Represents a workflow property containing a double-precision floating-point number. Inheritance Object WorkflowProperty DoubleProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class DoubleProperty : WorkflowProperty Properties Value Gets or sets the value of the property. Declaration [Range(0, 1)] public double Value { get; set; } Property Value Type Description Double Methods Generate() Generates an observable sequence that produces a value whenever the workflow property changes, starting with the initial property value. Declaration public virtual IObservable<double> Generate() Returns Type Description IObservable < Double > An observable sequence of property values. Generate<TSource>(IObservable<TSource>) Generates an observable sequence that produces a value whenever the source sequence emits a new element. Declaration public IObservable<double> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence used to generate new values. Returns Type Description IObservable < Double > An observable sequence of property values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Expressions.EqualBuilder.html": {
    "href": "api/Bonsai.Expressions.EqualBuilder.html",
    "title": "Class EqualBuilder",
    "keywords": "Class EqualBuilder Represents an expression builder that applies an equality comparison on paired elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder EqualBuilder Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class EqualBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ISerializableElement Methods BuildSelector(Expression, Expression) Returns the expression that applies an equality comparison to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies an equality comparison to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.ExpressionBuilder.html": {
    "href": "api/Bonsai.Expressions.ExpressionBuilder.html",
    "title": "Class ExpressionBuilder",
    "keywords": "Class ExpressionBuilder Provides the base class from which the classes that generate expression tree nodes are derived. This is an abstract class. Inheritance Object ExpressionBuilder DisableBuilder ExternalizedProperty InspectBuilder PropertySource SingleArgumentExpressionBuilder UnitBuilder UnknownTypeBuilder VariableArgumentExpressionBuilder WorkflowExpressionBuilder ZeroArgumentExpressionBuilder Implements IExpressionBuilder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [TypeConverter(\"Bonsai.Design.ExpressionBuilderTypeConverter, Bonsai.Design\")] public abstract class ExpressionBuilder : IExpressionBuilder Constructors ExpressionBuilder() Initializes a new instance of the ExpressionBuilder class. Declaration protected ExpressionBuilder() Properties ArgumentRange When overridden in a derived class, gets the range of input arguments that this expression builder accepts. Declaration [Browsable(false)] public abstract Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Methods Build(IEnumerable<Expression>) When overridden in a derived class, generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public abstract Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. FromWorkflowElement(Object, ElementCategory) Creates a new expression builder from the specified editor browsable element and category. Declaration public static ExpressionBuilder FromWorkflowElement(object element, ElementCategory elementCategory) Parameters Type Name Description Object element The editor browsable element for which to build a new expression builder. ElementCategory elementCategory The workflow category of the specified element. Returns Type Description ExpressionBuilder A new ExpressionBuilder object. GetElementDisplayName(Object) Gets the display name for the specified element. Declaration public static string GetElementDisplayName(object element) Parameters Type Name Description Object element The element for which to retrieve the display name. Returns Type Description String The name of the element. GetElementDisplayName(Type) Gets the display name for the specified type. Declaration public static string GetElementDisplayName(Type type) Parameters Type Name Description Type type The Type for which to retrieve the display name. Returns Type Description String The display name for the specified type . GetVisualizerElement(ExpressionBuilder) Returns the InspectBuilder instance that should be used to visualize the specified workflow element. Declaration public static InspectBuilder GetVisualizerElement(ExpressionBuilder builder) Parameters Type Name Description ExpressionBuilder builder The ExpressionBuilder for which to retrieve the visualizer element. Returns Type Description InspectBuilder The InspectBuilder instance that should be used to visualize the specified workflow element. GetWorkflowElement(ExpressionBuilder) Returns the editor browsable element for the specified ExpressionBuilder . Declaration public static object GetWorkflowElement(ExpressionBuilder builder) Parameters Type Name Description ExpressionBuilder builder The ExpressionBuilder for which to retrieve the editor browsable element. Returns Type Description Object An Object that is the editor browsable element for the specified builder . ToString() Returns a string that represents the display name of this ExpressionBuilder instance. Declaration public override string ToString() Returns Type Description String The string representation of this ExpressionBuilder object. Overrides Object.ToString() Unwrap(ExpressionBuilder) Removes all decorators from a specified ExpressionBuilder instance and returns the first non-decorated (i.e. primitive) builder to be retrieved. Declaration public static ExpressionBuilder Unwrap(ExpressionBuilder builder) Parameters Type Name Description ExpressionBuilder builder An ExpressionBuilder instance from which to remove decorators. Returns Type Description ExpressionBuilder The first non-decorated ExpressionBuilder instance that is retrieved. Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.ExpressionBuilderArgument.html": {
    "href": "api/Bonsai.Expressions.ExpressionBuilderArgument.html",
    "title": "Class ExpressionBuilderArgument",
    "keywords": "Class ExpressionBuilderArgument Represents a workflow argument assignment. This class determines the index of a workflow connection and is used to specify the order of input connections to any given node. Inheritance Object ExpressionBuilderArgument Implements IEquatable < ExpressionBuilderArgument > IComparable < ExpressionBuilderArgument > IComparable Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [TypeConverter(\"Bonsai.Design.ExpressionBuilderArgumentTypeConverter, Bonsai.Design\")] public class ExpressionBuilderArgument : IEquatable<ExpressionBuilderArgument>, IComparable<ExpressionBuilderArgument>, IComparable Constructors ExpressionBuilderArgument() Initializes a new instance of the ExpressionBuilderArgument class. Declaration public ExpressionBuilderArgument() ExpressionBuilderArgument(Int32) Initializes a new instance of the ExpressionBuilderArgument class with the specified argument index. Declaration public ExpressionBuilderArgument(int index) Parameters Type Name Description Int32 index The zero-based index of the input argument. ExpressionBuilderArgument(String) Initializes a new instance of the ExpressionBuilderArgument class with the specified argument name. Declaration public ExpressionBuilderArgument(string name) Parameters Type Name Description String name The name of the input argument. Arbitrary named arguments are not supported, so all names must start with the ArgumentNamePrefix followed by the one-based argument index. Fields ArgumentNamePrefix The prefix that starts every input argument name. Declaration public const string ArgumentNamePrefix = \"Source\" Field Value Type Description String Properties Index Gets or sets the zero-based index of the input argument. Declaration public int Index { get; set; } Property Value Type Description Int32 Name Gets or sets the name of the input argument. Arbitrary named arguments are not supported, so all names must start with the ArgumentNamePrefix followed by the one-based argument index. Declaration public string Name { get; set; } Property Value Type Description String Methods CompareTo(ExpressionBuilderArgument) Compares the current object with another object of the same type. Declaration public int CompareTo(ExpressionBuilderArgument other) Parameters Type Name Description ExpressionBuilderArgument other An object to compare with this object. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. Less than zero means this object is less than the other parameter. Zero means this object is equal to other . Greater than zero means this object is greater than other . Equals(ExpressionBuilderArgument) Declaration public bool Equals(ExpressionBuilderArgument other) Parameters Type Name Description ExpressionBuilderArgument other Returns Type Description Boolean Equals(Object) Returns a value indicating whether this instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj An object to compare with this instance. Returns Type Description Boolean true if obj is an instance of ExpressionBuilderArgument and its index equals the index value of this instance; otherwise, false. Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Equality(ExpressionBuilderArgument, ExpressionBuilderArgument) Tests whether two ExpressionBuilderArgument instances are equal. Declaration public static bool operator ==(ExpressionBuilderArgument left, ExpressionBuilderArgument right) Parameters Type Name Description ExpressionBuilderArgument left The ExpressionBuilderArgument instance on the left of the equality operator. ExpressionBuilderArgument right The ExpressionBuilderArgument instance on the right of the equality operator. Returns Type Description Boolean true if left and right have equal index; otherwise, false . GreaterThan(ExpressionBuilderArgument, ExpressionBuilderArgument) Tests whether an ExpressionBuilderArgument object is greater than another object of the same type. Declaration public static bool operator>(ExpressionBuilderArgument left, ExpressionBuilderArgument right) Parameters Type Name Description ExpressionBuilderArgument left The ExpressionBuilderArgument object on the left of the greater than operator. ExpressionBuilderArgument right The ExpressionBuilderArgument object on the right of the greater than operator. Returns Type Description Boolean true if left has an index greater than right ; otherwise, false . Inequality(ExpressionBuilderArgument, ExpressionBuilderArgument) Tests whether two ExpressionBuilderArgument instances are different. Declaration public static bool operator !=(ExpressionBuilderArgument left, ExpressionBuilderArgument right) Parameters Type Name Description ExpressionBuilderArgument left The ExpressionBuilderArgument instance on the left of the inequality operator. ExpressionBuilderArgument right The ExpressionBuilderArgument instance on the right of the inequality operator. Returns Type Description Boolean true if left and right differ in index; false if left and right are equal. LessThan(ExpressionBuilderArgument, ExpressionBuilderArgument) Tests whether an ExpressionBuilderArgument object is less than another object of the same type. Declaration public static bool operator <(ExpressionBuilderArgument left, ExpressionBuilderArgument right) Parameters Type Name Description ExpressionBuilderArgument left The ExpressionBuilderArgument object on the left of the less than operator. ExpressionBuilderArgument right The ExpressionBuilderArgument object on the right of the less than operator. Returns Type Description Boolean true if left has an index smaller than right ; otherwise, false . Explicit Interface Implementations IComparable.CompareTo(Object) Declaration int IComparable.CompareTo(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Implements System.IEquatable<T> System.IComparable<T> System.IComparable"
  },
  "api/Bonsai.Expressions.ExpressionBuilderArgumentDescriptor.html": {
    "href": "api/Bonsai.Expressions.ExpressionBuilderArgumentDescriptor.html",
    "title": "Class ExpressionBuilderArgumentDescriptor",
    "keywords": "Class ExpressionBuilderArgumentDescriptor Represents a serializable descriptor of an edge connecting two nodes in an expression builder graph. Inheritance Object ExpressionBuilderArgumentDescriptor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class ExpressionBuilderArgumentDescriptor Constructors ExpressionBuilderArgumentDescriptor() Initializes a new instance of the ExpressionBuilderArgumentDescriptor class. Declaration public ExpressionBuilderArgumentDescriptor() ExpressionBuilderArgumentDescriptor(Int32, Int32, String) Initializes a new instance of the ExpressionBuilderArgumentDescriptor class with the specified indices for source and target nodes and a label value. Declaration public ExpressionBuilderArgumentDescriptor(int from, int to, string label) Parameters Type Name Description Int32 from The zero-based index of the node that is the source of the edge. Int32 to The zero-based index of the node that is the target of the edge. String label The value of the edge label. Properties From Gets or sets the zero-based index of the node that is the source of the edge. Declaration public int From { get; set; } Property Value Type Description Int32 Label Gets or sets the value of the edge label. Declaration public string Label { get; set; } Property Value Type Description String To Gets or sets the zero-based index of the node that is the target of the edge. Declaration public int To { get; set; } Property Value Type Description Int32"
  },
  "api/Bonsai.Expressions.ExpressionBuilderGraph.html": {
    "href": "api/Bonsai.Expressions.ExpressionBuilderGraph.html",
    "title": "Class ExpressionBuilderGraph",
    "keywords": "Class ExpressionBuilderGraph Represents a directed acyclic graph of expression generator nodes. Edges between generator nodes represent input assignments that chain the output of one generator to the input of the next. The order of the inputs is determined by the indices of the input arguments. Inheritance Object DirectedGraph < ExpressionBuilder , ExpressionBuilderArgument > ExpressionBuilderGraph Implements IEnumerable < Node < ExpressionBuilder , ExpressionBuilderArgument >> IEnumerable Inherited Members DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.Comparer DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.Count DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.Add(ExpressionBuilder) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.Add(Node<ExpressionBuilder, ExpressionBuilderArgument>) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.AddEdge(Node<ExpressionBuilder, ExpressionBuilderArgument>, Node<ExpressionBuilder, ExpressionBuilderArgument>, ExpressionBuilderArgument) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.AddEdge(Node<ExpressionBuilder, ExpressionBuilderArgument>, Edge<ExpressionBuilder, ExpressionBuilderArgument>) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.InsertEdge(Node<ExpressionBuilder, ExpressionBuilderArgument>, Int32, Node<ExpressionBuilder, ExpressionBuilderArgument>, ExpressionBuilderArgument) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.InsertEdge(Node<ExpressionBuilder, ExpressionBuilderArgument>, Int32, Edge<ExpressionBuilder, ExpressionBuilderArgument>) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.SetEdge(Node<ExpressionBuilder, ExpressionBuilderArgument>, Int32, Node<ExpressionBuilder, ExpressionBuilderArgument>, ExpressionBuilderArgument) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.SetEdge(Node<ExpressionBuilder, ExpressionBuilderArgument>, Int32, Edge<ExpressionBuilder, ExpressionBuilderArgument>) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.Contains(Node<ExpressionBuilder, ExpressionBuilderArgument>) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.Remove(Node<ExpressionBuilder, ExpressionBuilderArgument>) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.RemoveEdge(Node<ExpressionBuilder, ExpressionBuilderArgument>, Edge<ExpressionBuilder, ExpressionBuilderArgument>) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.Clear() DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.GetEnumerator() DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.IEnumerable.GetEnumerator() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class ExpressionBuilderGraph : DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>, IEnumerable<Node<ExpressionBuilder, ExpressionBuilderArgument>>, IEnumerable Constructors ExpressionBuilderGraph() Initializes a new instance of the ExpressionBuilderGraph class. Declaration public ExpressionBuilderGraph() Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods DirectedGraphExtensions.Predecessors<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>, Node<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.PredecessorEdges<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>, Node<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.Successors<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>, Node<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.Sources<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.Sinks<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.DepthFirstSearch<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.TopologicalSort<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.Acyclic<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) ExpressionBuilderGraphExtensions.SetWorkflowProperty(ExpressionBuilderGraph, String, Object) ExpressionBuilderGraphExtensions.InspectErrorsEx(ExpressionBuilderGraph) ExpressionBuilderGraphExtensions.Build(ExpressionBuilderGraph) ExpressionBuilderGraphExtensions.Build(ExpressionBuilderGraph, ExpressionBuilder) ExpressionBuilderGraphExtensions.Build(ExpressionBuilderGraph, Expression[]) ExpressionBuilderGraphExtensions.Build(ExpressionBuilderGraph, IEnumerable<Expression>) ExpressionBuilderGraphExtensions.Build(ExpressionBuilderGraph, ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.Build(ExpressionBuilderGraph, ExpressionBuilder, IEnumerable<Expression>) ExpressionBuilderGraphExtensions.BuildObservable(ExpressionBuilderGraph) ExpressionBuilderGraphExtensions.Convert(IEnumerable<Node<ExpressionBuilder, ExpressionBuilderArgument>>, Func<ExpressionBuilder, ExpressionBuilder>) ExpressionBuilderGraphExtensions.Convert(IEnumerable<Node<ExpressionBuilder, ExpressionBuilderArgument>>, Func<ExpressionBuilder, ExpressionBuilder>, Boolean) ExpressionBuilderGraphExtensions.ToInspectableGraph(ExpressionBuilderGraph) ExpressionBuilderGraphExtensions.ToInspectableGraph(ExpressionBuilderGraph, Boolean) ExpressionBuilderGraphExtensions.FromInspectableGraph(ExpressionBuilderGraph) ExpressionBuilderGraphExtensions.FromInspectableGraph(IEnumerable<Node<ExpressionBuilder, ExpressionBuilderArgument>>, Boolean) ExpressionBuilderGraphExtensions.ToDescriptor(ExpressionBuilderGraph) ExpressionBuilderGraphExtensions.AddDescriptor(ExpressionBuilderGraph, ExpressionBuilderGraphDescriptor) ExpressionBuilderGraphExtensions.Elements(ExpressionBuilderGraph) ExpressionBuilderGraphExtensions.Descendants(ExpressionBuilderGraph)"
  },
  "api/Bonsai.Expressions.ExpressionBuilderGraphDescriptor.html": {
    "href": "api/Bonsai.Expressions.ExpressionBuilderGraphDescriptor.html",
    "title": "Class ExpressionBuilderGraphDescriptor",
    "keywords": "Class ExpressionBuilderGraphDescriptor Represents a serializable descriptor of the nodes and edges in an expression builder graph. Inheritance Object ExpressionBuilderGraphDescriptor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class ExpressionBuilderGraphDescriptor Properties Edges Gets a collection of descriptors corresponding to each edge in the expression builder graph. Declaration public Collection<ExpressionBuilderArgumentDescriptor> Edges { get; } Property Value Type Description Collection < ExpressionBuilderArgumentDescriptor > Nodes Gets the collection of labels associated with each node in the expression builder graph. Declaration public Collection<ExpressionBuilder> Nodes { get; } Property Value Type Description Collection < ExpressionBuilder >"
  },
  "api/Bonsai.Expressions.ExpressionBuilderGraphExtensions.html": {
    "href": "api/Bonsai.Expressions.ExpressionBuilderGraphExtensions.html",
    "title": "Class ExpressionBuilderGraphExtensions",
    "keywords": "Class ExpressionBuilderGraphExtensions Provides a set of static methods for serializing, building and otherwise manipulating expression builder workflows. Inheritance Object ExpressionBuilderGraphExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public static class ExpressionBuilderGraphExtensions Methods AddDescriptor(ExpressionBuilderGraph, ExpressionBuilderGraphDescriptor) Adds the contents of the specified graph descriptor to the ExpressionBuilderGraph . Declaration public static void AddDescriptor(this ExpressionBuilderGraph source, ExpressionBuilderGraphDescriptor descriptor) Parameters Type Name Description ExpressionBuilderGraph source The directed graph on which to add the contents of descriptor . ExpressionBuilderGraphDescriptor descriptor The serializable descriptor whose contents should be added to the ExpressionBuilderGraph . AsInspectBuilder(ExpressionBuilder) Decorates the specified expression builder with an InspectBuilder instance allowing for runtime inspection and error redirection. Declaration public static InspectBuilder AsInspectBuilder(this ExpressionBuilder builder) Parameters Type Name Description ExpressionBuilder builder The expression builder instance to decorate. Returns Type Description InspectBuilder An InspectBuilder instance decorating the specified expression builder. Build(ExpressionBuilder, Expression[]) Generates an Expression node from a collection of zero or more input arguments. The result can be chained with other builders in a workflow. Declaration public static Expression Build(this ExpressionBuilder builder, params Expression[] arguments) Parameters Type Name Description ExpressionBuilder builder The expression builder. Expression [] arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Build(ExpressionBuilderGraph) Generates an expression tree from the specified expression builder workflow. Declaration public static Expression Build(this ExpressionBuilderGraph source) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow for which to generate the expression tree. Returns Type Description Expression An Expression tree representing the evaluation of the full expression builder workflow. Build(ExpressionBuilderGraph, ExpressionBuilder) Generates an expression tree from the specified expression builder workflow evaluated up to the specified build target. Declaration public static Expression Build(this ExpressionBuilderGraph source, ExpressionBuilder buildTarget) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow for which to generate the expression tree. ExpressionBuilder buildTarget The expression builder node up to which the workflow will be evaluated. Returns Type Description Expression An Expression tree representing the evaluation of the expression builder workflow up to the specified buildTarget . Build(ExpressionBuilderGraph, ExpressionBuilder, IEnumerable<Expression>) Generates an expression tree from the specified expression builder workflow and a sequence of build arguments, evaluated up to the specified build target. Declaration public static Expression Build(this ExpressionBuilderGraph source, ExpressionBuilder buildTarget, IEnumerable<Expression> buildArguments) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow for which to generate the expression tree. ExpressionBuilder buildTarget The expression builder node up to which the workflow will be evaluated. IEnumerable < Expression > buildArguments The sequence of Expression objects to be assigned as workflow input arguments in the context of generating the expression tree. Returns Type Description Expression An Expression tree representing the evaluation of the expression builder workflow up to the specified buildTarget . Build(ExpressionBuilderGraph, ExpressionBuilder, Expression[]) Generates an expression tree from the specified expression builder workflow and array of build arguments, evaluated up to the specified build target. Declaration public static Expression Build(this ExpressionBuilderGraph source, ExpressionBuilder buildTarget, params Expression[] buildArguments) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow for which to generate the expression tree. ExpressionBuilder buildTarget The expression builder node up to which the workflow will be evaluated. Expression [] buildArguments The array of Expression objects to be assigned as workflow input arguments in the context of generating the expression tree. Returns Type Description Expression An Expression tree representing the evaluation of the expression builder workflow up to the specified buildTarget . Build(ExpressionBuilderGraph, IEnumerable<Expression>) Generates an expression tree from the specified expression builder workflow and a sequence of build arguments. Declaration public static Expression Build(this ExpressionBuilderGraph source, IEnumerable<Expression> buildArguments) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow for which to generate the expression tree. IEnumerable < Expression > buildArguments The sequence of Expression objects to be assigned as workflow input arguments in the context of generating the expression tree. Returns Type Description Expression An Expression tree representing the evaluation of the full expression builder workflow. Build(ExpressionBuilderGraph, Expression[]) Generates an expression tree from the specified expression builder workflow and array of build arguments. Declaration public static Expression Build(this ExpressionBuilderGraph source, params Expression[] buildArguments) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow for which to generate the expression tree. Expression [] buildArguments The array of Expression objects to be assigned as workflow input arguments in the context of generating the expression tree. Returns Type Description Expression An Expression tree representing the evaluation of the full expression builder workflow. BuildObservable(ExpressionBuilderGraph) Builds and compiles an expression builder workflow into an observable that can be subscribed for its side-effects. Declaration public static IObservable<Unit> BuildObservable(this ExpressionBuilderGraph source) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow to compile. Returns Type Description IObservable < Unit > An observable sequence with no elements except for termination messages. Convert(IEnumerable<Node<ExpressionBuilder, ExpressionBuilderArgument>>, Func<ExpressionBuilder, ExpressionBuilder>) Converts the specified expression builder workflow into an equivalent representation where each node has been replaced by its projection as specified by a selector function. Declaration public static ExpressionBuilderGraph Convert(this IEnumerable<Node<ExpressionBuilder, ExpressionBuilderArgument>> source, Func<ExpressionBuilder, ExpressionBuilder> selector) Parameters Type Name Description IEnumerable < Node < ExpressionBuilder , ExpressionBuilderArgument >> source The expression builder workflow to convert. Func < ExpressionBuilder , ExpressionBuilder > selector A transform function to apply to each node. Returns Type Description ExpressionBuilderGraph A new expression builder workflow where all nodes have been replaced by their projections as specified by the selector function. Convert(IEnumerable<Node<ExpressionBuilder, ExpressionBuilderArgument>>, Func<ExpressionBuilder, ExpressionBuilder>, Boolean) Converts the specified expression builder workflow into an equivalent representation where each node has been replaced by its projection as specified by a selector function. Declaration public static ExpressionBuilderGraph Convert(this IEnumerable<Node<ExpressionBuilder, ExpressionBuilderArgument>> source, Func<ExpressionBuilder, ExpressionBuilder> selector, bool recurse) Parameters Type Name Description IEnumerable < Node < ExpressionBuilder , ExpressionBuilderArgument >> source The expression builder workflow to convert. Func < ExpressionBuilder , ExpressionBuilder > selector A transform function to apply to each node. Boolean recurse A value indicating whether to recurse the conversion into nested workflows. Returns Type Description ExpressionBuilderGraph A new expression builder workflow where all nodes have been replaced by their projections as specified by the selector function. Descendants(ExpressionBuilderGraph) Returns a filtered collection of the descendant elements for this workflow, including elements nested inside grouped workflows. Any descendants of disabled groups will not be included in the result. Declaration public static IEnumerable<ExpressionBuilder> Descendants(this ExpressionBuilderGraph source) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow to search. Returns Type Description IEnumerable < ExpressionBuilder > An enumerable sequence of all the descendant elements in this workflow. Elements(ExpressionBuilderGraph) Returns a filtered collection of the child elements for this workflow. Declaration public static IEnumerable<ExpressionBuilder> Elements(this ExpressionBuilderGraph source) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow to search. Returns Type Description IEnumerable < ExpressionBuilder > An enumerable sequence of all the elements in this workflow. FromInspectableGraph(ExpressionBuilderGraph) Converts the specified expression builder workflow into an equivalent representation where all the InspectBuilder nodes have been replaced by their decorated children. Declaration public static ExpressionBuilderGraph FromInspectableGraph(this ExpressionBuilderGraph source) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow to convert. Returns Type Description ExpressionBuilderGraph A new expression builder workflow where all InspectBuilder nodes have been replaced by their decorated children. FromInspectableGraph(IEnumerable<Node<ExpressionBuilder, ExpressionBuilderArgument>>, Boolean) Converts the specified expression builder workflow into an equivalent representation where all the InspectBuilder nodes have been replaced by their decorated children. Declaration public static ExpressionBuilderGraph FromInspectableGraph(this IEnumerable<Node<ExpressionBuilder, ExpressionBuilderArgument>> source, bool recurse) Parameters Type Name Description IEnumerable < Node < ExpressionBuilder , ExpressionBuilderArgument >> source The expression builder workflow to convert. Boolean recurse A value indicating whether to recurse the conversion into nested workflows. Returns Type Description ExpressionBuilderGraph A new expression builder workflow where all InspectBuilder nodes have been replaced by their decorated children. InspectErrorsEx(ExpressionBuilderGraph) Redirects any build or execution errors signaled by InspectBuilder nodes in the specified expression builder workflow into a single observable sequence. Declaration public static IObservable<Exception> InspectErrorsEx(this ExpressionBuilderGraph source) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow for which to redirect errors. Returns Type Description IObservable < Exception > An observable sequence where all elements are errors raised by InspectBuilder nodes. IsBuildDependency(ExpressionBuilder) Determines whether the specified ExpressionBuilder represents a build dependency. Declaration public static bool IsBuildDependency(this ExpressionBuilder builder) Parameters Type Name Description ExpressionBuilder builder The ExpressionBuilder to test. Returns Type Description Boolean true if the specified ExpressionBuilder represents a build dependency; otherwise, false. SetWorkflowProperty(ExpressionBuilderGraph, String, Object) Sets the value of a workflow property to a different value. Declaration public static void SetWorkflowProperty(this ExpressionBuilderGraph source, string name, object value) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow for which to set the property. String name The name of the workflow property. Object value The new value. ToDescriptor(ExpressionBuilderGraph) Converts an expression builder workflow into its serializable representation. Declaration public static ExpressionBuilderGraphDescriptor ToDescriptor(this ExpressionBuilderGraph source) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow to convert. Returns Type Description ExpressionBuilderGraphDescriptor The serializable descriptor of the specified expression builder workflow. ToInspectableGraph(ExpressionBuilderGraph) Converts the specified expression builder workflow into an equivalent representation where all the nodes are decorated by InspectBuilder instances that allow for runtime inspection and error redirection of workflow values. Declaration public static ExpressionBuilderGraph ToInspectableGraph(this ExpressionBuilderGraph source) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow to convert. Returns Type Description ExpressionBuilderGraph A new expression builder workflow where all nodes have been decorated by InspectBuilder instances. ToInspectableGraph(ExpressionBuilderGraph, Boolean) Converts the specified expression builder workflow into an equivalent representation where all the nodes are decorated by InspectBuilder instances that allow for runtime inspection and error redirection of workflow values. Declaration public static ExpressionBuilderGraph ToInspectableGraph(this ExpressionBuilderGraph source, bool recurse) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow to convert. Boolean recurse Returns Type Description ExpressionBuilderGraph A value indicating whether to recurse the conversion into nested workflows. A new expression builder workflow where all nodes have been decorated by InspectBuilder instances."
  },
  "api/Bonsai.Expressions.ExternalizedMapping.html": {
    "href": "api/Bonsai.Expressions.ExternalizedMapping.html",
    "title": "Class ExternalizedMapping",
    "keywords": "Class ExternalizedMapping Represents an externalized property of a workflow element. Inheritance Object ExternalizedMapping Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public sealed class ExternalizedMapping Properties Category Gets or sets an optional category for the externalized property. Declaration public string Category { get; set; } Property Value Type Description String Description Gets or sets an optional description for the externalized property. Declaration public string Description { get; set; } Property Value Type Description String DisplayName Gets or sets an optional display name of the externalized property. Declaration public string DisplayName { get; set; } Property Value Type Description String Name Gets or sets the member name of the externalized property. Declaration [TypeConverter(typeof(ExternalizedMappingNameConverter))] public string Name { get; set; } Property Value Type Description String"
  },
  "api/Bonsai.Expressions.ExternalizedMappingBuilder.html": {
    "href": "api/Bonsai.Expressions.ExternalizedMappingBuilder.html",
    "title": "Class ExternalizedMappingBuilder",
    "keywords": "Class ExternalizedMappingBuilder Specifies a set of properties to be externalized from a workflow element. Inheritance Object ExpressionBuilder ZeroArgumentExpressionBuilder ExternalizedMappingBuilder Implements IExpressionBuilder INamedElement Inherited Members ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Property)] public class ExternalizedMappingBuilder : ZeroArgumentExpressionBuilder, IExpressionBuilder, INamedElement, IArgumentBuilder, IExternalizedMappingBuilder Properties ExternalizedProperties Gets the collection of properties to be externalized from the workflow element. Declaration [Externalizable(false)] public ExternalizedMappingCollection ExternalizedProperties { get; } Property Value Type Description ExternalizedMappingCollection Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Explicit Interface Implementations INamedElement.Name Declaration string INamedElement.Name { get; } Returns Type Description String Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.ExternalizedMappingCollection.html": {
    "href": "api/Bonsai.Expressions.ExternalizedMappingCollection.html",
    "title": "Class ExternalizedMappingCollection",
    "keywords": "Class ExternalizedMappingCollection Represents a collection of externalized property mappings. Inheritance Object Collection < ExternalizedMapping > KeyedCollection < String , ExternalizedMapping > ExternalizedMappingCollection Implements IList < ExternalizedMapping > ICollection < ExternalizedMapping > IList ICollection IReadOnlyList < ExternalizedMapping > IReadOnlyCollection < ExternalizedMapping > IEnumerable < ExternalizedMapping > IEnumerable Inherited Members KeyedCollection<String, ExternalizedMapping>.Contains(String) KeyedCollection<String, ExternalizedMapping>.Remove(String) KeyedCollection<String, ExternalizedMapping>.ChangeItemKey(ExternalizedMapping, String) KeyedCollection<String, ExternalizedMapping>.ClearItems() KeyedCollection<String, ExternalizedMapping>.GetKeyForItem(ExternalizedMapping) KeyedCollection<String, ExternalizedMapping>.InsertItem(Int32, ExternalizedMapping) KeyedCollection<String, ExternalizedMapping>.RemoveItem(Int32) KeyedCollection<String, ExternalizedMapping>.SetItem(Int32, ExternalizedMapping) KeyedCollection<String, ExternalizedMapping>.Comparer KeyedCollection<String, ExternalizedMapping>.Item[String] KeyedCollection<String, ExternalizedMapping>.Dictionary Collection<ExternalizedMapping>.Add(ExternalizedMapping) Collection<ExternalizedMapping>.Clear() Collection<ExternalizedMapping>.CopyTo(ExternalizedMapping[], Int32) Collection<ExternalizedMapping>.Contains(ExternalizedMapping) Collection<ExternalizedMapping>.GetEnumerator() Collection<ExternalizedMapping>.IndexOf(ExternalizedMapping) Collection<ExternalizedMapping>.Insert(Int32, ExternalizedMapping) Collection<ExternalizedMapping>.Remove(ExternalizedMapping) Collection<ExternalizedMapping>.RemoveAt(Int32) Collection<ExternalizedMapping>.ClearItems() Collection<ExternalizedMapping>.InsertItem(Int32, ExternalizedMapping) Collection<ExternalizedMapping>.RemoveItem(Int32) Collection<ExternalizedMapping>.SetItem(Int32, ExternalizedMapping) Collection<ExternalizedMapping>.IEnumerable.GetEnumerator() Collection<ExternalizedMapping>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Expressions.ExternalizedMapping>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Expressions.ExternalizedMapping>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<ExternalizedMapping>.IList.Add(Object) Collection<ExternalizedMapping>.IList.Contains(Object) Collection<ExternalizedMapping>.IList.IndexOf(Object) Collection<ExternalizedMapping>.IList.Insert(Int32, Object) Collection<ExternalizedMapping>.IList.Remove(Object) Collection<ExternalizedMapping>.Count Collection<ExternalizedMapping>.Items Collection<ExternalizedMapping>.Item[Int32] Collection<ExternalizedMapping>.ICollection<ExternalizedMapping>.IsReadOnly Collection<ExternalizedMapping>.ICollection.IsSynchronized Collection<ExternalizedMapping>.ICollection.SyncRoot Collection<ExternalizedMapping>.IList.Item[Int32] Collection<ExternalizedMapping>.IList.IsReadOnly Collection<ExternalizedMapping>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class ExternalizedMappingCollection : KeyedCollection<string, ExternalizedMapping>, IList<ExternalizedMapping>, ICollection<ExternalizedMapping>, IList, ICollection, IReadOnlyList<ExternalizedMapping>, IReadOnlyCollection<ExternalizedMapping>, IEnumerable<ExternalizedMapping>, IEnumerable Methods GetKeyForItem(ExternalizedMapping) Extracts the key from the specified externalized property. Declaration protected override string GetKeyForItem(ExternalizedMapping item) Parameters Type Name Description ExternalizedMapping item The externalized property from which to extract the key. Returns Type Description String The key for the specified externalized property. The current key is the name of the externalized property. Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Bonsai.Expressions.ExternalizedMapping>.GetKeyForItem(Bonsai.Expressions.ExternalizedMapping) Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Expressions.ExternalizedProperty.html": {
    "href": "api/Bonsai.Expressions.ExternalizedProperty.html",
    "title": "Class ExternalizedProperty",
    "keywords": "Class ExternalizedProperty Represents a property that has been externalized from a workflow element. Inheritance Object ExpressionBuilder ExternalizedProperty Implements IExpressionBuilder INamedElement Inherited Members ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Property)] public class ExternalizedProperty : ExpressionBuilder, IExpressionBuilder, INamedElement, IArgumentBuilder, IExternalizedMappingBuilder Constructors ExternalizedProperty() Initializes a new instance of the ExternalizedProperty class. Declaration public ExternalizedProperty() Properties ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides ExpressionBuilder.ArgumentRange Category Gets or sets an optional category for the externalized property. Declaration [Externalizable(false)] public string Category { get; set; } Property Value Type Description String Description Gets or sets an optional description for the externalized property. Declaration [Externalizable(false)] public string Description { get; set; } Property Value Type Description String MemberName Gets or sets the name of the externalized class member. Declaration [Browsable(false)] public string MemberName { get; set; } Property Value Type Description String Name Gets or sets the name of the externalized property. Declaration [Externalizable(false)] public string Name { get; set; } Property Value Type Description String Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Explicit Interface Implementations INamedElement.Name Declaration string INamedElement.Name { get; } Returns Type Description String Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.FloatProperty.html": {
    "href": "api/Bonsai.Expressions.FloatProperty.html",
    "title": "Class FloatProperty",
    "keywords": "Class FloatProperty Represents a workflow property containing a single-precision floating-point number. Inheritance Object WorkflowProperty FloatProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class FloatProperty : WorkflowProperty Properties Value Gets or sets the value of the property. Declaration [Range(0, 1)] public float Value { get; set; } Property Value Type Description Single Methods Generate() Generates an observable sequence that produces a value whenever the workflow property changes, starting with the initial property value. Declaration public virtual IObservable<float> Generate() Returns Type Description IObservable < Single > An observable sequence of property values. Generate<TSource>(IObservable<TSource>) Generates an observable sequence that produces a value whenever the source sequence emits a new element. Declaration public IObservable<float> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence used to generate new values. Returns Type Description IObservable < Single > An observable sequence of property values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Expressions.FormatBuilder.html": {
    "href": "api/Bonsai.Expressions.FormatBuilder.html",
    "title": "Class FormatBuilder",
    "keywords": "Class FormatBuilder Represents an expression builder that applies a string formatting operation on elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder FormatBuilder Implements IExpressionBuilder Inherited Members SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class FormatBuilder : SelectBuilder, IExpressionBuilder Properties Format Gets or sets the composite format string used to specify the output representation. Declaration public string Format { get; set; } Property Value Type Description String Selector Gets or sets a string used to specify the properties that will be included in the output representation. Declaration public string Selector { get; set; } Property Value Type Description String Methods BuildSelector(Expression) Returns the expression that applies a string formatting operation on the specified input parameter to the selector result. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that applies a string formatting operation on the input parameter to the selector result. Overrides SelectBuilder.BuildSelector(Expression) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.GetValueOrDefaultBuilder.html": {
    "href": "api/Bonsai.Expressions.GetValueOrDefaultBuilder.html",
    "title": "Class GetValueOrDefaultBuilder",
    "keywords": "Class GetValueOrDefaultBuilder Represents an expression builder that retrieves the value of each nullable element in the sequence, or the specified default value. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder GetValueOrDefaultBuilder Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members BinaryOperatorBuilder.Operand SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class GetValueOrDefaultBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ISerializableElement Methods BuildSelector(Expression) Returns the expression that maps the specified input parameter to the selector result. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that maps the input parameter to the selector result. Overrides BinaryOperatorBuilder.BuildSelector(Expression) BuildSelector(Expression, Expression) Returns the expression that retrieves the value of the left parameter, or the default value specified by the right parameter. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that retrieves the value of the left parameter, or the default value specified by the right parameter. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.GreaterThanBuilder.html": {
    "href": "api/Bonsai.Expressions.GreaterThanBuilder.html",
    "title": "Class GreaterThanBuilder",
    "keywords": "Class GreaterThanBuilder Represents an expression builder that applies a \"greater than\" numeric comparison on paired elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder GreaterThanBuilder Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class GreaterThanBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ISerializableElement Methods BuildSelector(Expression, Expression) Returns the expression that applies a \"greater than\" numeric comparison to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies a \"greater than\" numeric comparison to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.GreaterThanOrEqualBuilder.html": {
    "href": "api/Bonsai.Expressions.GreaterThanOrEqualBuilder.html",
    "title": "Class GreaterThanOrEqualBuilder",
    "keywords": "Class GreaterThanOrEqualBuilder Represents an expression builder that applies a \"greater than or equal\" numeric comparison on paired elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder GreaterThanOrEqualBuilder Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class GreaterThanOrEqualBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ISerializableElement Methods BuildSelector(Expression, Expression) Returns the expression that applies a \"greater than or equal\" numeric comparison to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies a \"greater than or equal\" numeric comparison to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.GroupWorkflowBuilder.html": {
    "href": "api/Bonsai.Expressions.GroupWorkflowBuilder.html",
    "title": "Class GroupWorkflowBuilder",
    "keywords": "Class GroupWorkflowBuilder Represents an expression builder that encapsulates complex expression builder logic into a single workflow element. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder GroupWorkflowBuilder Implements INamedElement IPropertyMappingBuilder IWorkflowExpressionBuilder IExpressionBuilder Inherited Members WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Workflow)] public class GroupWorkflowBuilder : WorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IGroupWorkflowBuilder, IWorkflowExpressionBuilder, IExpressionBuilder, IRequireBuildContext Constructors GroupWorkflowBuilder() Initializes a new instance of the GroupWorkflowBuilder class. Declaration public GroupWorkflowBuilder() GroupWorkflowBuilder(ExpressionBuilderGraph) Initializes a new instance of the GroupWorkflowBuilder class with the specified expression builder workflow. Declaration public GroupWorkflowBuilder(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements INamedElement IPropertyMappingBuilder IWorkflowExpressionBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.html": {
    "href": "api/Bonsai.Expressions.html",
    "title": "Namespace Bonsai.Expressions",
    "keywords": "Namespace Bonsai.Expressions Classes AddBuilder Represents an expression builder that applies the arithmetic addition operation on paired elements of an observable sequence. AsyncSubjectBuilder Represents an expression builder that broadcasts the last value of an observable sequence to all subscribed and future observers using a shared subject. AsyncSubjectBuilder<T> Represents an expression builder that broadcasts the result of the first observable sequence to complete to all subscribed and future observers. BehaviorSubjectBuilder Represents an expression builder that broadcasts the latest value of an observable sequence to all subscribed and future observers using a shared subject. BehaviorSubjectBuilder<T> Represents an expression builder that broadcasts the latest value from other observable sequences to all subscribed and future observers. BinaryOperatorBuilder Provides a base class for expression builders that define a simple binary operator on paired elements of an observable sequence. This is an abstract class. BitwiseAndBuilder Represents an expression builder that applies a bitwise AND operation on paired elements of an observable sequence. BitwiseNotBuilder Represents an expression builder that applies a bitwise complement operation on elements of an observable sequence. BitwiseOrBuilder Represents an expression builder that applies a bitwise OR operation on paired elements of an observable sequence. BooleanProperty Represents a workflow property containing a Boolean value. ByteProperty Represents a workflow property containing an 8-bit unsigned integer. CombinatorBuilder Represents an expression builder which uses a specified combinator instance to process one or more input observable sequences. CombinatorExpressionBuilder Provides a base class for expression builders that will generate combinator outputs that can be combined with dynamic property mappings. This is an abstract class. ConditionBuilder Represents an expression builder which filters the elements of an observable sequence according to a condition specified by the encapsulated workflow. CreateAsyncBuilder Represents an expression builder that creates a single value observable sequence from the result of the encapsulated workflow. CreateObservableBuilder Represents an expression builder that creates higher-order observable sequences using the encapsulated workflow. DateTimeOffsetProperty Represents a workflow property containing a timestamp in Coordinated Universal Time (UTC). DateTimeProperty Represents a workflow property containing a date and time of day. DeferBuilder Represents an expression builder that creates a new observable sequence for each subscription using the encapsulated workflow. DisableBuilder Represents an expression builder that disables the generation of expression tree nodes from its decorated builder. DivideBuilder Represents an expression builder that applies the arithmetic division operation on paired elements of an observable sequence. DoubleProperty Represents a workflow property containing a double-precision floating-point number. EqualBuilder Represents an expression builder that applies an equality comparison on paired elements of an observable sequence. ExpressionBuilder Provides the base class from which the classes that generate expression tree nodes are derived. This is an abstract class. ExpressionBuilderArgument Represents a workflow argument assignment. This class determines the index of a workflow connection and is used to specify the order of input connections to any given node. ExpressionBuilderArgumentDescriptor Represents a serializable descriptor of an edge connecting two nodes in an expression builder graph. ExpressionBuilderGraph Represents a directed acyclic graph of expression generator nodes. Edges between generator nodes represent input assignments that chain the output of one generator to the input of the next. The order of the inputs is determined by the indices of the input arguments. ExpressionBuilderGraphDescriptor Represents a serializable descriptor of the nodes and edges in an expression builder graph. ExpressionBuilderGraphExtensions Provides a set of static methods for serializing, building and otherwise manipulating expression builder workflows. ExternalizedMapping Represents an externalized property of a workflow element. ExternalizedMappingBuilder Specifies a set of properties to be externalized from a workflow element. ExternalizedMappingCollection Represents a collection of externalized property mappings. ExternalizedProperty Represents a property that has been externalized from a workflow element. FloatProperty Represents a workflow property containing a single-precision floating-point number. FormatBuilder Represents an expression builder that applies a string formatting operation on elements of an observable sequence. GetValueOrDefaultBuilder Represents an expression builder that retrieves the value of each nullable element in the sequence, or the specified default value. GreaterThanBuilder Represents an expression builder that applies a \"greater than\" numeric comparison on paired elements of an observable sequence. GreaterThanOrEqualBuilder Represents an expression builder that applies a \"greater than or equal\" numeric comparison on paired elements of an observable sequence. GroupWorkflowBuilder Represents an expression builder that encapsulates complex expression builder logic into a single workflow element. IncludeWorkflowBuilder Represents an expression builder that uses an encapsulated workflow stored externally to generate its output. IndexBuilder Represents an expression builder that applies an index operator to the elements of an observable sequence. InputMappingBuilder Represents an expression builder that selects inner properties of elements of the sequence and assigns their values to properties of a workflow element. InspectBuilder Represents an expression builder that replays the latest notification from all the subscriptions made to its decorated builder. Int64Property Represents a workflow property containing a 64-bit signed integer. IntProperty Represents a workflow property containing a 32-bit signed integer. LeftShiftBuilder Represents an expression builder that applies a bitwise left-shift operation on elements of an observable sequence. LessThanBuilder Represents an expression builder that applies a \"less than\" numeric comparison on paired elements of an observable sequence. LessThanOrEqualBuilder Represents an expression builder that applies a \"less than or equal\" numeric comparison on paired elements of an observable sequence. LogicalAndBuilder Represents an expression builder that applies a conditional AND operation on paired elements of an observable sequence. LogicalOrBuilder Represents an expression builder that applies a conditional OR operation on paired elements of an observable sequence. MemberSelectorBuilder Represents an expression builder that defines a simple selector on the elements of an observable sequence by mapping specified member values into the output data type. ModBuilder Represents an expression builder that applies the arithmetic remainder operation on paired elements of an observable sequence. MulticastBuilder Provides a base class for expression builders that handle sharing of sequences between multiple branches of an expression builder workflow by means of an observable query. This is an abstract class. MulticastSubjectBuilder Represents an expression builder that pushes a sequence of values into a shared subject. MultiplyBuilder Represents an expression builder that applies the arithmetic multiplication operation on paired elements of an observable sequence. NegateBuilder Represents an expression builder that applies an arithmetic negation operation on elements of an observable sequence. NestedWorkflowBuilder Represents an expression builder that generates an expression tree using a nested expression builder workflow. NotEqualBuilder Represents an expression builder that applies an inequality comparison on paired elements of an observable sequence. ParseBuilder Represents an expression builder that applies a pattern matching operation on elements of an observable sequence. PropertyMapping Represents a dynamic assignment between a selected input source and a property of a workflow element. PropertyMappingBuilder Represents an expression builder that assigns values of an observable sequence to properties of a workflow element. PropertyMappingCollection Represents a collection of dynamic property mappings. PropertySource Represents a data source compatible with the specified workflow element property. PropertySource<TElement, TValue> Represents a data source compatible with the specified workflow element property. PublishBuilder Represents an expression builder that shares a single subscription to an observable sequence across the encapsulated workflow. PublishSubjectBuilder Represents an expression builder that broadcasts the values of an observable sequence to multiple subscribers using a shared subject. PublishSubjectBuilder<T> Represents an expression builder that broadcasts the values from other observable sequences to multiple subscribers. ReplayBuilder Represents an expression builder that handles sharing of an observable sequence across the encapsulated workflow by eagerly replaying notifications. ReplaySubjectBuilder Represents an expression builder that replays the values of an observable sequence to all subscribed and future observers using a shared subject. ReplaySubjectBuilder<T> Represents an expression builder that replays the values of other observable sequences to all subscribed and future observers. ResourceSubjectBuilder Represents an expression builder that stores and broadcasts the last disposable value of an observable sequence to all subscribed and future observers. The value is disposed when the containing context is closed. ResourceSubjectBuilder<T> Represents an expression builder that stores and broadcasts the last disposable value of an observable sequence to all subscribed and future observers. The value is disposed when the containing context is closed. RightShiftBuilder Represents an expression builder that applies a bitwise right-shift operation on elements of an observable sequence. ScanBuilder Represents an expression builder which accumulates the values of an observable sequence using the encapsulated workflow. SelectBuilder Provides a base class for expression builders that define a simple selector on the elements of an observable sequence. This is an abstract class. SelectManyBuilder Represents an expression builder that merges higher-order observable sequences generated from the encapsulated workflow. SingleArgumentExpressionBuilder Provides a base class for expression builders that require a single input argument. This is an abstract class. SingleArgumentWorkflowExpressionBuilder Provides a base class for workflow expression builders that require a single input argument. This is an abstract class. SinkBuilder Represents an expression builder that adds the side effects specified by the encapsulated workflow to an observable sequence without modifying its elements. SkipWhileBuilder Represents an expression builder which bypasses elements in an observable sequence as long as the condition specified by the encapsulated workflow is true. StringProperty Represents a workflow property containing Unicode text. SubjectBuilder Provides a base class for expression builders that broadcast the values of an observable sequence to multiple subscribers using a shared subject. This is an abstract class. SubjectBuilder<T> Provides a base class for expression builders that declare a shared subject of the specified type. This is an abstract class. SubjectExpressionBuilder Provides a base class for expression builders that declare shared subjects. This is an abstract class. SubscribeSubject<TSource> Represents an expression builder that generates a sequence of values by subscribing to a shared subject of the specified type. SubscribeSubjectBuilder Represents an expression builder that generates a sequence of values by subscribing to a shared subject. SubtractBuilder Represents an expression builder that applies the arithmetic subtraction operation on paired elements of an observable sequence. TakeWhileBuilder Represents an expression builder which returns elements from an observable sequence as long as the condition specified by the encapsulated workflow is true. TimeSpanProperty Represents a workflow property containing a time interval. TypeMapping Represents the target type to be created from selected member variables. This type is manipulated internally by InputMappingBuilder and MemberSelectorBuilder to force a specific output type. TypeMapping<T> Represents the target type to be created from selected member variables. This type is manipulated internally by InputMappingBuilder and MemberSelectorBuilder to force a specific output type. UnitBuilder Represents an expression builder that generates a sequence of elements. UnknownTypeBuilder Represents an expression builder that is a proxy for an unknown type. VariableArgumentExpressionBuilder Provides a base class for expression builders that can have a variable number of input arguments. This is an abstract class. VisualizerBuilder Represents an expression builder that uses the encapsulated workflow as a visualizer to an observable sequence without modifying its elements. WindowBuilder Represents an expression builder that projects the input sequence into zero or more windows with boundaries defined by the encapsulated workflow. WorkflowExpressionBuilder Provides a base class for expression builders that generate their output by means of an encapsulated workflow. WorkflowInputBuilder Represents the expression that is used as the input source of an encapsulated workflow. WorkflowInputBuilder<TSource> WorkflowOutputBuilder Represents the expression that is used as the output of an encapsulated workflow. WorkflowProperty Represents a workflow property. WorkflowProperty<TValue> Represents a strongly typed workflow property. XorBuilder Represents an expression builder that applies a bitwise XOR operation on paired elements of an observable sequence. ZeroArgumentExpressionBuilder Provides a base class for expression builders that require zero input arguments. This is an abstract class. Interfaces IExpressionBuilder Defines methods that support the generation of expression tree nodes from a collection of expression input arguments. IPropertyMappingBuilder Represents expression builder instances that can dynamically remap input sources into object property assignments. IWorkflowExpressionBuilder Represents expression builder instances that generate their output by means of an encapsulated workflow."
  },
  "api/Bonsai.Expressions.IExpressionBuilder.html": {
    "href": "api/Bonsai.Expressions.IExpressionBuilder.html",
    "title": "Interface IExpressionBuilder",
    "keywords": "Interface IExpressionBuilder Defines methods that support the generation of expression tree nodes from a collection of expression input arguments. Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public interface IExpressionBuilder Properties ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node."
  },
  "api/Bonsai.Expressions.IncludeWorkflowBuilder.html": {
    "href": "api/Bonsai.Expressions.IncludeWorkflowBuilder.html",
    "title": "Class IncludeWorkflowBuilder",
    "keywords": "Class IncludeWorkflowBuilder Represents an expression builder that uses an encapsulated workflow stored externally to generate its output. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder IncludeWorkflowBuilder Implements IWorkflowExpressionBuilder IExpressionBuilder INamedElement Inherited Members VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Workflow)] public sealed class IncludeWorkflowBuilder : VariableArgumentExpressionBuilder, IGroupWorkflowBuilder, IWorkflowExpressionBuilder, IExpressionBuilder, INamedElement, IRequireBuildContext Constructors IncludeWorkflowBuilder() Initializes a new instance of the IncludeWorkflowBuilder class. Declaration public IncludeWorkflowBuilder() Properties ArgumentRange Gets the range of input arguments the included workflow accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides VariableArgumentExpressionBuilder.ArgumentRange Description Gets a description for the included workflow. Declaration [Browsable(false)] public string Description { get; } Property Value Type Description String Name Gets the name of the included workflow. Declaration [Browsable(false)] public string Name { get; } Property Value Type Description String Path Gets or sets the path of the workflow to include. Declaration [Externalizable(false)] [FileNameFilter(\"Bonsai Files (*.bonsai)|*.bonsai\")] public string Path { get; set; } Property Value Type Description String PropertiesXml Gets or sets the XML representation of externalized property values from the included workflow. Declaration [Browsable(false)] public XElement[] PropertiesXml { get; set; } Property Value Type Description XElement [] Workflow Gets the expression builder workflow that will be used to generate the output expression tree. Declaration [Browsable(false)] public ExpressionBuilderGraph Workflow { get; } Property Value Type Description ExpressionBuilderGraph Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IWorkflowExpressionBuilder IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.IndexBuilder.html": {
    "href": "api/Bonsai.Expressions.IndexBuilder.html",
    "title": "Class IndexBuilder",
    "keywords": "Class IndexBuilder Represents an expression builder that applies an index operator to the elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder IndexBuilder Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members BinaryOperatorBuilder.Operand SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class IndexBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ISerializableElement Methods BuildSelector(Expression) Returns the expression that maps the specified input parameter to the selector result. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that maps the input parameter to the selector result. Overrides BinaryOperatorBuilder.BuildSelector(Expression) BuildSelector(Expression, Expression) Returns the expression that applies an index operator to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies an index operator to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.InputMappingBuilder.html": {
    "href": "api/Bonsai.Expressions.InputMappingBuilder.html",
    "title": "Class InputMappingBuilder",
    "keywords": "Class InputMappingBuilder Represents an expression builder that selects inner properties of elements of the sequence and assigns their values to properties of a workflow element. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder PropertyMappingBuilder InputMappingBuilder Implements IExpressionBuilder INamedElement Inherited Members PropertyMappingBuilder.PropertyMappings PropertyMappingBuilder.INamedElement.Name PropertyMappingBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class InputMappingBuilder : PropertyMappingBuilder, IExpressionBuilder, INamedElement, IArgumentBuilder, ISerializableElement Properties Selector Gets or sets a string used to select the input element member to project as output of the sequence. Declaration public string Selector { get; set; } Property Value Type Description String TypeMapping Gets or sets an optional type mapping specifying the data type which the selected properties will be projected into. Declaration [Externalizable(false)] [TypeConverter(typeof(TypeMappingConverter))] public TypeMapping TypeMapping { get; set; } Property Value Type Description TypeMapping Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.InspectBuilder.html": {
    "href": "api/Bonsai.Expressions.InspectBuilder.html",
    "title": "Class InspectBuilder",
    "keywords": "Class InspectBuilder Represents an expression builder that replays the latest notification from all the subscriptions made to its decorated builder. Inheritance Object ExpressionBuilder InspectBuilder Implements IExpressionBuilder INamedElement Inherited Members ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public sealed class InspectBuilder : ExpressionBuilder, IExpressionBuilder, INamedElement Constructors InspectBuilder(ExpressionBuilder) Initializes a new instance of the InspectBuilder class with the specified expression builder. Declaration public InspectBuilder(ExpressionBuilder builder) Parameters Type Name Description ExpressionBuilder builder The expression builder whose notifications will be replayed by this inspector. Properties ArgumentRange Gets the range of input arguments that the decorated expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides ExpressionBuilder.ArgumentRange Builder Gets the expression builder that is being decorated by this inspector. Declaration public ExpressionBuilder Builder { get; } Property Value Type Description ExpressionBuilder ErrorEx Gets an observable sequence that multicasts error notifications from all subscriptions made to the output of the decorated expression builder. Declaration public IObservable<Exception> ErrorEx { get; } Property Value Type Description IObservable < Exception > Name Gets the display name of the decorated expression builder. Declaration public string Name { get; } Property Value Type Description String ObservableType Gets the type of the elements in the output observable sequence. Declaration public Type ObservableType { get; } Property Value Type Description Type Output Gets an observable sequence that multicasts notifications from all the subscriptions made to the output of the decorated expression builder. Declaration public IObservable<IObservable<object>> Output { get; } Property Value Type Description IObservable < IObservable < Object >> PublishNotifications Gets or sets a value indicating whether runtime notifications from the decorated expression builder should be multicast by this inspector. Declaration public bool PublishNotifications { get; set; } Property Value Type Description Boolean Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.Int64Property.html": {
    "href": "api/Bonsai.Expressions.Int64Property.html",
    "title": "Class Int64Property",
    "keywords": "Class Int64Property Represents a workflow property containing a 64-bit signed integer. Inheritance Object WorkflowProperty Int64Property Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class Int64Property : WorkflowProperty Properties Value Gets or sets the value of the property. Declaration [Range(-9223372036854775808L, 9223372036854775807L)] public long Value { get; set; } Property Value Type Description Int64 Methods Generate() Generates an observable sequence that produces a value whenever the workflow property changes, starting with the initial property value. Declaration public virtual IObservable<long> Generate() Returns Type Description IObservable < Int64 > An observable sequence of property values. Generate<TSource>(IObservable<TSource>) Generates an observable sequence that produces a value whenever the source sequence emits a new element. Declaration public IObservable<long> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence used to generate new values. Returns Type Description IObservable < Int64 > An observable sequence of property values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Expressions.IntProperty.html": {
    "href": "api/Bonsai.Expressions.IntProperty.html",
    "title": "Class IntProperty",
    "keywords": "Class IntProperty Represents a workflow property containing a 32-bit signed integer. Inheritance Object WorkflowProperty IntProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class IntProperty : WorkflowProperty Properties Value Gets or sets the value of the property. Declaration [Range(-2147483648, 2147483647)] public int Value { get; set; } Property Value Type Description Int32 Methods Generate() Generates an observable sequence that produces a value whenever the workflow property changes, starting with the initial property value. Declaration public virtual IObservable<int> Generate() Returns Type Description IObservable < Int32 > An observable sequence of property values. Generate<TSource>(IObservable<TSource>) Generates an observable sequence that produces a value whenever the source sequence emits a new element. Declaration public IObservable<int> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence used to generate new values. Returns Type Description IObservable < Int32 > An observable sequence of property values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Expressions.IPropertyMappingBuilder.html": {
    "href": "api/Bonsai.Expressions.IPropertyMappingBuilder.html",
    "title": "Interface IPropertyMappingBuilder",
    "keywords": "Interface IPropertyMappingBuilder Represents expression builder instances that can dynamically remap input sources into object property assignments. Inherited Members IExpressionBuilder.ArgumentRange IExpressionBuilder.Build(IEnumerable<Expression>) Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public interface IPropertyMappingBuilder : IExpressionBuilder"
  },
  "api/Bonsai.Expressions.IWorkflowExpressionBuilder.html": {
    "href": "api/Bonsai.Expressions.IWorkflowExpressionBuilder.html",
    "title": "Interface IWorkflowExpressionBuilder",
    "keywords": "Interface IWorkflowExpressionBuilder Represents expression builder instances that generate their output by means of an encapsulated workflow. Inherited Members IExpressionBuilder.ArgumentRange IExpressionBuilder.Build(IEnumerable<Expression>) Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public interface IWorkflowExpressionBuilder : IExpressionBuilder Properties Workflow Gets the expression builder workflow that will be used to generate the output expression tree. Declaration ExpressionBuilderGraph Workflow { get; } Property Value Type Description ExpressionBuilderGraph"
  },
  "api/Bonsai.Expressions.LeftShiftBuilder.html": {
    "href": "api/Bonsai.Expressions.LeftShiftBuilder.html",
    "title": "Class LeftShiftBuilder",
    "keywords": "Class LeftShiftBuilder Represents an expression builder that applies a bitwise left-shift operation on elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder LeftShiftBuilder Implements IExpressionBuilder Inherited Members SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class LeftShiftBuilder : SelectBuilder, IExpressionBuilder Properties Value Gets or sets the number of positions by which to shift the bits of the input elements. Declaration public int Value { get; set; } Property Value Type Description Int32 Methods BuildSelector(Expression) Returns the expression that applies a bitwise left-shift operation to the input parameter. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that applies a bitwise left-shift operation to the input parameter. Overrides SelectBuilder.BuildSelector(Expression) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.LessThanBuilder.html": {
    "href": "api/Bonsai.Expressions.LessThanBuilder.html",
    "title": "Class LessThanBuilder",
    "keywords": "Class LessThanBuilder Represents an expression builder that applies a \"less than\" numeric comparison on paired elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder LessThanBuilder Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class LessThanBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ISerializableElement Methods BuildSelector(Expression, Expression) Returns the expression that applies a \"less than\" numeric comparison to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies a \"less than\" numeric comparison to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.LessThanOrEqualBuilder.html": {
    "href": "api/Bonsai.Expressions.LessThanOrEqualBuilder.html",
    "title": "Class LessThanOrEqualBuilder",
    "keywords": "Class LessThanOrEqualBuilder Represents an expression builder that applies a \"less than or equal\" numeric comparison on paired elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder LessThanOrEqualBuilder Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class LessThanOrEqualBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ISerializableElement Methods BuildSelector(Expression, Expression) Returns the expression that applies a \"less than or equal\" numeric comparison to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies a \"less than or equal\" numeric comparison to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.LogicalAndBuilder.html": {
    "href": "api/Bonsai.Expressions.LogicalAndBuilder.html",
    "title": "Class LogicalAndBuilder",
    "keywords": "Class LogicalAndBuilder Represents an expression builder that applies a conditional AND operation on paired elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder LogicalAndBuilder Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class LogicalAndBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ISerializableElement Methods BuildSelector(Expression, Expression) Returns the expression that applies the conditional AND operation to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies the conditional AND operation to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.LogicalOrBuilder.html": {
    "href": "api/Bonsai.Expressions.LogicalOrBuilder.html",
    "title": "Class LogicalOrBuilder",
    "keywords": "Class LogicalOrBuilder Represents an expression builder that applies a conditional OR operation on paired elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder LogicalOrBuilder Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class LogicalOrBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ISerializableElement Methods BuildSelector(Expression, Expression) Returns the expression that applies the conditional OR operation to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies the conditional OR operation to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.MemberSelectorBuilder.html": {
    "href": "api/Bonsai.Expressions.MemberSelectorBuilder.html",
    "title": "Class MemberSelectorBuilder",
    "keywords": "Class MemberSelectorBuilder Represents an expression builder that defines a simple selector on the elements of an observable sequence by mapping specified member values into the output data type. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder MemberSelectorBuilder Implements IExpressionBuilder INamedElement Inherited Members SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class MemberSelectorBuilder : SelectBuilder, IExpressionBuilder, INamedElement, ISerializableElement Properties Selector Gets or sets a string used to select the input element members that will be projected as output of the sequence. Declaration public string Selector { get; set; } Property Value Type Description String TypeMapping Gets or sets an optional type mapping specifying the data type which the selected properties will be projected into. Declaration [Externalizable(false)] [TypeConverter(typeof(TypeMappingConverter))] public TypeMapping TypeMapping { get; set; } Property Value Type Description TypeMapping Methods BuildSelector(Expression) Returns the expression that maps the specified input parameter to the selector result. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that maps the input parameter to the selector result. Overrides SelectBuilder.BuildSelector(Expression) Explicit Interface Implementations INamedElement.Name Declaration string INamedElement.Name { get; } Returns Type Description String Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.ModBuilder.html": {
    "href": "api/Bonsai.Expressions.ModBuilder.html",
    "title": "Class ModBuilder",
    "keywords": "Class ModBuilder Represents an expression builder that applies the arithmetic remainder operation on paired elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder ModBuilder Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class ModBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ISerializableElement Methods BuildSelector(Expression, Expression) Returns the expression that applies the arithmetic remainder operation to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies the arithmetic remainder operation to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.MulticastBuilder.html": {
    "href": "api/Bonsai.Expressions.MulticastBuilder.html",
    "title": "Class MulticastBuilder",
    "keywords": "Class MulticastBuilder Provides a base class for expression builders that handle sharing of sequences between multiple branches of an expression builder workflow by means of an observable query. This is an abstract class. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder SingleArgumentWorkflowExpressionBuilder MulticastBuilder PublishBuilder ReplayBuilder Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members SingleArgumentWorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public abstract class MulticastBuilder : SingleArgumentWorkflowExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder, IRequireBuildContext Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.MulticastSubjectBuilder.html": {
    "href": "api/Bonsai.Expressions.MulticastSubjectBuilder.html",
    "title": "Class MulticastSubjectBuilder",
    "keywords": "Class MulticastSubjectBuilder Represents an expression builder that pushes a sequence of values into a shared subject. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder MulticastSubjectBuilder Implements IExpressionBuilder INamedElement Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Sink)] public class MulticastSubjectBuilder : SingleArgumentExpressionBuilder, IExpressionBuilder, IRequireSubject, INamedElement, IRequireBuildContext Properties Name Gets or sets the name of the shared subject. Declaration [TypeConverter(typeof(SubjectNameConverter))] public string Name { get; set; } Property Value Type Description String Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.MultiplyBuilder.html": {
    "href": "api/Bonsai.Expressions.MultiplyBuilder.html",
    "title": "Class MultiplyBuilder",
    "keywords": "Class MultiplyBuilder Represents an expression builder that applies the arithmetic multiplication operation on paired elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder MultiplyBuilder Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class MultiplyBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ISerializableElement Methods BuildSelector(Expression, Expression) Returns the expression that applies the arithmetic multiplication operation to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies the arithmetic multiplication operation to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.NegateBuilder.html": {
    "href": "api/Bonsai.Expressions.NegateBuilder.html",
    "title": "Class NegateBuilder",
    "keywords": "Class NegateBuilder Represents an expression builder that applies an arithmetic negation operation on elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder NegateBuilder Implements IExpressionBuilder Inherited Members SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class NegateBuilder : SelectBuilder, IExpressionBuilder Methods BuildSelector(Expression) Returns the expression that applies an arithmetic negation operation on the specified input parameter to the selector result. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that applies an arithmetic negation operation on the input parameter to the selector result. Overrides SelectBuilder.BuildSelector(Expression) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.NestedWorkflowBuilder.html": {
    "href": "api/Bonsai.Expressions.NestedWorkflowBuilder.html",
    "title": "Class NestedWorkflowBuilder",
    "keywords": "Class NestedWorkflowBuilder Represents an expression builder that generates an expression tree using a nested expression builder workflow. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder NestedWorkflowBuilder Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class NestedWorkflowBuilder : WorkflowExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder, IRequireBuildContext Constructors NestedWorkflowBuilder() Initializes a new instance of the NestedWorkflowBuilder class. Declaration public NestedWorkflowBuilder() NestedWorkflowBuilder(ExpressionBuilderGraph) Initializes a new instance of the NestedWorkflowBuilder class with the specified expression builder workflow. Declaration public NestedWorkflowBuilder(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.NotEqualBuilder.html": {
    "href": "api/Bonsai.Expressions.NotEqualBuilder.html",
    "title": "Class NotEqualBuilder",
    "keywords": "Class NotEqualBuilder Represents an expression builder that applies an inequality comparison on paired elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder NotEqualBuilder Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class NotEqualBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ISerializableElement Methods BuildSelector(Expression, Expression) Returns the expression that applies an inequality comparison to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies an inequality comparison to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.ParseBuilder.html": {
    "href": "api/Bonsai.Expressions.ParseBuilder.html",
    "title": "Class ParseBuilder",
    "keywords": "Class ParseBuilder Represents an expression builder that applies a pattern matching operation on elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder ParseBuilder Implements IExpressionBuilder Inherited Members SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class ParseBuilder : SelectBuilder, IExpressionBuilder Properties Pattern Gets or sets the parse pattern to match, including data type format specifiers. Declaration [TypeConverter(typeof(ParseBuilder.PatternConverter))] public string Pattern { get; set; } Property Value Type Description String Remarks The allowed data type format specifiers are preceded by the character '%'. Currently the supported types are: byte (%B); short (%h); int (%i); long (%l); float (%f); double (%d); bool (%b); char (%c); string (%s); date-time (%t) and time-span (%T). Upper case characters can be used to indicate the unsigned type in the case of integer elements (e.g. %I for unsigned int). Separator Gets or sets the optional separator used to delimit elements in variable length patterns. Declaration public string Separator { get; set; } Property Value Type Description String Methods BuildSelector(Expression) Returns the expression that applies a pattern matching operation on the specified input parameter to the selector result. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that applies a pattern matching operation on the input parameter to the selector result. Overrides SelectBuilder.BuildSelector(Expression) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.PropertyMapping.html": {
    "href": "api/Bonsai.Expressions.PropertyMapping.html",
    "title": "Class PropertyMapping",
    "keywords": "Class PropertyMapping Represents a dynamic assignment between a selected input source and a property of a workflow element. Inheritance Object PropertyMapping Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public sealed class PropertyMapping Constructors PropertyMapping() Initializes a new instance of the PropertyMapping class. Declaration public PropertyMapping() PropertyMapping(String, String) Initializes a new instance of the PropertyMapping class with the specified property name and source selector. Declaration public PropertyMapping(string name, string selector) Parameters Type Name Description String name The name of the property that will be assigned by this mapping. String selector A string that will be used to select the input source that will assign values to this property mapping. Properties Name Gets or sets the name of the property that will be assigned by this mapping. Declaration [TypeConverter(typeof(PropertyMappingNameConverter))] public string Name { get; set; } Property Value Type Description String Selector Gets or sets a string that will be used to select the input source that will assign values to this property mapping. Declaration public string Selector { get; set; } Property Value Type Description String"
  },
  "api/Bonsai.Expressions.PropertyMappingBuilder.html": {
    "href": "api/Bonsai.Expressions.PropertyMappingBuilder.html",
    "title": "Class PropertyMappingBuilder",
    "keywords": "Class PropertyMappingBuilder Represents an expression builder that assigns values of an observable sequence to properties of a workflow element. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder PropertyMappingBuilder InputMappingBuilder Implements IExpressionBuilder INamedElement Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Property)] public class PropertyMappingBuilder : SingleArgumentExpressionBuilder, IExpressionBuilder, INamedElement, IArgumentBuilder Properties PropertyMappings Gets a collection of property mappings that specify how input values are assigned to properties of the workflow element. Declaration public PropertyMappingCollection PropertyMappings { get; } Property Value Type Description PropertyMappingCollection Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Explicit Interface Implementations INamedElement.Name Declaration string INamedElement.Name { get; } Returns Type Description String Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.PropertyMappingCollection.html": {
    "href": "api/Bonsai.Expressions.PropertyMappingCollection.html",
    "title": "Class PropertyMappingCollection",
    "keywords": "Class PropertyMappingCollection Represents a collection of dynamic property mappings. Inheritance Object Collection < PropertyMapping > KeyedCollection < String , PropertyMapping > PropertyMappingCollection Implements IList < PropertyMapping > ICollection < PropertyMapping > IList ICollection IReadOnlyList < PropertyMapping > IReadOnlyCollection < PropertyMapping > IEnumerable < PropertyMapping > IEnumerable Inherited Members KeyedCollection<String, PropertyMapping>.Contains(String) KeyedCollection<String, PropertyMapping>.Remove(String) KeyedCollection<String, PropertyMapping>.ChangeItemKey(PropertyMapping, String) KeyedCollection<String, PropertyMapping>.ClearItems() KeyedCollection<String, PropertyMapping>.GetKeyForItem(PropertyMapping) KeyedCollection<String, PropertyMapping>.InsertItem(Int32, PropertyMapping) KeyedCollection<String, PropertyMapping>.RemoveItem(Int32) KeyedCollection<String, PropertyMapping>.SetItem(Int32, PropertyMapping) KeyedCollection<String, PropertyMapping>.Comparer KeyedCollection<String, PropertyMapping>.Item[String] KeyedCollection<String, PropertyMapping>.Dictionary Collection<PropertyMapping>.Add(PropertyMapping) Collection<PropertyMapping>.Clear() Collection<PropertyMapping>.CopyTo(PropertyMapping[], Int32) Collection<PropertyMapping>.Contains(PropertyMapping) Collection<PropertyMapping>.GetEnumerator() Collection<PropertyMapping>.IndexOf(PropertyMapping) Collection<PropertyMapping>.Insert(Int32, PropertyMapping) Collection<PropertyMapping>.Remove(PropertyMapping) Collection<PropertyMapping>.RemoveAt(Int32) Collection<PropertyMapping>.ClearItems() Collection<PropertyMapping>.InsertItem(Int32, PropertyMapping) Collection<PropertyMapping>.RemoveItem(Int32) Collection<PropertyMapping>.SetItem(Int32, PropertyMapping) Collection<PropertyMapping>.IEnumerable.GetEnumerator() Collection<PropertyMapping>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Expressions.PropertyMapping>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Expressions.PropertyMapping>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<PropertyMapping>.IList.Add(Object) Collection<PropertyMapping>.IList.Contains(Object) Collection<PropertyMapping>.IList.IndexOf(Object) Collection<PropertyMapping>.IList.Insert(Int32, Object) Collection<PropertyMapping>.IList.Remove(Object) Collection<PropertyMapping>.Count Collection<PropertyMapping>.Items Collection<PropertyMapping>.Item[Int32] Collection<PropertyMapping>.ICollection<PropertyMapping>.IsReadOnly Collection<PropertyMapping>.ICollection.IsSynchronized Collection<PropertyMapping>.ICollection.SyncRoot Collection<PropertyMapping>.IList.Item[Int32] Collection<PropertyMapping>.IList.IsReadOnly Collection<PropertyMapping>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class PropertyMappingCollection : KeyedCollection<string, PropertyMapping>, IList<PropertyMapping>, ICollection<PropertyMapping>, IList, ICollection, IReadOnlyList<PropertyMapping>, IReadOnlyCollection<PropertyMapping>, IEnumerable<PropertyMapping>, IEnumerable Methods GetKeyForItem(PropertyMapping) Extracts the key from the specified property mapping. Declaration protected override string GetKeyForItem(PropertyMapping item) Parameters Type Name Description PropertyMapping item The property mapping from which to extract the key. Returns Type Description String The key for the specified property mapping. The current key is the name of the property mapping. Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Bonsai.Expressions.PropertyMapping>.GetKeyForItem(Bonsai.Expressions.PropertyMapping) Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Expressions.PropertySource.html": {
    "href": "api/Bonsai.Expressions.PropertySource.html",
    "title": "Class PropertySource",
    "keywords": "Class PropertySource Represents a data source compatible with the specified workflow element property. Inheritance Object ExpressionBuilder PropertySource PropertySource<TElement, TValue> Implements IExpressionBuilder INamedElement Inherited Members ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Source)] public abstract class PropertySource : ExpressionBuilder, IExpressionBuilder, INamedElement Properties ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides ExpressionBuilder.ArgumentRange MemberName Gets or sets the name of the externalized class member. Declaration [Browsable(false)] public string MemberName { get; set; } Property Value Type Description String Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Explicit Interface Implementations INamedElement.Name Declaration string INamedElement.Name { get; } Returns Type Description String Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.PropertySource-2.html": {
    "href": "api/Bonsai.Expressions.PropertySource-2.html",
    "title": "Class PropertySource<TElement, TValue>",
    "keywords": "Class PropertySource<TElement, TValue> Represents a data source compatible with the specified workflow element property. Inheritance Object ExpressionBuilder PropertySource PropertySource<TElement, TValue> Implements IExpressionBuilder INamedElement Inherited Members PropertySource.ArgumentRange PropertySource.MemberName PropertySource.INamedElement.Name PropertySource.Build(IEnumerable<Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class PropertySource<TElement, TValue> : PropertySource, IExpressionBuilder, INamedElement Type Parameters Name Description TElement The type of the workflow element from which the property data source was constructed. TValue The type of the property values. Properties Value Gets or sets the value of the property. Declaration public TValue Value { get; set; } Property Value Type Description TValue Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.PublishBuilder.html": {
    "href": "api/Bonsai.Expressions.PublishBuilder.html",
    "title": "Class PublishBuilder",
    "keywords": "Class PublishBuilder Represents an expression builder that shares a single subscription to an observable sequence across the encapsulated workflow. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder SingleArgumentWorkflowExpressionBuilder MulticastBuilder PublishBuilder Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members MulticastBuilder.Build(IEnumerable<Expression>) SingleArgumentWorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class PublishBuilder : MulticastBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder, IRequireBuildContext Constructors PublishBuilder() Initializes a new instance of the PublishBuilder class. Declaration public PublishBuilder() PublishBuilder(ExpressionBuilderGraph) Initializes a new instance of the PublishBuilder class with the specified expression builder workflow. Declaration public PublishBuilder(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.PublishSubjectBuilder.html": {
    "href": "api/Bonsai.Expressions.PublishSubjectBuilder.html",
    "title": "Class PublishSubjectBuilder",
    "keywords": "Class PublishSubjectBuilder Represents an expression builder that broadcasts the values of an observable sequence to multiple subscribers using a shared subject. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder PublishSubjectBuilder Implements IExpressionBuilder INamedElement Inherited Members SubjectBuilder.Build(IEnumerable<Expression>) SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class PublishSubjectBuilder : SubjectBuilder, IExpressionBuilder, INamedElement, IRequireBuildContext Methods BuildSubject(Expression) When overridden in a derived class, returns the expression that creates the shared subject. Declaration protected override Expression BuildSubject(Expression expression) Parameters Type Name Description Expression expression The expression representing the observable input sequence. Returns Type Description Expression The Expression that creates the shared subject. Overrides SubjectBuilder.BuildSubject(Expression) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.PublishSubjectBuilder-1.html": {
    "href": "api/Bonsai.Expressions.PublishSubjectBuilder-1.html",
    "title": "Class PublishSubjectBuilder<T>",
    "keywords": "Class PublishSubjectBuilder<T> Represents an expression builder that broadcasts the values from other observable sequences to multiple subscribers. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder <T> PublishSubjectBuilder<T> Implements IExpressionBuilder INamedElement Inherited Members SubjectBuilder<T>.Build(IEnumerable<Expression>) SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class PublishSubjectBuilder<T> : SubjectBuilder<T>, IExpressionBuilder, INamedElement, IRequireBuildContext Type Parameters Name Description T The type of the elements processed by the subject. Methods CreateSubject() Creates a shared subject that broadcasts the values from other observable sequences to multiple subscribers. Declaration protected override ISubject<T> CreateSubject() Returns Type Description ISubject <T> A new instance of . Overrides Bonsai.Expressions.SubjectBuilder<T>.CreateSubject() Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.ReplayBuilder.html": {
    "href": "api/Bonsai.Expressions.ReplayBuilder.html",
    "title": "Class ReplayBuilder",
    "keywords": "Class ReplayBuilder Represents an expression builder that handles sharing of an observable sequence across the encapsulated workflow by eagerly replaying notifications. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder SingleArgumentWorkflowExpressionBuilder MulticastBuilder ReplayBuilder Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members MulticastBuilder.Build(IEnumerable<Expression>) SingleArgumentWorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class ReplayBuilder : MulticastBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder, IRequireBuildContext Constructors ReplayBuilder() Initializes a new instance of the ReplayBuilder class. Declaration public ReplayBuilder() ReplayBuilder(ExpressionBuilderGraph) Initializes a new instance of the ReplayBuilder class with the specified expression builder workflow. Declaration public ReplayBuilder(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Properties BufferSize Gets or sets the maximum element count of the replay buffer. Declaration [Externalizable(false)] public int? BufferSize { get; set; } Property Value Type Description Nullable < Int32 > Window Gets or sets the maximum time length of the replay buffer. Declaration [Externalizable(false)] public TimeSpan? Window { get; set; } Property Value Type Description Nullable < TimeSpan > WindowXml Gets or sets the XML serializable representation of the replay window interval. Declaration [Browsable(false)] public string WindowXml { get; set; } Property Value Type Description String Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.ReplaySubjectBuilder.html": {
    "href": "api/Bonsai.Expressions.ReplaySubjectBuilder.html",
    "title": "Class ReplaySubjectBuilder",
    "keywords": "Class ReplaySubjectBuilder Represents an expression builder that replays the values of an observable sequence to all subscribed and future observers using a shared subject. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder ReplaySubjectBuilder Implements IExpressionBuilder INamedElement Inherited Members SubjectBuilder.Build(IEnumerable<Expression>) SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class ReplaySubjectBuilder : SubjectBuilder, IExpressionBuilder, INamedElement, IRequireBuildContext Properties BufferSize Gets or sets the maximum element count of the replay buffer. Declaration public int? BufferSize { get; set; } Property Value Type Description Nullable < Int32 > Window Gets or sets the maximum time length of the replay buffer. Declaration public TimeSpan? Window { get; set; } Property Value Type Description Nullable < TimeSpan > WindowXml Gets or sets the XML serializable representation of the replay window interval. Declaration [Browsable(false)] public string WindowXml { get; set; } Property Value Type Description String Methods BuildSubject(Expression) When overridden in a derived class, returns the expression that creates the shared subject. Declaration protected override Expression BuildSubject(Expression expression) Parameters Type Name Description Expression expression The expression representing the observable input sequence. Returns Type Description Expression The Expression that creates the shared subject. Overrides SubjectBuilder.BuildSubject(Expression) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.ReplaySubjectBuilder-1.html": {
    "href": "api/Bonsai.Expressions.ReplaySubjectBuilder-1.html",
    "title": "Class ReplaySubjectBuilder<T>",
    "keywords": "Class ReplaySubjectBuilder<T> Represents an expression builder that replays the values of other observable sequences to all subscribed and future observers. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder <T> ReplaySubjectBuilder<T> Implements IExpressionBuilder INamedElement Inherited Members SubjectBuilder<T>.Build(IEnumerable<Expression>) SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class ReplaySubjectBuilder<T> : SubjectBuilder<T>, IExpressionBuilder, INamedElement, IRequireBuildContext Type Parameters Name Description T The type of the elements processed by the subject. Properties BufferSize Gets or sets the maximum element count of the replay buffer. Declaration public int? BufferSize { get; set; } Property Value Type Description Nullable < Int32 > Window Gets or sets the maximum time length of the replay buffer. Declaration public TimeSpan? Window { get; set; } Property Value Type Description Nullable < TimeSpan > WindowXml Gets or sets the XML serializable representation of the replay window interval. Declaration [Browsable(false)] public string WindowXml { get; set; } Property Value Type Description String Methods CreateSubject() Creates a shared subject that replays the values of other observable sequences to all subscribed and future observers. Declaration protected override ISubject<T> CreateSubject() Returns Type Description ISubject <T> A new instance of . Overrides Bonsai.Expressions.SubjectBuilder<T>.CreateSubject() Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.ResourceSubjectBuilder.html": {
    "href": "api/Bonsai.Expressions.ResourceSubjectBuilder.html",
    "title": "Class ResourceSubjectBuilder",
    "keywords": "Class ResourceSubjectBuilder Represents an expression builder that stores and broadcasts the last disposable value of an observable sequence to all subscribed and future observers. The value is disposed when the containing context is closed. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder ResourceSubjectBuilder Implements IExpressionBuilder INamedElement Inherited Members SubjectBuilder.Build(IEnumerable<Expression>) SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class ResourceSubjectBuilder : SubjectBuilder, IExpressionBuilder, INamedElement, IRequireBuildContext Methods BuildSubject(Expression) When overridden in a derived class, returns the expression that creates the shared subject. Declaration protected override Expression BuildSubject(Expression expression) Parameters Type Name Description Expression expression The expression representing the observable input sequence. Returns Type Description Expression The Expression that creates the shared subject. Overrides SubjectBuilder.BuildSubject(Expression) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.ResourceSubjectBuilder-1.html": {
    "href": "api/Bonsai.Expressions.ResourceSubjectBuilder-1.html",
    "title": "Class ResourceSubjectBuilder<T>",
    "keywords": "Class ResourceSubjectBuilder<T> Represents an expression builder that stores and broadcasts the last disposable value of an observable sequence to all subscribed and future observers. The value is disposed when the containing context is closed. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder <T> ResourceSubjectBuilder<T> Implements IExpressionBuilder INamedElement Inherited Members SubjectBuilder<T>.Build(IEnumerable<Expression>) SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class ResourceSubjectBuilder<T> : SubjectBuilder<T>, IExpressionBuilder, INamedElement, IRequireBuildContext where T : class, IDisposable Type Parameters Name Description T The type of the disposable resource stored by the subject. Methods CreateSubject() Creates a shared subject that stores and broadcasts the last disposable value of an observable sequence to all subscribed and future observers. The value is disposed when the containing context is closed. Declaration protected override ISubject<T> CreateSubject() Returns Type Description ISubject <T> A new instance of . Overrides Bonsai.Expressions.SubjectBuilder<T>.CreateSubject() Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.RightShiftBuilder.html": {
    "href": "api/Bonsai.Expressions.RightShiftBuilder.html",
    "title": "Class RightShiftBuilder",
    "keywords": "Class RightShiftBuilder Represents an expression builder that applies a bitwise right-shift operation on elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder RightShiftBuilder Implements IExpressionBuilder Inherited Members SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class RightShiftBuilder : SelectBuilder, IExpressionBuilder Properties Value Gets or sets the number of positions by which to shift the bits of the input elements. Declaration public int Value { get; set; } Property Value Type Description Int32 Methods BuildSelector(Expression) Returns the expression that applies a bitwise right-shift operation to the input parameter. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that applies a bitwise right-shift operation to the input parameter. Overrides SelectBuilder.BuildSelector(Expression) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.ScanBuilder.html": {
    "href": "api/Bonsai.Expressions.ScanBuilder.html",
    "title": "Class ScanBuilder",
    "keywords": "Class ScanBuilder Represents an expression builder which accumulates the values of an observable sequence using the encapsulated workflow. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder ScanBuilder Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class ScanBuilder : WorkflowExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder, IRequireBuildContext Constructors ScanBuilder() Initializes a new instance of the ScanBuilder class. Declaration public ScanBuilder() ScanBuilder(ExpressionBuilderGraph) Initializes a new instance of the ScanBuilder class with the specified expression builder workflow. Declaration public ScanBuilder(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Properties ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides WorkflowExpressionBuilder.ArgumentRange Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.SelectBuilder.html": {
    "href": "api/Bonsai.Expressions.SelectBuilder.html",
    "title": "Class SelectBuilder",
    "keywords": "Class SelectBuilder Provides a base class for expression builders that define a simple selector on the elements of an observable sequence. This is an abstract class. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder BitwiseNotBuilder FormatBuilder LeftShiftBuilder MemberSelectorBuilder NegateBuilder ParseBuilder RightShiftBuilder Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Transform)] public abstract class SelectBuilder : SingleArgumentExpressionBuilder, IExpressionBuilder Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) BuildSelector(Expression) When overridden in a derived class, returns the expression that maps the specified input parameter to the selector result. Declaration protected abstract Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that maps the input parameter to the selector result. Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.SelectManyBuilder.html": {
    "href": "api/Bonsai.Expressions.SelectManyBuilder.html",
    "title": "Class SelectManyBuilder",
    "keywords": "Class SelectManyBuilder Represents an expression builder that merges higher-order observable sequences generated from the encapsulated workflow. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder SingleArgumentWorkflowExpressionBuilder SelectManyBuilder Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members SingleArgumentWorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class SelectManyBuilder : SingleArgumentWorkflowExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder, IRequireBuildContext Constructors SelectManyBuilder() Initializes a new instance of the SelectManyBuilder class. Declaration public SelectManyBuilder() SelectManyBuilder(ExpressionBuilderGraph) Initializes a new instance of the SelectManyBuilder class with the specified expression builder workflow. Declaration public SelectManyBuilder(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.SingleArgumentExpressionBuilder.html": {
    "href": "api/Bonsai.Expressions.SingleArgumentExpressionBuilder.html",
    "title": "Class SingleArgumentExpressionBuilder",
    "keywords": "Class SingleArgumentExpressionBuilder Provides a base class for expression builders that require a single input argument. This is an abstract class. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder MulticastSubjectBuilder PropertyMappingBuilder SelectBuilder WorkflowOutputBuilder Accumulate DistinctBy DistinctUntilChangedBy GroupBy MaxBy MinBy OrderBy OrderByDescending ThenBy ThenByDescending ToDictionary ToLookup Implements IExpressionBuilder Inherited Members ExpressionBuilder.Build(IEnumerable<Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public abstract class SingleArgumentExpressionBuilder : ExpressionBuilder, IExpressionBuilder Properties ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides ExpressionBuilder.ArgumentRange Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.SingleArgumentWorkflowExpressionBuilder.html": {
    "href": "api/Bonsai.Expressions.SingleArgumentWorkflowExpressionBuilder.html",
    "title": "Class SingleArgumentWorkflowExpressionBuilder",
    "keywords": "Class SingleArgumentWorkflowExpressionBuilder Provides a base class for workflow expression builders that require a single input argument. This is an abstract class. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder SingleArgumentWorkflowExpressionBuilder ConditionBuilder MulticastBuilder SelectManyBuilder SinkBuilder Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.Build(IEnumerable<Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public abstract class SingleArgumentWorkflowExpressionBuilder : WorkflowExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder, IRequireBuildContext Properties ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides WorkflowExpressionBuilder.ArgumentRange Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.SinkBuilder.html": {
    "href": "api/Bonsai.Expressions.SinkBuilder.html",
    "title": "Class SinkBuilder",
    "keywords": "Class SinkBuilder Represents an expression builder that adds the side effects specified by the encapsulated workflow to an observable sequence without modifying its elements. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder SingleArgumentWorkflowExpressionBuilder SinkBuilder VisualizerBuilder Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members SingleArgumentWorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Sink)] public class SinkBuilder : SingleArgumentWorkflowExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder, IRequireBuildContext Constructors SinkBuilder() Initializes a new instance of the SinkBuilder class. Declaration public SinkBuilder() SinkBuilder(ExpressionBuilderGraph) Initializes a new instance of the SinkBuilder class with the specified expression builder workflow. Declaration public SinkBuilder(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.SkipWhileBuilder.html": {
    "href": "api/Bonsai.Expressions.SkipWhileBuilder.html",
    "title": "Class SkipWhileBuilder",
    "keywords": "Class SkipWhileBuilder Represents an expression builder which bypasses elements in an observable sequence as long as the condition specified by the encapsulated workflow is true. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder SingleArgumentWorkflowExpressionBuilder ConditionBuilder SkipWhileBuilder Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members ConditionBuilder.Build(IEnumerable<Expression>) SingleArgumentWorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Combinator)] public class SkipWhileBuilder : ConditionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder, IRequireBuildContext Constructors SkipWhileBuilder() Initializes a new instance of the SkipWhileBuilder class. Declaration public SkipWhileBuilder() SkipWhileBuilder(ExpressionBuilderGraph) Initializes a new instance of the SkipWhileBuilder class with the specified expression builder workflow. Declaration public SkipWhileBuilder(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.StringProperty.html": {
    "href": "api/Bonsai.Expressions.StringProperty.html",
    "title": "Class StringProperty",
    "keywords": "Class StringProperty Represents a workflow property containing Unicode text. Inheritance Object WorkflowProperty WorkflowProperty < String > StringProperty Inherited Members WorkflowProperty<String>.Value WorkflowProperty<String>.Generate() WorkflowProperty<String>.Generate<TSource>(IObservable<TSource>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class StringProperty : WorkflowProperty<string>"
  },
  "api/Bonsai.Expressions.SubjectBuilder.html": {
    "href": "api/Bonsai.Expressions.SubjectBuilder.html",
    "title": "Class SubjectBuilder",
    "keywords": "Class SubjectBuilder Provides a base class for expression builders that broadcast the values of an observable sequence to multiple subscribers using a shared subject. This is an abstract class. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder AsyncSubjectBuilder BehaviorSubjectBuilder PublishSubjectBuilder ReplaySubjectBuilder ResourceSubjectBuilder Implements IExpressionBuilder INamedElement Inherited Members SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Sink)] public abstract class SubjectBuilder : SubjectExpressionBuilder, IExpressionBuilder, INamedElement, IRequireBuildContext Constructors SubjectBuilder() Initializes a new instance of the SubjectBuilder class. Declaration protected SubjectBuilder() Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) BuildSubject(Expression) When overridden in a derived class, returns the expression that creates the shared subject. Declaration protected abstract Expression BuildSubject(Expression expression) Parameters Type Name Description Expression expression The expression representing the observable input sequence. Returns Type Description Expression The Expression that creates the shared subject. Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.SubjectBuilder-1.html": {
    "href": "api/Bonsai.Expressions.SubjectBuilder-1.html",
    "title": "Class SubjectBuilder<T>",
    "keywords": "Class SubjectBuilder<T> Provides a base class for expression builders that declare a shared subject of the specified type. This is an abstract class. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder<T> AsyncSubjectBuilder<T> BehaviorSubjectBuilder<T> PublishSubjectBuilder<T> ReplaySubjectBuilder<T> ResourceSubjectBuilder<T> Implements IExpressionBuilder INamedElement Inherited Members SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Source)] public abstract class SubjectBuilder<T> : SubjectExpressionBuilder, IExpressionBuilder, INamedElement, IRequireBuildContext Type Parameters Name Description T The type of the elements processed by the subject. Constructors SubjectBuilder() Initializes a new instance of the SubjectBuilder<T> class. Declaration protected SubjectBuilder() Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) CreateSubject() When overridden in a derived class, creates the shared subject. Declaration protected abstract ISubject<T> CreateSubject() Returns Type Description ISubject <T> A new instance of . Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.SubjectExpressionBuilder.html": {
    "href": "api/Bonsai.Expressions.SubjectExpressionBuilder.html",
    "title": "Class SubjectExpressionBuilder",
    "keywords": "Class SubjectExpressionBuilder Provides a base class for expression builders that declare shared subjects. This is an abstract class. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder SubjectBuilder<T> Implements IExpressionBuilder INamedElement Inherited Members VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.Build(IEnumerable<Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementIcon(typeof(SubjectExpressionBuilder), \"SubjectExpressionBuilder\")] public abstract class SubjectExpressionBuilder : VariableArgumentExpressionBuilder, IExpressionBuilder, INamedElement Constructors SubjectExpressionBuilder(Int32, Int32) Initializes a new instance of the SubjectExpressionBuilder class with the specified argument range. Declaration protected SubjectExpressionBuilder(int minArguments, int maxArguments) Parameters Type Name Description Int32 minArguments The inclusive lower bound of the argument range. Int32 maxArguments The inclusive upper bound of the argument range. Properties Name Gets or sets the name of the shared subject. Declaration public string Name { get; set; } Property Value Type Description String Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.SubscribeSubject-1.html": {
    "href": "api/Bonsai.Expressions.SubscribeSubject-1.html",
    "title": "Class SubscribeSubject<TSource>",
    "keywords": "Class SubscribeSubject<TSource> Represents an expression builder that generates a sequence of values by subscribing to a shared subject of the specified type. Inheritance Object ExpressionBuilder ZeroArgumentExpressionBuilder SubscribeSubjectBuilder SubscribeSubject<TSource> Implements IExpressionBuilder INamedElement Inherited Members SubscribeSubjectBuilder.Build(IEnumerable<Expression>) ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementIcon(typeof(SubscribeSubjectBuilder), \"SubscribeSubjectBuilder\")] public class SubscribeSubject<TSource> : SubscribeSubjectBuilder, IExpressionBuilder, IRequireSubject, INamedElement, IRequireBuildContext Type Parameters Name Description TSource The type of the elements processed by the subject. Properties Name Gets or sets the name of the shared subject. Declaration [TypeConverter(typeof(SubjectNameConverter))] public string Name { get; set; } Property Value Type Description String Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.SubscribeSubjectBuilder.html": {
    "href": "api/Bonsai.Expressions.SubscribeSubjectBuilder.html",
    "title": "Class SubscribeSubjectBuilder",
    "keywords": "Class SubscribeSubjectBuilder Represents an expression builder that generates a sequence of values by subscribing to a shared subject. Inheritance Object ExpressionBuilder ZeroArgumentExpressionBuilder SubscribeSubjectBuilder SubscribeSubject<TSource> Implements IExpressionBuilder INamedElement Inherited Members ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Source)] public class SubscribeSubjectBuilder : ZeroArgumentExpressionBuilder, IExpressionBuilder, IRequireSubject, INamedElement, IRequireBuildContext Properties Name Gets or sets the name of the shared subject. Declaration [TypeConverter(typeof(SubjectNameConverter))] public string Name { get; set; } Property Value Type Description String Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.SubtractBuilder.html": {
    "href": "api/Bonsai.Expressions.SubtractBuilder.html",
    "title": "Class SubtractBuilder",
    "keywords": "Class SubtractBuilder Represents an expression builder that applies the arithmetic subtraction operation on paired elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder SubtractBuilder Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class SubtractBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ISerializableElement Methods BuildSelector(Expression, Expression) Returns the expression that applies the arithmetic subtraction operation to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies the arithmetic subtraction operation to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.TakeWhileBuilder.html": {
    "href": "api/Bonsai.Expressions.TakeWhileBuilder.html",
    "title": "Class TakeWhileBuilder",
    "keywords": "Class TakeWhileBuilder Represents an expression builder which returns elements from an observable sequence as long as the condition specified by the encapsulated workflow is true. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder SingleArgumentWorkflowExpressionBuilder ConditionBuilder TakeWhileBuilder Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members ConditionBuilder.Build(IEnumerable<Expression>) SingleArgumentWorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Combinator)] public class TakeWhileBuilder : ConditionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder, IRequireBuildContext Constructors TakeWhileBuilder() Initializes a new instance of the TakeWhileBuilder class. Declaration public TakeWhileBuilder() TakeWhileBuilder(ExpressionBuilderGraph) Initializes a new instance of the TakeWhileBuilder class with the specified expression builder workflow. Declaration public TakeWhileBuilder(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.TimeSpanProperty.html": {
    "href": "api/Bonsai.Expressions.TimeSpanProperty.html",
    "title": "Class TimeSpanProperty",
    "keywords": "Class TimeSpanProperty Represents a workflow property containing a time interval. Inheritance Object WorkflowProperty TimeSpanProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class TimeSpanProperty : WorkflowProperty Properties Value Gets or sets the value of the property. Declaration public TimeSpan Value { get; set; } Property Value Type Description TimeSpan ValueXml Gets or sets an XML representation of the property value for serialization. Declaration [Browsable(false)] public string ValueXml { get; set; } Property Value Type Description String Methods Generate() Generates an observable sequence that produces a value whenever the workflow property changes, starting with the initial property value. Declaration public virtual IObservable<TimeSpan> Generate() Returns Type Description IObservable < TimeSpan > An observable sequence of property values. Generate<TSource>(IObservable<TSource>) Generates an observable sequence that produces a value whenever the source sequence emits a new element. Declaration public IObservable<TimeSpan> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence used to generate new values. Returns Type Description IObservable < TimeSpan > An observable sequence of property values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Expressions.TypeMapping.html": {
    "href": "api/Bonsai.Expressions.TypeMapping.html",
    "title": "Class TypeMapping",
    "keywords": "Class TypeMapping Represents the target type to be created from selected member variables. This type is manipulated internally by InputMappingBuilder and MemberSelectorBuilder to force a specific output type. Inheritance Object TypeMapping TypeMapping<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public abstract class TypeMapping"
  },
  "api/Bonsai.Expressions.TypeMapping-1.html": {
    "href": "api/Bonsai.Expressions.TypeMapping-1.html",
    "title": "Class TypeMapping<T>",
    "keywords": "Class TypeMapping<T> Represents the target type to be created from selected member variables. This type is manipulated internally by InputMappingBuilder and MemberSelectorBuilder to force a specific output type. Inheritance Object TypeMapping TypeMapping<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class TypeMapping<T> : TypeMapping Type Parameters Name Description T The target type to be created from selected member variables."
  },
  "api/Bonsai.Expressions.UnitBuilder.html": {
    "href": "api/Bonsai.Expressions.UnitBuilder.html",
    "title": "Class UnitBuilder",
    "keywords": "Class UnitBuilder Represents an expression builder that generates a sequence of elements. Inheritance Object ExpressionBuilder UnitBuilder Implements IExpressionBuilder Inherited Members ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Source)] public class UnitBuilder : ExpressionBuilder, IExpressionBuilder Remarks This expression builder generates its elements by either returning the single default instance if no input sequence is provided; or applying a selector on the elements of the source sequence that will convert each input element into the default instance. Properties ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides ExpressionBuilder.ArgumentRange Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.UnknownTypeBuilder.html": {
    "href": "api/Bonsai.Expressions.UnknownTypeBuilder.html",
    "title": "Class UnknownTypeBuilder",
    "keywords": "Class UnknownTypeBuilder Represents an expression builder that is a proxy for an unknown type. Inheritance Object ExpressionBuilder UnknownTypeBuilder Implements IExpressionBuilder Inherited Members ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public abstract class UnknownTypeBuilder : ExpressionBuilder, IExpressionBuilder Properties ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides ExpressionBuilder.ArgumentRange PropertiesXml Gets or sets the XML representation of externalized property values from the unknown type. Declaration [Browsable(false)] public XElement[] PropertiesXml { get; set; } Property Value Type Description XElement [] Methods Build(IEnumerable<Expression>) Throws a NotImplementedException by design in order to indicate the current builder is a proxy for an unknown type. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression This method never returns. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Exceptions Type Condition NotImplementedException This method always throws this exception, by design. Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.VariableArgumentExpressionBuilder.html": {
    "href": "api/Bonsai.Expressions.VariableArgumentExpressionBuilder.html",
    "title": "Class VariableArgumentExpressionBuilder",
    "keywords": "Class VariableArgumentExpressionBuilder Provides a base class for expression builders that can have a variable number of input arguments. This is an abstract class. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder CombinatorExpressionBuilder IncludeWorkflowBuilder SubjectExpressionBuilder Implements IExpressionBuilder Inherited Members ExpressionBuilder.Build(IEnumerable<Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public abstract class VariableArgumentExpressionBuilder : ExpressionBuilder, IExpressionBuilder Constructors VariableArgumentExpressionBuilder(Int32, Int32) Initializes a new instance of the VariableArgumentExpressionBuilder class with the specified argument range. Declaration protected VariableArgumentExpressionBuilder(int minArguments, int maxArguments) Parameters Type Name Description Int32 minArguments The inclusive lower bound of the argument range. Int32 maxArguments The inclusive upper bound of the argument range. Properties ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides ExpressionBuilder.ArgumentRange Methods SetArgumentRange(Int32, Int32) Updates the argument range of the expression builder. Declaration protected void SetArgumentRange(int minArguments, int maxArguments) Parameters Type Name Description Int32 minArguments The inclusive lower bound of the argument range. Int32 maxArguments The inclusive upper bound of the argument range. Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.VisualizerBuilder.html": {
    "href": "api/Bonsai.Expressions.VisualizerBuilder.html",
    "title": "Class VisualizerBuilder",
    "keywords": "Class VisualizerBuilder Represents an expression builder that uses the encapsulated workflow as a visualizer to an observable sequence without modifying its elements. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder SingleArgumentWorkflowExpressionBuilder SinkBuilder VisualizerBuilder Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members SinkBuilder.Build(IEnumerable<Expression>) SingleArgumentWorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Sink)] public class VisualizerBuilder : SinkBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder, IRequireBuildContext Constructors VisualizerBuilder() Initializes a new instance of the VisualizerBuilder class. Declaration public VisualizerBuilder() VisualizerBuilder(ExpressionBuilderGraph) Initializes a new instance of the VisualizerBuilder class with the specified expression builder workflow. Declaration public VisualizerBuilder(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.WindowBuilder.html": {
    "href": "api/Bonsai.Expressions.WindowBuilder.html",
    "title": "Class WindowBuilder",
    "keywords": "Class WindowBuilder Represents an expression builder that projects the input sequence into zero or more windows with boundaries defined by the encapsulated workflow. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder WindowBuilder Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class WindowBuilder : WorkflowExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder, IRequireBuildContext Constructors WindowBuilder() Initializes a new instance of the WindowBuilder class. Declaration public WindowBuilder() WindowBuilder(ExpressionBuilderGraph) Initializes a new instance of the WindowBuilder class with the specified expression builder workflow. Declaration public WindowBuilder(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Properties ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides WorkflowExpressionBuilder.ArgumentRange Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.WorkflowExpressionBuilder.html": {
    "href": "api/Bonsai.Expressions.WorkflowExpressionBuilder.html",
    "title": "Class WorkflowExpressionBuilder",
    "keywords": "Class WorkflowExpressionBuilder Provides a base class for expression builders that generate their output by means of an encapsulated workflow. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder CreateAsyncBuilder CreateObservableBuilder DeferBuilder GroupWorkflowBuilder NestedWorkflowBuilder ScanBuilder SingleArgumentWorkflowExpressionBuilder WindowBuilder Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members ExpressionBuilder.Build(IEnumerable<Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Combinator)] public abstract class WorkflowExpressionBuilder : ExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder, IRequireBuildContext Constructors WorkflowExpressionBuilder() Initializes a new instance of the WorkflowExpressionBuilder class. Declaration protected WorkflowExpressionBuilder() WorkflowExpressionBuilder(ExpressionBuilderGraph) Initializes a new instance of the WorkflowExpressionBuilder class with the specified expression builder workflow. Declaration protected WorkflowExpressionBuilder(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Properties ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides ExpressionBuilder.ArgumentRange Description Gets or sets a description for the encapsulated workflow. Declaration [Externalizable(false)] public string Description { get; set; } Property Value Type Description String Name Gets or sets the name of the encapsulated workflow. Declaration [Externalizable(false)] public string Name { get; set; } Property Value Type Description String Workflow Gets the expression builder workflow that will be used to generate the output expression tree. Declaration [Browsable(false)] public ExpressionBuilderGraph Workflow { get; } Property Value Type Description ExpressionBuilderGraph WorkflowDescriptor Gets the XML serializable representation of the encapsulated workflow. Declaration [Browsable(false)] public ExpressionBuilderGraphDescriptor WorkflowDescriptor { get; set; } Property Value Type Description ExpressionBuilderGraphDescriptor Methods BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) Builds the output of the encapsulated workflow for the specified source and applies a selector taking into account any available workflow mappings. Declaration protected Expression BuildWorkflow(IEnumerable<Expression> arguments, Expression source, Func<Expression, Expression> selector) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Expression source The expression tree that will be used as input to the encapsulated workflow. Func < Expression , Expression > selector A selector that will be applied to the output of the encapsulated workflow to determine the final output of the expression builder. Returns Type Description Expression An Expression tree that is the result of applying the encapsulated workflow to the specified input source . Property mappings are also resolved in the correct sequence. Explicit Interface Implementations INamedElement.Name Declaration string INamedElement.Name { get; } Returns Type Description String Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.WorkflowInputBuilder.html": {
    "href": "api/Bonsai.Expressions.WorkflowInputBuilder.html",
    "title": "Class WorkflowInputBuilder",
    "keywords": "Class WorkflowInputBuilder Represents the expression that is used as the input source of an encapsulated workflow. Inheritance Object ExpressionBuilder ZeroArgumentExpressionBuilder WorkflowInputBuilder WorkflowInputBuilder<TSource> Implements IExpressionBuilder INamedElement Inherited Members ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Source)] public class WorkflowInputBuilder : ZeroArgumentExpressionBuilder, IExpressionBuilder, INamedElement Properties Index Gets or sets the zero-based index of the input parameter. Declaration [Browsable(false)] public int Index { get; set; } Property Value Type Description Int32 Name Gets or sets the name of the input parameter. Arbitrary named arguments are not supported, so all names must start with the ArgumentNamePrefix followed by the one-based argument index. Declaration [Browsable(false)] public string Name { get; set; } Property Value Type Description String Methods Build(IEnumerable<Expression>) Returns the source input expression specified in Bonsai.Expressions.WorkflowInputBuilder.Source . Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments Returns Type Description Expression A collection of Expression nodes that represents the input arguments. An Expression that will be used as the source of an encapsulated workflow. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.WorkflowInputBuilder-1.html": {
    "href": "api/Bonsai.Expressions.WorkflowInputBuilder-1.html",
    "title": "Class WorkflowInputBuilder<TSource>",
    "keywords": "Class WorkflowInputBuilder<TSource> Inheritance Object ExpressionBuilder ZeroArgumentExpressionBuilder WorkflowInputBuilder WorkflowInputBuilder<TSource> Implements IExpressionBuilder INamedElement Inherited Members WorkflowInputBuilder.Index WorkflowInputBuilder.Name ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementIcon(typeof(WorkflowInputBuilder), \"WorkflowInputBuilder\")] public class WorkflowInputBuilder<TSource> : WorkflowInputBuilder, IExpressionBuilder, INamedElement Type Parameters Name Description TSource Methods Build(IEnumerable<Expression>) Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments Returns Type Description Expression Overrides WorkflowInputBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.WorkflowOutputBuilder.html": {
    "href": "api/Bonsai.Expressions.WorkflowOutputBuilder.html",
    "title": "Class WorkflowOutputBuilder",
    "keywords": "Class WorkflowOutputBuilder Represents the expression that is used as the output of an encapsulated workflow. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder WorkflowOutputBuilder Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Sink)] public class WorkflowOutputBuilder : SingleArgumentExpressionBuilder, IExpressionBuilder Methods Build(IEnumerable<Expression>) Returns the single output expression specified in arguments . Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments Returns Type Description Expression A collection of Expression nodes that represents the input arguments. An Expression that will be used as the output of an encapsulated workflow. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.WorkflowProperty.html": {
    "href": "api/Bonsai.Expressions.WorkflowProperty.html",
    "title": "Class WorkflowProperty",
    "keywords": "Class WorkflowProperty Represents a workflow property. Inheritance Object WorkflowProperty ByteProperty DateTimeOffsetProperty DoubleProperty FloatProperty Int64Property IntProperty TimeSpanProperty WorkflowProperty<TValue> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [Source] [Combinator(MethodName = \"Generate\")] [WorkflowElementCategory(ElementCategory.Source)] public abstract class WorkflowProperty"
  },
  "api/Bonsai.Expressions.WorkflowProperty-1.html": {
    "href": "api/Bonsai.Expressions.WorkflowProperty-1.html",
    "title": "Class WorkflowProperty<TValue>",
    "keywords": "Class WorkflowProperty<TValue> Represents a strongly typed workflow property. Inheritance Object WorkflowProperty WorkflowProperty<TValue> BooleanProperty DateTimeProperty StringProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class WorkflowProperty<TValue> : WorkflowProperty Type Parameters Name Description TValue The type of the property value. Properties Value Gets or sets the value of the property. Declaration public TValue Value { get; set; } Property Value Type Description TValue Methods Generate() Generates an observable sequence that produces a value whenever the workflow property changes, starting with the initial property value. Declaration public virtual IObservable<TValue> Generate() Returns Type Description IObservable <TValue> An observable sequence of property values. Generate<TSource>(IObservable<TSource>) Generates an observable sequence that produces a value whenever the source sequence emits a new element. Declaration public IObservable<TValue> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence used to generate new values. Returns Type Description IObservable <TValue> An observable sequence of property values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Expressions.XorBuilder.html": {
    "href": "api/Bonsai.Expressions.XorBuilder.html",
    "title": "Class XorBuilder",
    "keywords": "Class XorBuilder Represents an expression builder that applies a bitwise XOR operation on paired elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder XorBuilder Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class XorBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ISerializableElement Methods BuildSelector(Expression, Expression) Returns the expression that applies a bitwise XOR operation to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies a bitwise XOR operation to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.ZeroArgumentExpressionBuilder.html": {
    "href": "api/Bonsai.Expressions.ZeroArgumentExpressionBuilder.html",
    "title": "Class ZeroArgumentExpressionBuilder",
    "keywords": "Class ZeroArgumentExpressionBuilder Provides a base class for expression builders that require zero input arguments. This is an abstract class. Inheritance Object ExpressionBuilder ZeroArgumentExpressionBuilder ExternalizedMappingBuilder SubscribeSubjectBuilder WorkflowInputBuilder Implements IExpressionBuilder Inherited Members ExpressionBuilder.Build(IEnumerable<Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public abstract class ZeroArgumentExpressionBuilder : ExpressionBuilder, IExpressionBuilder Properties ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides ExpressionBuilder.ArgumentRange Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.ExternalizableAttribute.html": {
    "href": "api/Bonsai.ExternalizableAttribute.html",
    "title": "Class ExternalizableAttribute",
    "keywords": "Class ExternalizableAttribute Specifies whether a property is allowed to be explicitly externalized on a workflow editor. Inheritance Object Attribute ExternalizableAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class ExternalizableAttribute : Attribute, _Attribute Constructors ExternalizableAttribute(Boolean) Initializes a new instance of the ExternalizableAttribute class. Declaration public ExternalizableAttribute(bool externalizable) Parameters Type Name Description Boolean externalizable true if the property can be explicitly externalized on a workflow editor; otherwise, false . The default is true . Fields Default Specifies the default value for the ExternalizableAttribute which is set to allow a property to be explicitly externalized on a workflow editor. Declaration public static readonly ExternalizableAttribute Default Field Value Type Description ExternalizableAttribute Properties Externalizable Gets a value indicating whether a property is externalizable. Declaration public bool Externalizable { get; } Property Value Type Description Boolean Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.FileNameFilterAttribute.html": {
    "href": "api/Bonsai.FileNameFilterAttribute.html",
    "title": "Class FileNameFilterAttribute",
    "keywords": "Class FileNameFilterAttribute Specifies the file name filter which determines the choices that appear in the file type selection box of a file dialog. Inheritance Object Attribute FileNameFilterAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class FileNameFilterAttribute : Attribute, _Attribute Constructors FileNameFilterAttribute(String) Initializes a new instance of the FileNameFilterAttribute class with the specified file name filter. Declaration public FileNameFilterAttribute(string filter) Parameters Type Name Description String filter The file name filter string which determines the choices that appear in the file type selection box of a file dialog. Properties Filter Gets the file name filter string used to determine the choices in the file type selection box of a file dialog. Declaration public string Filter { get; } Property Value Type Description String Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.HighResolutionScheduler.html": {
    "href": "api/Bonsai.HighResolutionScheduler.html",
    "title": "Class HighResolutionScheduler",
    "keywords": "Class HighResolutionScheduler Provides a set of static properties to access schedulers that use the Stopwatch class for generating timestamps. Inheritance Object HighResolutionScheduler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public static class HighResolutionScheduler Properties Default Gets a scheduler that schedules work on the platform's default scheduler but provides high resolution timestamps. Declaration public static IScheduler Default { get; } Property Value Type Description IScheduler Now Gets the current time according to the timer used by the Stopwatch class. Declaration public static DateTimeOffset Now { get; } Property Value Type Description DateTimeOffset"
  },
  "api/Bonsai.html": {
    "href": "api/Bonsai.html",
    "title": "Namespace Bonsai",
    "keywords": "Namespace Bonsai Classes ArrayConvert Provides methods for converting between instances of the Array class and String . BinaryCombinator Represents a generic operation on two observable sequences where the elements of the first sequence are propagated based on notifications from the second sequence. Combinator Represents a generic operation on observable sequences that preserves the sequence element type. Combinator<TResult> Represents a generic operation on observable sequences that returns another sequence of the specified element type. Combinator<TSource, TResult> Represents an operation on observable sequences of a specific element type. CombinatorAttribute Specifies that a class provides a method that can combine one or more observable sequences into a new observable sequence. DesignTypes Provides assembly qualified names for well-known designer types. ExpressionHelper Provides a set of static methods to manipulate expression trees. ExternalizableAttribute Specifies whether a property is allowed to be explicitly externalized on a workflow editor. FileNameFilterAttribute Specifies the file name filter which determines the choices that appear in the file type selection box of a file dialog. HighResolutionScheduler Provides a set of static properties to access schedulers that use the Stopwatch class for generating timestamps. MultidimensionalArrayConverter Provides a type converter to convert two-dimensional Array objects to and from various other representations. NumericRecordConverter Provides a type converter to convert numeric records to and from various other representations. NumericRecordConverter.PropertyDescriptorWrapper Represents a class used for providing custom property metadata for an object. ObservableCombinators Provides a set of static methods to aid in writing queries over observable sequences. PrecisionAttribute Specifies the number of decimal places and the smallest incremental step that should be used when editing values for a property. Range Provides static methods for creating range objects. Range<TValue> Represents a range of values defined by an inclusive lower and upper bounds. RangeAttribute Specifies the valid range of values for a numeric property. Sink Represents a generic operation which introduces side effects on an observable sequence without modifying its elements. Sink<TSource> Represents an operation which introduces side effects on observable sequences of a specific type without modifying its elements. Source<TSource> Represents a generator of observable sequences of data elements. SourceAttribute Specifies that a class provides a parameterless method that can generate observable sequences. Transform<TSource, TResult> Represents an operation on observable sequences which transforms every element of the source sequence into an element in the result sequence. TypeVisualizerAttribute Determines the type of visualizer used to display the target of the attribute. UnidimensionalArrayConverter Provides a type converter to convert one-dimensional Array objects to and from various other representations. WindowCombinator Represents a generic operation which projects each element of an observable sequence into a sequence of windows. WorkflowBuilder Represents an XML serializable expression builder workflow container. WorkflowBuildException Represents errors that occur during the build phase of an expression builder workflow. WorkflowElementCategoryAttribute Determines the category of the workflow element this attribute is bound to. WorkflowElementIconAttribute Specifies the icon that should represent the element this attribute is bound to when drawing the workflow. WorkflowException Represents errors that occur in expression builder workflows. WorkflowMetadata Represents metadata retrieved from a serializable XML workflow. WorkflowNamespaceIconAttribute Specifies the icon that should represent a given namespace in the assembly this attribute is bound to when drawing the workflow. WorkflowRuntimeException Represents errors that occur during the execution of an expression builder workflow. XmlNamespacePrefixAttribute Specifies a recommended prefix to associate with a XML namespace identifier when serializing a workflow file. Interfaces INamedElement Represents workflow elements that have a name. Enums ElementCategory Specifies the category of a workflow element."
  },
  "api/Bonsai.INamedElement.html": {
    "href": "api/Bonsai.INamedElement.html",
    "title": "Interface INamedElement",
    "keywords": "Interface INamedElement Represents workflow elements that have a name. Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public interface INamedElement Properties Name Gets the name of the element. Declaration string Name { get; } Property Value Type Description String"
  },
  "api/Bonsai.IO.BaudRateConverter.html": {
    "href": "api/Bonsai.IO.BaudRateConverter.html",
    "title": "Class BaudRateConverter",
    "keywords": "Class BaudRateConverter Provides a type converter to convert serial baud rates to and from other representations. Inheritance Object TypeConverter BaseNumberConverter Int32Converter BaudRateConverter Inherited Members BaseNumberConverter.CanConvertFrom(ITypeDescriptorContext, Type) BaseNumberConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) BaseNumberConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) BaseNumberConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.ConvertFrom(Object) TypeConverter.ConvertFromInvariantString(String) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(String) TypeConverter.ConvertFromString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String) TypeConverter.ConvertTo(Object, Type) TypeConverter.ConvertToInvariantString(Object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(Object) TypeConverter.ConvertToString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(Object) TypeConverter.GetConvertToException(Object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[]) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.IsValid(Object) TypeConverter.IsValid(ITypeDescriptorContext, Object) TypeConverter.SortProperties(PropertyDescriptorCollection, String[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class BaudRateConverter : Int32Converter Methods GetStandardValues(ITypeDescriptorContext) Returns a collection of standard serial baud rates. Declaration public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description TypeConverter.StandardValuesCollection A TypeConverter.StandardValuesCollection containing a set of standard serial baud rates. Overrides TypeConverter.GetStandardValues(ITypeDescriptorContext) GetStandardValuesSupported(ITypeDescriptorContext) Declaration public override bool GetStandardValuesSupported(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description Boolean Overrides TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext)"
  },
  "api/Bonsai.IO.CreateSerialPort.html": {
    "href": "api/Bonsai.IO.CreateSerialPort.html",
    "title": "Class CreateSerialPort",
    "keywords": "Class CreateSerialPort Represents an operator that creates and configures a connection to a system serial port. Inheritance Object Source < SerialPort > CreateSerialPort Implements INamedElement Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class CreateSerialPort : Source<SerialPort>, INamedElement Properties BaudRate Gets or sets the serial baud rate. Declaration [TypeConverter(typeof(BaudRateConverter))] public int BaudRate { get; set; } Property Value Type Description Int32 DataBits Gets or sets the number of data bits per byte. Declaration public int DataBits { get; set; } Property Value Type Description Int32 DiscardNull Gets or sets a value indicating whether null bytes are ignored when transmitted between the port and the receive buffer. Declaration public bool DiscardNull { get; set; } Property Value Type Description Boolean DtrEnable Gets or sets a value indicating whether the Data Terminal Ready (DTR) signal should be enabled during serial communication. Declaration public bool DtrEnable { get; set; } Property Value Type Description Boolean Encoding Gets or sets the byte encoding used for pre- and post-transmission conversion of text. Declaration [TypeConverter(typeof(SerialPortEncodingConverter))] public string Encoding { get; set; } Property Value Type Description String Handshake Gets or sets the handshaking protocol for serial port transmission of data. Declaration public Handshake Handshake { get; set; } Property Value Type Description Handshake Name Gets or sets the optional alias for the serial port connection. Declaration public string Name { get; set; } Property Value Type Description String Parity Gets or sets the parity bit for the SerialPort object. Declaration public Parity Parity { get; set; } Property Value Type Description Parity ParityReplace Gets or sets the byte that replaces invalid bytes in the data stream when a parity error occurs. Declaration public byte ParityReplace { get; set; } Property Value Type Description Byte PortName Gets or sets the name of the serial port. Declaration [TypeConverter(typeof(SerialPortNameConverter))] public string PortName { get; set; } Property Value Type Description String ReadBufferSize Gets or sets the size of the read buffer, in bytes. This is the maximum number of read bytes which can be buffered. Declaration public int ReadBufferSize { get; set; } Property Value Type Description Int32 ReceivedBytesThreshold Gets or sets the number of bytes received into the internal input buffer before the read event is fired. Declaration public int ReceivedBytesThreshold { get; set; } Property Value Type Description Int32 RtsEnable Gets or sets a value indicating whether the Request to Send (RTS) signal should be enabled during serial communication. Declaration public bool RtsEnable { get; set; } Property Value Type Description Boolean StopBits Gets or sets the number of stop bits per byte. Declaration public StopBits StopBits { get; set; } Property Value Type Description StopBits WriteBufferSize Gets or sets the size of the write buffer, in bytes. This is the maximum number of bytes which can be queued for write. Declaration public int WriteBufferSize { get; set; } Property Value Type Description Int32 Methods Generate() Generates an observable sequence that contains the serial port connection object. Declaration public override IObservable<SerialPort> Generate() Returns Type Description IObservable < SerialPort > A sequence containing a single instance of the SerialPort class representing the serial connection. Overrides Bonsai.Source<System.IO.Ports.SerialPort>.Generate() Implements INamedElement"
  },
  "api/Bonsai.IO.CsvReader.html": {
    "href": "api/Bonsai.IO.CsvReader.html",
    "title": "Class CsvReader",
    "keywords": "Class CsvReader Represents an operator that generates a sequence of values for every line in a text file. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder CombinatorExpressionBuilder CsvReader Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members CombinatorExpressionBuilder.Build(IEnumerable<Expression>) VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax [WorkflowElementCategory(ElementCategory.Source)] public class CsvReader : CombinatorExpressionBuilder, IPropertyMappingBuilder, IExpressionBuilder Constructors CsvReader() Initializes a new instance of the CsvReader class. Declaration public CsvReader() Properties FileName Gets or sets the name of the CSV file. Declaration [FileNameFilter(\"CSV (Comma delimited)|*.csv|All Files|*.*\")] public string FileName { get; set; } Property Value Type Description String ListSeparator Gets or sets the separator used to delimit elements in variable length rows. This argument is optional. Declaration public string ListSeparator { get; set; } Property Value Type Description String ScanPattern Gets or sets the optional parse pattern for scanning individual lines. In case of variable length rows, the pattern will be applied to each individual element. Declaration [TypeConverter(\"Bonsai.Expressions.ParseBuilder+PatternConverter, Bonsai.Core\")] public string ScanPattern { get; set; } Property Value Type Description String SkipRows Gets or sets the number of lines to skip at the start of the file. Declaration public int SkipRows { get; set; } Property Value Type Description Int32 Methods BuildCombinator(IEnumerable<Expression>) Declaration protected override Expression BuildCombinator(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments Returns Type Description Expression Overrides CombinatorExpressionBuilder.BuildCombinator(IEnumerable<Expression>) Implements IPropertyMappingBuilder IExpressionBuilder"
  },
  "api/Bonsai.IO.CsvWriter.html": {
    "href": "api/Bonsai.IO.CsvWriter.html",
    "title": "Class CsvWriter",
    "keywords": "Class CsvWriter Represents an operator that writes a delimited text representation of each element of the sequence to a text file. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder CombinatorExpressionBuilder CsvWriter Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members CombinatorExpressionBuilder.Build(IEnumerable<Expression>) VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax [WorkflowElementCategory(ElementCategory.Sink)] public class CsvWriter : CombinatorExpressionBuilder, IPropertyMappingBuilder, IExpressionBuilder Constructors CsvWriter() Initializes a new instance of the CsvWriter class. Declaration public CsvWriter() Properties Append Gets or sets a value indicating whether data should be appended to the output file if it already exists. Declaration public bool Append { get; set; } Property Value Type Description Boolean Delimiter Gets or sets the optional delimiter used to separate columns in the output file. Declaration public string Delimiter { get; set; } Property Value Type Description String FileName Gets or sets the name of the output CSV file. Declaration [FileNameFilter(\"CSV (Comma delimited)|*.csv|All Files|*.*\")] public string FileName { get; set; } Property Value Type Description String IncludeHeader Gets or sets a value indicating whether to include a text header with column names for multi-attribute values. Declaration public bool IncludeHeader { get; set; } Property Value Type Description Boolean ListSeparator Gets or sets the separator used to delimit elements in variable length rows. This argument is optional. Declaration public string ListSeparator { get; set; } Property Value Type Description String Overwrite Gets or sets a value indicating whether the output file should be overwritten if it already exists. Declaration public bool Overwrite { get; set; } Property Value Type Description Boolean Selector Gets or sets the inner properties that will be selected when writing each element of the sequence. Declaration public string Selector { get; set; } Property Value Type Description String Suffix Gets or sets the suffix used to generate file names. Declaration public PathSuffix Suffix { get; set; } Property Value Type Description PathSuffix Methods BuildCombinator(IEnumerable<Expression>) Declaration protected override Expression BuildCombinator(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments Returns Type Description Expression Overrides CombinatorExpressionBuilder.BuildCombinator(IEnumerable<Expression>) Implements IPropertyMappingBuilder IExpressionBuilder"
  },
  "api/Bonsai.IO.EnumerateDirectories.html": {
    "href": "api/Bonsai.IO.EnumerateDirectories.html",
    "title": "Class EnumerateDirectories",
    "keywords": "Class EnumerateDirectories Represents an operator that generates a sequence of directory names matching the specified search pattern. Inheritance Object Source < String > EnumerateDirectories Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class EnumerateDirectories : Source<string> Properties Path Gets or sets the relative or absolute path of the directory to search. Declaration public string Path { get; set; } Property Value Type Description String SearchOption Gets or sets a value specifying whether the search should include only the current directory or all subdirectories. Declaration public SearchOption SearchOption { get; set; } Property Value Type Description SearchOption SearchPattern Gets or sets the search string used to match against the names of subdirectories in the path. This parameter can contain a combination of valid literal path and wildcard characters (see EnumerateDirectories(String, String, SearchOption) ). Declaration public string SearchPattern { get; set; } Property Value Type Description String Methods Generate() Generates an observable sequence of directory names that match the search pattern in a specified path, and optionally searches subdirectories. Declaration public override IObservable<string> Generate() Returns Type Description IObservable < String > An observable sequence containing the full names (including paths) for the directories in Path that match the specified SearchPattern and SearchOption . Overrides Bonsai.Source<System.String>.Generate()"
  },
  "api/Bonsai.IO.EnumerateFiles.html": {
    "href": "api/Bonsai.IO.EnumerateFiles.html",
    "title": "Class EnumerateFiles",
    "keywords": "Class EnumerateFiles Represents an operator that generates a sequence of file names matching the specified search pattern. Inheritance Object Source < String > EnumerateFiles Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class EnumerateFiles : Source<string> Properties Path Gets or sets the relative or absolute path of the directory to search. Declaration public string Path { get; set; } Property Value Type Description String SearchOption Gets or sets a value specifying whether the search should include only the current directory or all subdirectories. Declaration public SearchOption SearchOption { get; set; } Property Value Type Description SearchOption SearchPattern Gets or sets the search string used to match against the names of files in the path. This parameter can contain a combination of valid literal path and wildcard characters (see EnumerateFiles(String, String, SearchOption) ). Declaration public string SearchPattern { get; set; } Property Value Type Description String Methods Generate() Generates an observable sequence of file names that match the search pattern in a specified path, and optionally searches subdirectories. Declaration public override IObservable<string> Generate() Returns Type Description IObservable < String > An observable sequence containing the full names (including paths) for the files in Path that match the specified SearchPattern and SearchOption . Overrides Bonsai.Source<System.String>.Generate()"
  },
  "api/Bonsai.IO.EnumerateFileSystemEntries.html": {
    "href": "api/Bonsai.IO.EnumerateFileSystemEntries.html",
    "title": "Class EnumerateFileSystemEntries",
    "keywords": "Class EnumerateFileSystemEntries Represents an operator that generates a sequence of file names and directory names matching the specified search pattern. Inheritance Object Source < String > EnumerateFileSystemEntries Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class EnumerateFileSystemEntries : Source<string> Properties Path Gets or sets the relative or absolute path of the directory to search. Declaration public string Path { get; set; } Property Value Type Description String SearchOption Gets or sets a value specifying whether the search should include only the current directory or all subdirectories. Declaration public SearchOption SearchOption { get; set; } Property Value Type Description SearchOption SearchPattern Gets or sets the search string used to match against the names of file-system entries in the path. This parameter can contain a combination of valid literal path and wildcard characters (see EnumerateFileSystemEntries(String, String, SearchOption) ). Declaration public string SearchPattern { get; set; } Property Value Type Description String Methods Generate() Generates an observable sequence of file names and directory names that match the search pattern in a specified path, and optionally searches subdirectories. Declaration public override IObservable<string> Generate() Returns Type Description IObservable < String > An observable sequence containing the full names (including paths) for the file-system entries in Path that match the specified SearchPattern and SearchOption . Overrides Bonsai.Source<System.String>.Generate()"
  },
  "api/Bonsai.IO.FileSink.html": {
    "href": "api/Bonsai.IO.FileSink.html",
    "title": "Class FileSink",
    "keywords": "Class FileSink Provides a non-generic base class for sinks that write the elements from the input sequence into a file. Inheritance Object FileSink FileSink <TSource, TWriter> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Sink)] public abstract class FileSink Constructors FileSink() Initializes a new instance of the FileSink<TSource, TWriter> class. Declaration protected FileSink() Properties Buffered Gets or sets a value indicating whether element writing should be buffered. If true , the write commands will be queued in memory as fast as possible and will be processed by the writer in a different thread. Otherwise, writing will be done in the same thread in which notifications arrive. Declaration public bool Buffered { get; set; } Property Value Type Description Boolean FileName Gets or sets the name of the file on which to write the elements. Declaration public string FileName { get; set; } Property Value Type Description String Overwrite Gets or sets a value indicating whether to overwrite the output file if it already exists. Declaration public bool Overwrite { get; set; } Property Value Type Description Boolean Suffix Gets or sets the suffix used to generate file names. Declaration public PathSuffix Suffix { get; set; } Property Value Type Description PathSuffix"
  },
  "api/Bonsai.IO.FileSink-2.html": {
    "href": "api/Bonsai.IO.FileSink-2.html",
    "title": "Class FileSink<TSource, TWriter>",
    "keywords": "Class FileSink<TSource, TWriter> Provides a base class for sinks that write the elements from the input sequence into a file. Inheritance Object FileSink FileSink<TSource, TWriter> AudioWriter Inherited Members FileSink.FileName FileSink.Suffix FileSink.Buffered FileSink.Overwrite Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public abstract class FileSink<TSource, TWriter> : FileSink where TWriter : class, IDisposable Type Parameters Name Description TSource The type of the elements in the source sequence. TWriter The type of writer that should be used to write the elements. Methods CreateWriter(String, TSource) When overridden in a derived class, creates the writer over the specified fileName that will be responsible for handling the input elements. Declaration protected abstract TWriter CreateWriter(string fileName, TSource input) Parameters Type Name Description String fileName The name of the file on which the elements should be written. TSource input The first input element that needs to be pushed into the file. Returns Type Description TWriter The writer that will be used to push elements into the file. Process(IObservable<TSource>) Writes all elements of an observable sequence into the specified file. Declaration public virtual IObservable<TSource> Process(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence for which to write elements. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the elements to a file. Process<TElement>(IObservable<TElement>, Func<TElement, TSource>) Writes all elements of an observable sequence into the specified file. Declaration protected IObservable<TElement> Process<TElement>(IObservable<TElement> source, Func<TElement, TSource> selector) Parameters Type Name Description IObservable <TElement> source The source sequence for which to write elements. Func <TElement, TSource> selector The transform function used to convert each element of the sequence into the type of inputs accepted by the file writer. Returns Type Description IObservable <TElement> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the elements to a file. Type Parameters Name Description TElement Write(TWriter, TSource) When overridden in a derived class, writes a new element into the specified writer. Declaration protected abstract void Write(TWriter writer, TSource input) Parameters Type Name Description TWriter writer The writer that is used to push elements into the file. TSource input The input element that should be pushed into the file."
  },
  "api/Bonsai.IO.GetDirectories.html": {
    "href": "api/Bonsai.IO.GetDirectories.html",
    "title": "Class GetDirectories",
    "keywords": "Class GetDirectories Represents an operator that generates a sequence containing an array with the names of the subdirectories matching the specified search pattern. Inheritance Object Source < String []> GetDirectories Inherited Members Source<String[]>.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class GetDirectories : Source<string[]> Properties Path Gets or sets the relative or absolute path of the directory to search. Declaration public string Path { get; set; } Property Value Type Description String SearchOption Gets or sets a value specifying whether the search should include only the current directory or all subdirectories. Declaration public SearchOption SearchOption { get; set; } Property Value Type Description SearchOption SearchPattern Gets or sets the search string used to match against the names of subdirectories in the path. This parameter can contain a combination of valid literal path and wildcard characters (see GetDirectories(String, String, SearchOption) ). Declaration public string SearchPattern { get; set; } Property Value Type Description String Methods Generate() Generates an observable sequence containing an array of directory names that match the search pattern in a specified path, and optionally searches subdirectories. Declaration public override IObservable<string[]> Generate() Returns Type Description IObservable < String []> An observable sequence containing an array with the full names (including paths) for the directories in Path that match the specified SearchPattern and SearchOption . Overrides Bonsai.Source<System.String[]>.Generate()"
  },
  "api/Bonsai.IO.GetDirectoryName.html": {
    "href": "api/Bonsai.IO.GetDirectoryName.html",
    "title": "Class GetDirectoryName",
    "keywords": "Class GetDirectoryName Represents an operator that returns the directory information for each path string in the sequence. Inheritance Object Combinator < String , String > Transform < String , String > GetDirectoryName Inherited Members Combinator<String, String>.Process(IObservable<String>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class GetDirectoryName : Transform<string, string> Methods Process(IObservable<String>) Returns the directory information for each path string in an observable sequence. Declaration public override IObservable<string> Process(IObservable<string> source) Parameters Type Name Description IObservable < String > source A sequence of String values representing the path to a file or directory. Returns Type Description IObservable < String > A sequence of String values representing directory information for each path in the original sequence, or null (see GetDirectoryName(String) ). Overrides Bonsai.Combinator<System.String, System.String>.Process(System.IObservable<System.String>)"
  },
  "api/Bonsai.IO.GetExtension.html": {
    "href": "api/Bonsai.IO.GetExtension.html",
    "title": "Class GetExtension",
    "keywords": "Class GetExtension Represents an operator that returns the extension of each path string in the sequence. Inheritance Object Combinator < String , String > Transform < String , String > GetExtension Inherited Members Combinator<String, String>.Process(IObservable<String>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class GetExtension : Transform<string, string> Methods Process(IObservable<String>) Returns the extension of each path string in an observable sequence. Declaration public override IObservable<string> Process(IObservable<string> source) Parameters Type Name Description IObservable < String > source A sequence of String values from which to get the extension. Returns Type Description IObservable < String > A sequence of String values representing the extension of each path in the original sequence, or null (see GetExtension(String) ). Overrides Bonsai.Combinator<System.String, System.String>.Process(System.IObservable<System.String>)"
  },
  "api/Bonsai.IO.GetFileName.html": {
    "href": "api/Bonsai.IO.GetFileName.html",
    "title": "Class GetFileName",
    "keywords": "Class GetFileName Represents an operator that returns the file name and extension of each path string in the sequence. Inheritance Object Combinator < String , String > Transform < String , String > GetFileName Inherited Members Combinator<String, String>.Process(IObservable<String>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class GetFileName : Transform<string, string> Methods Process(IObservable<String>) Returns the file name and extension of each path string in an observable sequence. Declaration public override IObservable<string> Process(IObservable<string> source) Parameters Type Name Description IObservable < String > source A sequence of String values from which to obtain the file name and extension. Returns Type Description IObservable < String > A sequence of String values containing the characters after the last directory character of each path in the original sequence (see GetExtension(String) ). Overrides Bonsai.Combinator<System.String, System.String>.Process(System.IObservable<System.String>)"
  },
  "api/Bonsai.IO.GetFileNameWithoutExtension.html": {
    "href": "api/Bonsai.IO.GetFileNameWithoutExtension.html",
    "title": "Class GetFileNameWithoutExtension",
    "keywords": "Class GetFileNameWithoutExtension Represents an operator that returns the file name without the extension for each path string in the sequence. Inheritance Object Combinator < String , String > Transform < String , String > GetFileNameWithoutExtension Inherited Members Combinator<String, String>.Process(IObservable<String>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class GetFileNameWithoutExtension : Transform<string, string> Methods Process(IObservable<String>) Returns the file name without the extension for each path string in an observable sequence. Declaration public override IObservable<string> Process(IObservable<string> source) Parameters Type Name Description IObservable < String > source A sequence of path String values. Returns Type Description IObservable < String > A sequence of String values returned by GetFileName(String) , minus the last period (.) and all characters following it (see GetFileNameWithoutExtension(String) ). Overrides Bonsai.Combinator<System.String, System.String>.Process(System.IObservable<System.String>)"
  },
  "api/Bonsai.IO.GetFiles.html": {
    "href": "api/Bonsai.IO.GetFiles.html",
    "title": "Class GetFiles",
    "keywords": "Class GetFiles Represents an operator that generates a sequence containing an array with the names of the files matching the specified search pattern. Inheritance Object Source < String []> GetFiles Inherited Members Source<String[]>.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class GetFiles : Source<string[]> Properties Path Gets or sets the relative or absolute path of the directory to search. Declaration public string Path { get; set; } Property Value Type Description String SearchOption Gets or sets a value specifying whether the search should include only the current directory or all subdirectories. Declaration public SearchOption SearchOption { get; set; } Property Value Type Description SearchOption SearchPattern Gets or sets the search string used to match against the names of files in the path. This parameter can contain a combination of valid literal path and wildcard characters (see GetFiles(String, String, SearchOption) ). Declaration public string SearchPattern { get; set; } Property Value Type Description String Methods Generate() Generates an observable sequence containing an array of file names that match the search pattern in a specified path, and optionally searches subdirectories. Declaration public override IObservable<string[]> Generate() Returns Type Description IObservable < String []> An observable sequence containing an array with the full names (including paths) for the files in Path that match the specified SearchPattern and SearchOption . Overrides Bonsai.Source<System.String[]>.Generate()"
  },
  "api/Bonsai.IO.GetFileSystemEntries.html": {
    "href": "api/Bonsai.IO.GetFileSystemEntries.html",
    "title": "Class GetFileSystemEntries",
    "keywords": "Class GetFileSystemEntries Represents an operator that generates a sequence containing an array with the names of the files and directories matching the specified search pattern. Inheritance Object Source < String []> GetFileSystemEntries Inherited Members Source<String[]>.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class GetFileSystemEntries : Source<string[]> Properties Path Gets or sets the relative or absolute path of the directory to search. Declaration public string Path { get; set; } Property Value Type Description String SearchOption Gets or sets a value specifying whether the search should include only the current directory or all subdirectories. Declaration public SearchOption SearchOption { get; set; } Property Value Type Description SearchOption SearchPattern Gets or sets the search string used to match against the names of file-system entries in the path. This parameter can contain a combination of valid literal path and wildcard characters (see GetFileSystemEntries(String, String, SearchOption) ). Declaration public string SearchPattern { get; set; } Property Value Type Description String Methods Generate() Generates an observable sequence containing an array of file names and directory names that match the search pattern in a specified path, and optionally searches subdirectories. Declaration public override IObservable<string[]> Generate() Returns Type Description IObservable < String []> An observable sequence containing an array with the full names (including paths) for the file-system entries in Path that match the specified SearchPattern and SearchOption . Overrides Bonsai.Source<System.String[]>.Generate()"
  },
  "api/Bonsai.IO.GetFullPath.html": {
    "href": "api/Bonsai.IO.GetFullPath.html",
    "title": "Class GetFullPath",
    "keywords": "Class GetFullPath Represents an operator that returns the absolute path for each path string in the sequence. Inheritance Object Combinator < String , String > Transform < String , String > GetFullPath Inherited Members Combinator<String, String>.Process(IObservable<String>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class GetFullPath : Transform<string, string> Methods Process(IObservable<String>) Represents an operator that returns the absolute path for each path string in an observable sequence. Declaration public override IObservable<string> Process(IObservable<string> source) Parameters Type Name Description IObservable < String > source A sequence of String values for which to obtain absolute path information. Returns Type Description IObservable < String > A sequence of String values representing the fully qualified location for each path in the original sequence (see GetFullPath(String) ). Overrides Bonsai.Combinator<System.String, System.String>.Process(System.IObservable<System.String>)"
  },
  "api/Bonsai.IO.GetPathRoot.html": {
    "href": "api/Bonsai.IO.GetPathRoot.html",
    "title": "Class GetPathRoot",
    "keywords": "Class GetPathRoot Represents an operator that returns the root directory information of each path string in the sequence. Inheritance Object Combinator < String , String > Transform < String , String > GetPathRoot Inherited Members Combinator<String, String>.Process(IObservable<String>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class GetPathRoot : Transform<string, string> Methods Process(IObservable<String>) Returns the root directory information of each path string in an observable sequence. Declaration public override IObservable<string> Process(IObservable<string> source) Parameters Type Name Description IObservable < String > source A sequence of String values for which to obtain root directory information. Returns Type Description IObservable < String > A sequence of String values representing the root directory for each path in the original sequence (see GetPathRoot(String) ). Overrides Bonsai.Combinator<System.String, System.String>.Process(System.IObservable<System.String>)"
  },
  "api/Bonsai.IO.html": {
    "href": "api/Bonsai.IO.html",
    "title": "Namespace Bonsai.IO",
    "keywords": "Namespace Bonsai.IO Classes BaudRateConverter Provides a type converter to convert serial baud rates to and from other representations. CreateSerialPort Represents an operator that creates and configures a connection to a system serial port. CsvReader Represents an operator that generates a sequence of values for every line in a text file. CsvWriter Represents an operator that writes a delimited text representation of each element of the sequence to a text file. EnumerateDirectories Represents an operator that generates a sequence of directory names matching the specified search pattern. EnumerateFiles Represents an operator that generates a sequence of file names matching the specified search pattern. EnumerateFileSystemEntries Represents an operator that generates a sequence of file names and directory names matching the specified search pattern. FileSink Provides a non-generic base class for sinks that write the elements from the input sequence into a file. FileSink<TSource, TWriter> Provides a base class for sinks that write the elements from the input sequence into a file. GetDirectories Represents an operator that generates a sequence containing an array with the names of the subdirectories matching the specified search pattern. GetDirectoryName Represents an operator that returns the directory information for each path string in the sequence. GetExtension Represents an operator that returns the extension of each path string in the sequence. GetFileName Represents an operator that returns the file name and extension of each path string in the sequence. GetFileNameWithoutExtension Represents an operator that returns the file name without the extension for each path string in the sequence. GetFiles Represents an operator that generates a sequence containing an array with the names of the files matching the specified search pattern. GetFileSystemEntries Represents an operator that generates a sequence containing an array with the names of the files and directories matching the specified search pattern. GetFullPath Represents an operator that returns the absolute path for each path string in the sequence. GetPathRoot Represents an operator that returns the root directory information of each path string in the sequence. PathHelper Provides a set of static methods for creating and manipulating directory and file names. ReadLine Represents an operator that reads lines of characters asynchronously from the input stream. SerialPortConfiguration Represents the set of configuration parameters used to create a new serial port connection. SerialPortNameConverter Provides a type converter to convert serial port names to and from other representations. SerialStringRead Represents an operator that reads lines of characters asynchronously from a serial port. SerialStringWrite Represents an operator that writes the text representation of each element of the sequence to a serial port. StartProcess Represents an operator that starts a new system process with the specified file name and command-line arguments. StreamSink Provides a non-generic base class for sinks that write the elements from the input sequence into a named stream (e.g. a named pipe). StreamSink<TSource, TWriter> Provides a base class for sinks that write the elements from the input sequence into a named stream (e.g. a named pipe). WriteLine Represents an operator that writes the text representation of each element of the sequence to the output stream, followed by the current line terminator. Enums PathSuffix Specifies the known path suffixes that can be appended to a path."
  },
  "api/Bonsai.IO.PathHelper.html": {
    "href": "api/Bonsai.IO.PathHelper.html",
    "title": "Class PathHelper",
    "keywords": "Class PathHelper Provides a set of static methods for creating and manipulating directory and file names. Inheritance Object PathHelper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public static class PathHelper Methods AppendFileCount(String) Appends a file count suffix to a file name without modifying its original extension. Declaration public static string AppendFileCount(string path) Parameters Type Name Description String path The file name on which to append the suffix. Returns Type Description String The new file name where path has been modified to end with the number of files starting with the specified file name in the containing folder but without modifying the file extension. AppendSuffix(String, PathSuffix) Appends the specified well known suffix type to a file name without modifying the extension. Declaration public static string AppendSuffix(string path, PathSuffix suffixType) Parameters Type Name Description String path The file name on which to append the suffix. PathSuffix suffixType The suffix type to append. Returns Type Description String The new file name where path has been modified to end with the specified suffixType but without modifying the file extension. AppendSuffix(String, String) Appends the specified suffix to a file name without modifying its original extension. Declaration public static string AppendSuffix(string path, string suffix) Parameters Type Name Description String path The file name on which to append the suffix. String suffix The suffix to append. Returns Type Description String The new file name where path has been modified to end with suffix but without modifying the file extension. AppendTimestamp(String, DateTimeOffset) Appends a timestamp suffix to a file name without modifying its original extension. Declaration public static string AppendTimestamp(string path, DateTimeOffset timestamp) Parameters Type Name Description String path The file name on which to append the suffix. DateTimeOffset timestamp The timestamp to use for generating the suffix. Returns Type Description String The new file name where path has been modified to end with the round-trip representation of the specified timestamp but without modifying the file extension. EnsureDirectory(String) Checks that all folders along the specified path exist and attempts to create any missing ones. Declaration public static void EnsureDirectory(string path) Parameters Type Name Description String path The path to check for missing folders."
  },
  "api/Bonsai.IO.PathSuffix.html": {
    "href": "api/Bonsai.IO.PathSuffix.html",
    "title": "Enum PathSuffix",
    "keywords": "Enum PathSuffix Specifies the known path suffixes that can be appended to a path. Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public enum PathSuffix Fields Name Description FileCount Specifies that the suffix should be the number of files in the same directory that start with the same file name. None Specifies that no suffix should be appended to the path. Timestamp Specifies that the suffix should be the current timestamp as generated by a high resolution system timer, if available."
  },
  "api/Bonsai.IO.ReadLine.html": {
    "href": "api/Bonsai.IO.ReadLine.html",
    "title": "Class ReadLine",
    "keywords": "Class ReadLine Represents an operator that reads lines of characters asynchronously from the input stream. Inheritance Object Source < String > ReadLine Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class ReadLine : Source<string> Methods Generate() Reads lines of characters asynchronously from the standard input stream. Declaration public override IObservable<string> Generate() Returns Type Description IObservable < String > A sequence of String values representing each of the lines read from the standard input stream, or null if all of the characters have been read. Overrides Bonsai.Source<System.String>.Generate() Generate(IObservable<TextReader>) Reads lines of characters asynchronously from a TextReader object. Declaration public IObservable<string> Generate(IObservable<TextReader> source) Parameters Type Name Description IObservable < TextReader > source A sequence of TextReader objects from which to read lines. Returns Type Description IObservable < String > A sequence of String values representing the lines read from each of the TextReader objects in the original sequence, or null if all of the characters have been read."
  },
  "api/Bonsai.IO.SerialPortConfiguration.html": {
    "href": "api/Bonsai.IO.SerialPortConfiguration.html",
    "title": "Class SerialPortConfiguration",
    "keywords": "Class SerialPortConfiguration Represents the set of configuration parameters used to create a new serial port connection. Inheritance Object SerialPortConfiguration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class SerialPortConfiguration Properties BaudRate Gets or sets the serial baud rate. Declaration [TypeConverter(typeof(BaudRateConverter))] public int BaudRate { get; set; } Property Value Type Description Int32 DataBits Gets or sets the number of data bits per byte. Declaration public int DataBits { get; set; } Property Value Type Description Int32 DiscardNull Gets or sets a value indicating whether null bytes are ignored when transmitted between the port and the receive buffer. Declaration public bool DiscardNull { get; set; } Property Value Type Description Boolean DtrEnable Gets or sets a value indicating whether the Data Terminal Ready (DTR) signal should be enabled during serial communication. Declaration public bool DtrEnable { get; set; } Property Value Type Description Boolean Encoding Gets or sets the byte encoding used for pre- and post-transmission conversion of text. Declaration [TypeConverter(typeof(SerialPortEncodingConverter))] public string Encoding { get; set; } Property Value Type Description String Handshake Gets or sets the handshaking protocol for serial port transmission of data. Declaration public Handshake Handshake { get; set; } Property Value Type Description Handshake Parity Gets or sets the parity bit for the SerialPort object. Declaration public Parity Parity { get; set; } Property Value Type Description Parity ParityReplace Gets or sets the byte that replaces invalid bytes in the data stream when a parity error occurs. Declaration public byte ParityReplace { get; set; } Property Value Type Description Byte PortName Gets or sets the name of the serial port. Declaration [TypeConverter(typeof(SerialPortNameConverter))] public string PortName { get; set; } Property Value Type Description String ReadBufferSize Gets or sets the size of the read buffer, in bytes. This is the maximum number of read bytes which can be buffered. Declaration public int ReadBufferSize { get; set; } Property Value Type Description Int32 ReceivedBytesThreshold Gets or sets the number of bytes received into the internal input buffer before the read event is fired. Declaration public int ReceivedBytesThreshold { get; set; } Property Value Type Description Int32 RtsEnable Gets or sets a value indicating whether the Request to Send (RTS) signal should be enabled during serial communication. Declaration public bool RtsEnable { get; set; } Property Value Type Description Boolean StopBits Gets or sets the number of stop bits per byte. Declaration public StopBits StopBits { get; set; } Property Value Type Description StopBits WriteBufferSize Gets or sets the size of the write buffer, in bytes. This is the maximum number of bytes which can be queued for write. Declaration public int WriteBufferSize { get; set; } Property Value Type Description Int32"
  },
  "api/Bonsai.IO.SerialPortNameConverter.html": {
    "href": "api/Bonsai.IO.SerialPortNameConverter.html",
    "title": "Class SerialPortNameConverter",
    "keywords": "Class SerialPortNameConverter Provides a type converter to convert serial port names to and from other representations. Inheritance Object TypeConverter StringConverter SerialPortNameConverter Inherited Members StringConverter.CanConvertFrom(ITypeDescriptorContext, Type) StringConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.ConvertFrom(Object) TypeConverter.ConvertFromInvariantString(String) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(String) TypeConverter.ConvertFromString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String) TypeConverter.ConvertTo(Object, Type) TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) TypeConverter.ConvertToInvariantString(Object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(Object) TypeConverter.ConvertToString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(Object) TypeConverter.GetConvertToException(Object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[]) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.IsValid(Object) TypeConverter.IsValid(ITypeDescriptorContext, Object) TypeConverter.SortProperties(PropertyDescriptorCollection, String[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class SerialPortNameConverter : StringConverter Methods GetStandardValues(ITypeDescriptorContext) Returns a collection of available serial port names for the current computer. Declaration public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description TypeConverter.StandardValuesCollection A TypeConverter.StandardValuesCollection containing the set of available serial port names for the current computer. Overrides TypeConverter.GetStandardValues(ITypeDescriptorContext) GetStandardValuesSupported(ITypeDescriptorContext) Declaration public override bool GetStandardValuesSupported(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description Boolean Overrides TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext)"
  },
  "api/Bonsai.IO.SerialStringRead.html": {
    "href": "api/Bonsai.IO.SerialStringRead.html",
    "title": "Class SerialStringRead",
    "keywords": "Class SerialStringRead Represents an operator that reads lines of characters asynchronously from a serial port. Inheritance Object Source < String > SerialStringRead Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class SerialStringRead : Source<string> Properties NewLine Gets or sets the new line separator used to delimit reads from the serial port. Declaration public string NewLine { get; set; } Property Value Type Description String PortName Gets or sets the name of the serial port. Declaration [TypeConverter(typeof(PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods Generate() Reads lines of characters asynchronously from the serial port. Declaration public override IObservable<string> Generate() Returns Type Description IObservable < String > A sequence of String values representing each of the lines read from the serial port. Overrides Bonsai.Source<System.String>.Generate()"
  },
  "api/Bonsai.IO.SerialStringWrite.html": {
    "href": "api/Bonsai.IO.SerialStringWrite.html",
    "title": "Class SerialStringWrite",
    "keywords": "Class SerialStringWrite Represents an operator that writes the text representation of each element of the sequence to a serial port. Inheritance Object Combinator Sink SerialStringWrite Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class SerialStringWrite : Sink Properties NewLine Gets or sets the separator used to terminate lines sent to the serial port. Declaration public string NewLine { get; set; } Property Value Type Description String PortName Gets or sets the name of the serial port. Declaration [TypeConverter(typeof(PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods Process<TSource>(IObservable<TSource>) Writes the text representation of each element of an observable sequence to a serial port. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the elements to write to the serial port. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the elements to the serial port. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.IO.StartProcess.html": {
    "href": "api/Bonsai.IO.StartProcess.html",
    "title": "Class StartProcess",
    "keywords": "Class StartProcess Represents an operator that starts a new system process with the specified file name and command-line arguments. Inheritance Object Source < Int32 > StartProcess Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class StartProcess : Source<int> Properties Arguments Gets or sets the set of command-line arguments to use when starting the application. Declaration public string Arguments { get; set; } Property Value Type Description String FileName Gets or sets the name of the application or document to start. Declaration [FileNameFilter(\"Executable files|*.exe|All Files|*.*\")] public string FileName { get; set; } Property Value Type Description String Methods Generate() Starts a new system process with the specified file name and command-line arguments and surfaces the exit code when the process terminates through an observable sequence. Declaration public override IObservable<int> Generate() Returns Type Description IObservable < Int32 > A sequence containing the exit code that the process specified when it terminated. Overrides Bonsai.Source<System.Int32>.Generate() Generate<TSource>(IObservable<TSource>) Starts a new system process with the specified file name and command-line arguments for each element of an observable sequence, and surfaces all the exit codes as the processes terminate. Declaration public IObservable<int> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source An observable sequence used to start the system processes. For each element produced by this sequence, a new system process will be started. Returns Type Description IObservable < Int32 > A sequence containing all the exit codes from the processes started by the source sequence. A new exit code is produced every time one of the processes terminates. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.IO.StreamSink.html": {
    "href": "api/Bonsai.IO.StreamSink.html",
    "title": "Class StreamSink",
    "keywords": "Class StreamSink Provides a non-generic base class for sinks that write the elements from the input sequence into a named stream (e.g. a named pipe). Inheritance Object StreamSink StreamSink<TSource, TWriter> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Sink)] public abstract class StreamSink Properties Overwrite Gets or sets a value indicating whether to overwrite the output path if it already exists. Declaration public bool Overwrite { get; set; } Property Value Type Description Boolean Path Gets or sets the identifier of the named stream on which to write the elements. If the identifier uses the named pipe prefix \\.\\pipe</code>, a corresponding NamedPipeServerStream object is created; otherwise a regular FileStream is used. Declaration public string Path { get; set; } Property Value Type Description String Suffix Gets or sets the suffix that should be applied to the path before creating the writer. Declaration public PathSuffix Suffix { get; set; } Property Value Type Description PathSuffix"
  },
  "api/Bonsai.IO.StreamSink-2.html": {
    "href": "api/Bonsai.IO.StreamSink-2.html",
    "title": "Class StreamSink<TSource, TWriter>",
    "keywords": "Class StreamSink<TSource, TWriter> Provides a base class for sinks that write the elements from the input sequence into a named stream (e.g. a named pipe). Inheritance Object StreamSink StreamSink<TSource, TWriter> Inherited Members StreamSink.Path StreamSink.Suffix StreamSink.Overwrite Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public abstract class StreamSink<TSource, TWriter> : StreamSink where TWriter : class, IDisposable Type Parameters Name Description TSource The type of the elements in the source sequence. TWriter The type of stream writer that should be used to write the elements. Methods CreateWriter(Stream) When overridden in a derived class, creates the writer over the specified Stream instance that will be responsible for handling the input elements. Declaration protected abstract TWriter CreateWriter(Stream stream) Parameters Type Name Description Stream stream The stream on which the elements should be written. Returns Type Description TWriter The writer that will be used to push elements into the stream. Process(IObservable<TSource>) Writes all elements of an observable sequence into the specified stream. Declaration public virtual IObservable<TSource> Process(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence for which to write elements. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the elements to a stream. Process<TElement>(IObservable<TElement>, Func<TElement, TSource>) Writes all elements of an observable sequence into the specified stream using the specified selector function. Declaration protected IObservable<TElement> Process<TElement>(IObservable<TElement> source, Func<TElement, TSource> selector) Parameters Type Name Description IObservable <TElement> source The source sequence for which to write elements. Func <TElement, TSource> selector The transform function used to convert each element of the sequence into the type of inputs accepted by the stream writer. Returns Type Description IObservable <TElement> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the elements to a stream. Type Parameters Name Description TElement Write(TWriter, TSource) When overridden in a derived class, writes a new element into the specified writer. Declaration protected abstract void Write(TWriter writer, TSource input) Parameters Type Name Description TWriter writer The writer that is used to push elements into the stream. TSource input The input element that should be pushed into the stream."
  },
  "api/Bonsai.IO.WriteLine.html": {
    "href": "api/Bonsai.IO.WriteLine.html",
    "title": "Class WriteLine",
    "keywords": "Class WriteLine Represents an operator that writes the text representation of each element of the sequence to the output stream, followed by the current line terminator. Inheritance Object Combinator Sink WriteLine Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class WriteLine : Sink Methods Process<TSource>(IObservable<TSource>) Writes the text representation of each element of an observable sequence to the standard output stream, followed by a line terminator. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the elements to write to the standard output stream. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the elements to the standard output stream. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>) Process<TSource>(IObservable<TSource>, IObservable<TextWriter>) Writes the text representation of each element of an observable sequence to all the specified output streams, followed by a line terminator. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> source, IObservable<TextWriter> writer) Parameters Type Name Description IObservable <TSource> source The sequence containing the elements to write to the active output streams. IObservable < TextWriter > writer A sequence of TextWriter objects on which to write the text representation of the elements of the source sequence. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the elements to all active output streams. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.MultidimensionalArrayConverter.html": {
    "href": "api/Bonsai.MultidimensionalArrayConverter.html",
    "title": "Class MultidimensionalArrayConverter",
    "keywords": "Class MultidimensionalArrayConverter Provides a type converter to convert two-dimensional Array objects to and from various other representations. Inheritance Object TypeConverter MultidimensionalArrayConverter Inherited Members TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.ConvertFrom(Object) TypeConverter.ConvertFromInvariantString(String) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(String) TypeConverter.ConvertFromString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String) TypeConverter.ConvertTo(Object, Type) TypeConverter.ConvertToInvariantString(Object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(Object) TypeConverter.ConvertToString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(Object) TypeConverter.GetConvertToException(Object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[]) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValues(ITypeDescriptorContext) TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext) TypeConverter.IsValid(Object) TypeConverter.IsValid(ITypeDescriptorContext, Object) TypeConverter.SortProperties(PropertyDescriptorCollection, String[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public class MultidimensionalArrayConverter : TypeConverter Methods CanConvertFrom(ITypeDescriptorContext, Type) Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context. Declaration public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. Type sourceType A Type that represents the type you want to convert from. Returns Type Description Boolean true if this converter can perform the conversion; otherwise, false . Overrides TypeConverter.CanConvertFrom(ITypeDescriptorContext, Type) ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) Converts the given object to the type of this converter, using the specified context and culture information. Declaration public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. CultureInfo culture The CultureInfo to use as the current culture. Object value The Object to convert. Returns Type Description Object An Object that represents the converted value. Overrides TypeConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) Converts the given value object to the specified type, using the specified context and culture information. Declaration public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. CultureInfo culture A CultureInfo . If null is passed, the current culture is assumed. Object value The Object to convert. Type destinationType The Type to convert the value parameter to. Returns Type Description Object An Object that represents the converted value. Overrides TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)"
  },
  "api/Bonsai.NumericRecordConverter.html": {
    "href": "api/Bonsai.NumericRecordConverter.html",
    "title": "Class NumericRecordConverter",
    "keywords": "Class NumericRecordConverter Provides a type converter to convert numeric records to and from various other representations. Inheritance Object TypeConverter NumericRecordConverter Inherited Members TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.ConvertFrom(Object) TypeConverter.ConvertFromInvariantString(String) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(String) TypeConverter.ConvertFromString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String) TypeConverter.ConvertTo(Object, Type) TypeConverter.ConvertToInvariantString(Object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(Object) TypeConverter.ConvertToString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CreateInstance(IDictionary) TypeConverter.GetConvertFromException(Object) TypeConverter.GetConvertToException(Object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetProperties(Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object) TypeConverter.GetPropertiesSupported() TypeConverter.GetStandardValues() TypeConverter.GetStandardValues(ITypeDescriptorContext) TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext) TypeConverter.IsValid(Object) TypeConverter.IsValid(ITypeDescriptorContext, Object) TypeConverter.SortProperties(PropertyDescriptorCollection, String[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public class NumericRecordConverter : TypeConverter Methods CanConvertFrom(ITypeDescriptorContext, Type) Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context. Declaration public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. Type sourceType A Type that represents the type you want to convert from. Returns Type Description Boolean true if this converter can perform the conversion; otherwise, false . Overrides TypeConverter.CanConvertFrom(ITypeDescriptorContext, Type) ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) Converts the given object to the type of this converter, using the specified context and culture information. Declaration public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. CultureInfo culture The CultureInfo to use as the current culture. Object value The Object to convert. Returns Type Description Object An Object that represents the converted value. Overrides TypeConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) Converts the given value object to the specified type, using the specified context and culture information. Declaration public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. CultureInfo culture A CultureInfo . If null is passed, the current culture is assumed. Object value The Object to convert. Type destinationType The Type to convert the value parameter to. Returns Type Description Object An Object that represents the converted value. Overrides TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) CreateInstance(ITypeDescriptorContext, IDictionary) Creates an instance of the type that this TypeConverter is associated with, using the specified context, given a set of property values for the object. Declaration public override object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. IDictionary propertyValues An IDictionary of new property values. Returns Type Description Object An Object representing the given IDictionary , or null if the object cannot be created. Overrides TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) GetCreateInstanceSupported(ITypeDescriptorContext) Returns whether changing a value on this object requires a call to CreateInstance(IDictionary) to create a new value, using the specified context. Declaration public override bool GetCreateInstanceSupported(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. Returns Type Description Boolean true if changing a property on this object requires a call to CreateInstance(IDictionary) to create a new value; otherwise, false . Overrides TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) GetProperties(ITypeDescriptorContext, Object, Attribute[]) Returns a collection of properties for the type of numeric record specified by the value parameter, using the specified context and attributes. Declaration public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. Object value An Object that specifies the type of numeric record for which to get properties. Attribute [] attributes An array of type Attribute that is used as a filter. Returns Type Description PropertyDescriptorCollection A PropertyDescriptorCollection with the properties that are exposed for this data type, or null if there are no properties. Overrides TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[]) GetPropertiesSupported(ITypeDescriptorContext) Returns whether this object supports properties, using the specified context. Declaration public override bool GetPropertiesSupported(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. Returns Type Description Boolean true if GetProperties(Object) should be called to find the properties of this object; otherwise, false . Overrides TypeConverter.GetPropertiesSupported(ITypeDescriptorContext)"
  },
  "api/Bonsai.NumericRecordConverter.PropertyDescriptorWrapper.html": {
    "href": "api/Bonsai.NumericRecordConverter.PropertyDescriptorWrapper.html",
    "title": "Class NumericRecordConverter.PropertyDescriptorWrapper",
    "keywords": "Class NumericRecordConverter.PropertyDescriptorWrapper Represents a class used for providing custom property metadata for an object. Inheritance Object MemberDescriptor PropertyDescriptor TypeConverter.SimplePropertyDescriptor NumericRecordConverter.PropertyDescriptorWrapper Inherited Members TypeConverter.SimplePropertyDescriptor.CanResetValue(Object) TypeConverter.SimplePropertyDescriptor.ResetValue(Object) TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(Object) TypeConverter.SimplePropertyDescriptor.ComponentType TypeConverter.SimplePropertyDescriptor.IsReadOnly TypeConverter.SimplePropertyDescriptor.PropertyType PropertyDescriptor.AddValueChanged(Object, EventHandler) PropertyDescriptor.Equals(Object) PropertyDescriptor.CreateInstance(Type) PropertyDescriptor.FillAttributes(IList) PropertyDescriptor.GetChildProperties() PropertyDescriptor.GetChildProperties(Attribute[]) PropertyDescriptor.GetChildProperties(Object) PropertyDescriptor.GetChildProperties(Object, Attribute[]) PropertyDescriptor.GetEditor(Type) PropertyDescriptor.GetHashCode() PropertyDescriptor.GetInvocationTarget(Type, Object) PropertyDescriptor.GetTypeFromName(String) PropertyDescriptor.OnValueChanged(Object, EventArgs) PropertyDescriptor.RemoveValueChanged(Object, EventHandler) PropertyDescriptor.GetValueChangedHandler(Object) PropertyDescriptor.Converter PropertyDescriptor.IsLocalizable PropertyDescriptor.SerializationVisibility PropertyDescriptor.SupportsChangeEvents MemberDescriptor.CreateAttributeCollection() MemberDescriptor.FindMethod(Type, String, Type[], Type) MemberDescriptor.FindMethod(Type, String, Type[], Type, Boolean) MemberDescriptor.GetSite(Object) MemberDescriptor.AttributeArray MemberDescriptor.Attributes MemberDescriptor.Category MemberDescriptor.Description MemberDescriptor.IsBrowsable MemberDescriptor.Name MemberDescriptor.NameHashCode MemberDescriptor.DesignTimeOnly MemberDescriptor.DisplayName Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax protected class PropertyDescriptorWrapper : TypeConverter.SimplePropertyDescriptor Constructors PropertyDescriptorWrapper(String, PropertyDescriptor, Attribute[]) Initializes a new instance of the NumericRecordConverter.PropertyDescriptorWrapper class. Declaration public PropertyDescriptorWrapper(string name, PropertyDescriptor descr, Attribute[] attributes) Parameters Type Name Description String name The name of the property. PropertyDescriptor descr The underlying property used for the redirection. Attribute [] attributes An Array with the attributes to associate with the property. Methods GetValue(Object) Gets the current value of the property on a component. Declaration public override object GetValue(object component) Parameters Type Name Description Object component The component with the property for which to retrieve the value. Returns Type Description Object The value of a property for a given component. Overrides PropertyDescriptor.GetValue(Object) SetValue(Object, Object) Sets a property of the component to a different value. Declaration public override void SetValue(object component, object value) Parameters Type Name Description Object component The component with the property value that is to be set. Object value The new value. Overrides PropertyDescriptor.SetValue(Object, Object)"
  },
  "api/Bonsai.ObservableCombinators.html": {
    "href": "api/Bonsai.ObservableCombinators.html",
    "title": "Class ObservableCombinators",
    "keywords": "Class ObservableCombinators Provides a set of static methods to aid in writing queries over observable sequences. Inheritance Object ObservableCombinators Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public static class ObservableCombinators Methods Gate<TSource>(IObservable<TSource>, TimeSpan) Takes the single next element from the sequence every time the specified interval elapses. Declaration public static IObservable<TSource> Gate<TSource>(this IObservable<TSource> source, TimeSpan interval) Parameters Type Name Description IObservable <TSource> source The observable sequence to be gated. TimeSpan interval The time interval after which a new element of the sequence is allowed to propagate. Returns Type Description IObservable <TSource> The gated observable sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Gate<TSource>(IObservable<TSource>, TimeSpan, IScheduler) Takes the single next element from the sequence every time the specified interval elapses, using the specified scheduler to run gating timers. Declaration public static IObservable<TSource> Gate<TSource>(this IObservable<TSource> source, TimeSpan interval, IScheduler scheduler) Parameters Type Name Description IObservable <TSource> source The observable sequence to be gated. TimeSpan interval The time interval after which a new element of the sequence is allowed to propagate. IScheduler scheduler The scheduler to run the gating timer on. Returns Type Description IObservable <TSource> The gated observable sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Gate<TSource, TGate>(IObservable<TSource>, IObservable<TGate>) Takes the single next element from the sequence every time the gate produces an element. Declaration public static IObservable<TSource> Gate<TSource, TGate>(this IObservable<TSource> source, IObservable<TGate> gate) Parameters Type Name Description IObservable <TSource> source The observable sequence to be gated. IObservable <TGate> gate The sequence of gate events. Every time a new gate event is received, the single next element from source is allowed to propagate. Returns Type Description IObservable <TSource> The gated observable sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. TGate The type of the elements in the sequence of gate events. Gate<TSource, TGate>(IObservable<TSource>, IObservable<TGate>, TimeSpan) Takes the single next element from the sequence if this element is produced within a specified time interval after the gate produces an element. Declaration public static IObservable<TSource> Gate<TSource, TGate>(this IObservable<TSource> source, IObservable<TGate> gate, TimeSpan timeSpan) Parameters Type Name Description IObservable <TSource> source The observable sequence to be gated. IObservable <TGate> gate The sequence of gate events. Every time a new gate event is received, the single next element from source is allowed to propagate if it is produced before the maximum timeSpan elapses. TimeSpan timeSpan After receiving a gate event, the maximum interval that can elapse before an element from the source sequence is produced. If the element arrives after the interval elapsed, it is dropped. Returns Type Description IObservable <TSource> The gated observable sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. TGate The type of the elements in the sequence of gate events. Gate<TSource, TGate>(IObservable<TSource>, IObservable<TGate>, TimeSpan, IScheduler) Takes the single next element from the sequence if this element is produced within a specified time interval after the gate produces an element, using the specified scheduler to run gate closing timers. Declaration public static IObservable<TSource> Gate<TSource, TGate>(this IObservable<TSource> source, IObservable<TGate> gate, TimeSpan timeSpan, IScheduler scheduler) Parameters Type Name Description IObservable <TSource> source The observable sequence to be gated. IObservable <TGate> gate The sequence of gate events. Every time a new gate event is received, the single next element from source is allowed to propagate if it is produced before the maximum timeSpan elapses. TimeSpan timeSpan After receiving a gate event, the maximum interval that can elapse before an element from the source sequence is produced. If the element arrives after the interval elapsed, it is dropped. IScheduler scheduler The scheduler to run the gate closing timer on. Returns Type Description IObservable <TSource> The gated observable sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. TGate The type of the elements in the sequence of gate events. Gate<TSource, TGateOpening, TGateClosing>(IObservable<TSource>, IObservable<TGateOpening>, IObservable<TGateClosing>) Takes the single next element from the sequence if this element is produced between a gate opening and gate closing event. Declaration public static IObservable<TSource> Gate<TSource, TGateOpening, TGateClosing>(this IObservable<TSource> source, IObservable<TGateOpening> openGate, IObservable<TGateClosing> closeGate) Parameters Type Name Description IObservable <TSource> source The observable sequence to be gated. IObservable <TGateOpening> openGate The sequence of gate opening events. Every time a new gate event is received, the single next element from source is allowed to propagate if it is produced before the next gate closing event. IObservable <TGateClosing> closeGate The sequence of gate closing events. Every time a new gate event is received, the single next element from source is allowed to propagate if it is produced before the next gate closing event. Returns Type Description IObservable <TSource> The gated observable sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. TGateOpening The type of the elements in the sequence of gate opening events. TGateClosing The type of the elements in the sequence of gate closing events. MulticastReconnectable<TSource, TResult>(IObservable<TSource>, Func<ISubject<TSource, TResult>>) Returns a connectable observable sequence that upon connection causes the source to push results into a new fresh subject, which is created by invoking the specified subjectFactory . Declaration public static IConnectableObservable<TResult> MulticastReconnectable<TSource, TResult>(this IObservable<TSource> source, Func<ISubject<TSource, TResult>> subjectFactory) Parameters Type Name Description IObservable <TSource> source The source sequence whose elements will be pushed into the specified subject. Func < ISubject <TSource, TResult>> subjectFactory The factory function used to create the subject that notifications will be pushed into. Returns Type Description IConnectableObservable <TResult> The reconnectable sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. TResult The type of the elements in the result sequence. PublishReconnectable<TSource>(IObservable<TSource>) Returns a connectable observable sequence that upon connection causes the source to push results into a new fresh . Declaration public static IConnectableObservable<TSource> PublishReconnectable<TSource>(this IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence whose elements will be pushed into the specified subject. Returns Type Description IConnectableObservable <TSource> The reconnectable sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Zip<TSource1, TSource2, TResult>(IObservable<TSource1>, IEnumerable<TSource2>, Func<TSource1, TSource2, TResult>) Merges an observable sequence and an enumerable sequence into one observable sequence by using the selector function. Declaration public static IObservable<TResult> Zip<TSource1, TSource2, TResult>(this IObservable<TSource1> first, IEnumerable<TSource2> second, Func<TSource1, TSource2, TResult> resultSelector) Parameters Type Name Description IObservable <TSource1> first The first observable source. IEnumerable <TSource2> second The second enumerable source. Func <TSource1, TSource2, TResult> resultSelector The function to invoke for each consecutive pair of elements from the first and second source. Returns Type Description IObservable <TResult> An observable sequence containing the result of pairwise combining the elements of the first and second source using the specified result selector function. Type Parameters Name Description TSource1 The type of the elements in the first observable source sequence. TSource2 The type of the elements in the second observable source sequence. TResult The type of the elements in the result sequence, returned by the selector function."
  },
  "api/Bonsai.PrecisionAttribute.html": {
    "href": "api/Bonsai.PrecisionAttribute.html",
    "title": "Class PrecisionAttribute",
    "keywords": "Class PrecisionAttribute Specifies the number of decimal places and the smallest incremental step that should be used when editing values for a property. Inheritance Object Attribute PrecisionAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class PrecisionAttribute : Attribute, _Attribute Constructors PrecisionAttribute(Int32, Decimal) Initializes a new instance of the PrecisionAttribute with the specified number of decimal places and the smallest editor step increment. Declaration public PrecisionAttribute(int decimalPlaces, decimal increment) Parameters Type Name Description Int32 decimalPlaces The number of decimal places to display in the editor. Decimal increment The Decimal value by which to increment or decrement the current value on each editor step. PrecisionAttribute(Int32, Double) Initializes a new instance of the PrecisionAttribute with the specified number of decimal places and the smallest editor step increment. Declaration public PrecisionAttribute(int decimalPlaces, double increment) Parameters Type Name Description Int32 decimalPlaces The number of decimal places to display in the editor. Double increment The Double value by which to increment or decrement the current value on each editor step. PrecisionAttribute(Int32, Int32) Initializes a new instance of the PrecisionAttribute with the specified number of decimal places and the smallest editor step increment. Declaration public PrecisionAttribute(int decimalPlaces, int increment) Parameters Type Name Description Int32 decimalPlaces The number of decimal places to display in the editor. Int32 increment The Int32 value by which to increment or decrement the current value on each editor step. Properties DecimalPlaces Gets the number of decimal places to display in the editor. Declaration public int DecimalPlaces { get; } Property Value Type Description Int32 Increment Gets the smallest value by which to increment or decrement the current value on each editor step. Declaration public decimal Increment { get; } Property Value Type Description Decimal Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.Range.html": {
    "href": "api/Bonsai.Range.html",
    "title": "Class Range",
    "keywords": "Class Range Provides static methods for creating range objects. Inheritance Object Range Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public static class Range Methods Create<TValue>(TValue, TValue) Creates a new range with the specified lower and upper bounds. Declaration public static Range<TValue> Create<TValue>(TValue lowerBound, TValue upperBound) Parameters Type Name Description TValue lowerBound The inclusive lower bound of the range. TValue upperBound The inclusive lower bound of the range. Returns Type Description Range <TValue> A new instance of the Range<TValue> class. Type Parameters Name Description TValue The type of values in the range. Create<TValue>(TValue, TValue, IComparer<TValue>) Creates a new range with the specified lower and upper bounds and using the specified comparer. Declaration public static Range<TValue> Create<TValue>(TValue lowerBound, TValue upperBound, IComparer<TValue> comparer) Parameters Type Name Description TValue lowerBound The inclusive lower bound of the range. TValue upperBound The inclusive lower bound of the range. IComparer <TValue> comparer An IComparer<T> to use to compare values. Returns Type Description Range <TValue> A new instance of the Range<TValue> class. Type Parameters Name Description TValue The type of values in the range."
  },
  "api/Bonsai.Range-1.html": {
    "href": "api/Bonsai.Range-1.html",
    "title": "Class Range<TValue>",
    "keywords": "Class Range<TValue> Represents a range of values defined by an inclusive lower and upper bounds. Inheritance Object Range<TValue> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public sealed class Range<TValue> Type Parameters Name Description TValue The type of values in the range. Constructors Range(TValue, TValue) Initializes a new instance of the Range<TValue> class with the specified lower and upper bounds. Declaration public Range(TValue lowerBound, TValue upperBound) Parameters Type Name Description TValue lowerBound The inclusive lower bound of the range. TValue upperBound The inclusive upper bound of the range. Range(TValue, TValue, IComparer<TValue>) Initializes a new instance of the Range<TValue> class with the specified lower and upper bounds and using the specified comparer. Declaration public Range(TValue lowerBound, TValue upperBound, IComparer<TValue> comparer) Parameters Type Name Description TValue lowerBound The inclusive lower bound of the range. TValue upperBound The inclusive upper bound of the range. IComparer <TValue> comparer An IComparer<T> to use to compare values. Properties LowerBound Gets the inclusive lower bound of the range. Declaration public TValue LowerBound { get; } Property Value Type Description TValue UpperBound Gets the inclusive upper bound of the range. Declaration public TValue UpperBound { get; } Property Value Type Description TValue Methods Contains(TValue) Tests whether a specified value falls within the range. Declaration public bool Contains(TValue value) Parameters Type Name Description TValue value The value to test. Returns Type Description Boolean true if value is between or equal to LowerBound and UpperBound ; false otherwise. ToString() Creates a String representation of this Range<TValue> . Declaration public override string ToString() Returns Type Description String A String containing the LowerBound and UpperBound values of this Range<TValue> . Overrides Object.ToString()"
  },
  "api/Bonsai.RangeAttribute.html": {
    "href": "api/Bonsai.RangeAttribute.html",
    "title": "Class RangeAttribute",
    "keywords": "Class RangeAttribute Specifies the valid range of values for a numeric property. Inheritance Object Attribute RangeAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class RangeAttribute : Attribute, _Attribute Constructors RangeAttribute(Decimal, Decimal) Initializes a new instance of the RangeAttribute class with the specified minimum and maximum values. Declaration public RangeAttribute(decimal min, decimal max) Parameters Type Name Description Decimal min A Decimal that is the minimum value. Decimal max A Decimal that is the maximum value. RangeAttribute(Double, Double) Initializes a new instance of the RangeAttribute class with the specified minimum and maximum values. Declaration public RangeAttribute(double min, double max) Parameters Type Name Description Double min A Double that is the minimum value. Double max A Double that is the maximum value. RangeAttribute(Int32, Int32) Initializes a new instance of the RangeAttribute class with the specified minimum and maximum values. Declaration public RangeAttribute(int min, int max) Parameters Type Name Description Int32 min An Int32 that is the minimum value. Int32 max An Int32 that is the maximum value. RangeAttribute(Int64, Int64) Initializes a new instance of the RangeAttribute class with the specified minimum and maximum values. Declaration public RangeAttribute(long min, long max) Parameters Type Name Description Int64 min An Int64 that is the minimum value. Int64 max An Int64 that is the maximum value. RangeAttribute(Single, Single) Initializes a new instance of the RangeAttribute class with the specified minimum and maximum values. Declaration public RangeAttribute(float min, float max) Parameters Type Name Description Single min A Single that is the minimum value. Single max A Single that is the maximum value. Fields Default Specifies the default value for the RangeAttribute . This field is read-only. Declaration public static readonly RangeAttribute Default Field Value Type Description RangeAttribute Properties Maximum Gets the maximum value of the property this attribute is bound to. Declaration public decimal Maximum { get; } Property Value Type Description Decimal Minimum Gets the minimum value of the property this attribute is bound to. Declaration public decimal Minimum { get; } Property Value Type Description Decimal Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.Reactive.Accumulate.html": {
    "href": "api/Bonsai.Reactive.Accumulate.html",
    "title": "Class Accumulate",
    "keywords": "Class Accumulate Represents a combinator that computes the cumulative sum of an observable sequence and returns each intermediate result. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder Accumulate Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Accumulate : SingleArgumentExpressionBuilder, IExpressionBuilder Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.Amb.html": {
    "href": "api/Bonsai.Reactive.Amb.html",
    "title": "Class Amb",
    "keywords": "Class Amb Represents a combinator which propagates the observable sequence that reacts first. Inheritance Object Amb Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Amb Methods Process<TSource>(IObservable<TSource>, IObservable<TSource>) Propagates the observable sequence that reacts first. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> first, IObservable<TSource> second) Parameters Type Name Description IObservable <TSource> first First observable sequence. IObservable <TSource> second Second observable sequence. Returns Type Description IObservable <TSource> An observable sequence that surfaces either of the given sequences, whichever reacted first. Type Parameters Name Description TSource The type of the elements in the source sequences. Process<TSource>(IObservable<TSource>[]) Propagates the observable sequence that reacts first. Declaration public IObservable<TSource> Process<TSource>(params IObservable<TSource>[] sources) Parameters Type Name Description IObservable <TSource>[] sources Observable sources competing to react first. Returns Type Description IObservable <TSource> An observable sequence that surfaces any of the given sequences, whichever reacted first. Type Parameters Name Description TSource The type of the elements in the source sequences."
  },
  "api/Bonsai.Reactive.Average.html": {
    "href": "api/Bonsai.Reactive.Average.html",
    "title": "Class Average",
    "keywords": "Class Average Represents a combinator that computes the numerical average of an observable sequence. Inheritance Object Average Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Average Methods Process(IObservable<Decimal>) Computes the average of an observable sequence of Decimal values. Declaration public IObservable<decimal> Process(IObservable<decimal> source) Parameters Type Name Description IObservable < Decimal > source A sequence of Decimal values to calculate the average of. Returns Type Description IObservable < Decimal > An observable sequence containing a single element with the average of the sequence of values. Process(IObservable<Double>) Computes the average of an observable sequence of Double values. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source A sequence of Double values to calculate the average of. Returns Type Description IObservable < Double > An observable sequence containing a single element with the average of the sequence of values. Process(IObservable<Int32>) Computes the average of an observable sequence of Int32 values. Declaration public IObservable<double> Process(IObservable<int> source) Parameters Type Name Description IObservable < Int32 > source A sequence of Int32 values to calculate the average of. Returns Type Description IObservable < Double > An observable sequence containing a single element with the average of the sequence of values. Process(IObservable<Int64>) Computes the average of an observable sequence of Int64 values. Declaration public IObservable<double> Process(IObservable<long> source) Parameters Type Name Description IObservable < Int64 > source A sequence of Int64 values to calculate the average of. Returns Type Description IObservable < Double > An observable sequence containing a single element with the average of the sequence of values. Process(IObservable<Nullable<Decimal>>) Computes the average of an observable sequence of nullable Decimal values. Declaration public IObservable<decimal?> Process(IObservable<decimal?> source) Parameters Type Name Description IObservable < Nullable < Decimal >> source A sequence of Decimal values to calculate the average of. Returns Type Description IObservable < Nullable < Decimal >> An observable sequence containing a single element with the average of the sequence of values. Process(IObservable<Nullable<Double>>) Computes the average of an observable sequence of nullable Double values. Declaration public IObservable<double?> Process(IObservable<double?> source) Parameters Type Name Description IObservable < Nullable < Double >> source A sequence of Double values to calculate the average of. Returns Type Description IObservable < Nullable < Double >> An observable sequence containing a single element with the average of the sequence of values. Process(IObservable<Nullable<Int32>>) Computes the average of an observable sequence of nullable Int32 values. Declaration public IObservable<double?> Process(IObservable<int?> source) Parameters Type Name Description IObservable < Nullable < Int32 >> source A sequence of Int32 values to calculate the average of. Returns Type Description IObservable < Nullable < Double >> An observable sequence containing a single element with the average of the sequence of values. Process(IObservable<Nullable<Int64>>) Computes the average of an observable sequence of nullable Int64 values. Declaration public IObservable<double?> Process(IObservable<long?> source) Parameters Type Name Description IObservable < Nullable < Int64 >> source A sequence of Int64 values to calculate the average of. Returns Type Description IObservable < Nullable < Double >> An observable sequence containing a single element with the average of the sequence of values. Process(IObservable<Nullable<Single>>) Computes the average of an observable sequence of nullable Single values. Declaration public IObservable<float?> Process(IObservable<float?> source) Parameters Type Name Description IObservable < Nullable < Single >> source A sequence of Single values to calculate the average of. Returns Type Description IObservable < Nullable < Single >> An observable sequence containing a single element with the average of the sequence of values. Process(IObservable<Single>) Computes the average of an observable sequence of Single values. Declaration public IObservable<float> Process(IObservable<float> source) Parameters Type Name Description IObservable < Single > source A sequence of Single values to calculate the average of. Returns Type Description IObservable < Single > An observable sequence containing a single element with the average of the sequence of values."
  },
  "api/Bonsai.Reactive.Buffer.html": {
    "href": "api/Bonsai.Reactive.Buffer.html",
    "title": "Class Buffer",
    "keywords": "Class Buffer Represents a combinator that projects each element of the sequence into zero or more buffers based on element count information. Inheritance Object Buffer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Buffer Properties Count Gets or sets the length of each buffer. Declaration public int Count { get; set; } Property Value Type Description Int32 Skip Gets or sets the number of elements to skip between the creation of consecutive buffers. If it is not specified, Skip will be equal to Count in order to generate consecutive non-overlapping buffers. Declaration public int? Skip { get; set; } Property Value Type Description Nullable < Int32 > Methods Process<TSource>(IObservable<TSource>) Projects each element of an observable sequence into zero or more buffers based on element count information. Declaration public IObservable<IList<TSource>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to produce buffers over. Returns Type Description IObservable < IList <TSource>> An observable sequence of buffers. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.Catch.html": {
    "href": "api/Bonsai.Reactive.Catch.html",
    "title": "Class Catch",
    "keywords": "Class Catch Represents a combinator that continues an observable sequence that is terminated by an exception with the next observable sequence. Inheritance Object Catch Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Catch Methods Process<TSource>(IObservable<TSource>, IObservable<TSource>) Continues an observable sequence that is terminated by an exception with the next observable sequence. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> first, IObservable<TSource> second) Parameters Type Name Description IObservable <TSource> first The first observable sequence whose exception (if any) is caught. IObservable <TSource> second The second observable sequence used to produce results when the first sequence terminates exceptionally. Returns Type Description IObservable <TSource> An observable sequence containing the first sequence's elements, followed by the elements of the second sequence in case an exception occurred. Type Parameters Name Description TSource The type of the elements in the source and handler sequences. Process<TSource>(IObservable<TSource>[]) Continues an observable sequence that is terminated by an exception with the next observable sequence. Declaration public IObservable<TSource> Process<TSource>(params IObservable<TSource>[] sources) Parameters Type Name Description IObservable <TSource>[] sources The observable sequences to catch exceptions for. Returns Type Description IObservable <TSource> An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully. Type Parameters Name Description TSource The type of the elements in the source and handler sequences."
  },
  "api/Bonsai.Reactive.CombineLatest.html": {
    "href": "api/Bonsai.Reactive.CombineLatest.html",
    "title": "Class CombineLatest",
    "keywords": "Class CombineLatest Represents a combinator that combines values from the source sequences whenever any of the sequences produces an element. Inheritance Object CombineLatest Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class CombineLatest Methods Process<TSource>(IObservable<TSource>, IObservable<TSource>, IObservable<TSource>[]) Merges the specified sources into one observable sequence by emitting a list with the latest source elements whenever any of the observable sequences produces an element. Declaration public IObservable<IList<TSource>> Process<TSource>(IObservable<TSource> first, IObservable<TSource> second, params IObservable<TSource>[] remainder) Parameters Type Name Description IObservable <TSource> first The first observable sequence. IObservable <TSource> second The second observable sequence. IObservable <TSource>[] remainder The remaining observable sequences to combine. Returns Type Description IObservable < IList <TSource>> An observable sequence containing the result of combining the latest elements of the sources into lists. Type Parameters Name Description TSource The type of the elements in the source sequences. Process<TSource>(IObservable<IObservable<TSource>>) Merges elements from all inner observable sequences into one observable sequence by emitting a list with the elements of each sequence whenever any of the sequences produces a new element. Declaration public IObservable<IList<TSource>> Process<TSource>(IObservable<IObservable<TSource>> sources) Parameters Type Name Description IObservable < IObservable <TSource>> sources The observable sequence of inner observable sequences. Returns Type Description IObservable < IList <TSource>> An observable sequence containing the result of combining the latest elements of the inner sequences into lists. Type Parameters Name Description TSource The type of the elements in the source sequences. Process<TSource1, TSource2>(IObservable<TSource1>, IObservable<TSource2>) Merges the specified sources into one observable sequence by emitting a tuple with the latest source elements whenever any of the observable sequences produces an element. Declaration public IObservable<Tuple<TSource1, TSource2>> Process<TSource1, TSource2>(IObservable<TSource1> source1, IObservable<TSource2> source2) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2>> An observable sequence containing the result of combining the latest elements of the sources into tuples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. Process<TSource1, TSource2, TSource3>(IObservable<TSource1>, IObservable<TSource2>, IObservable<TSource3>) Merges the specified sources into one observable sequence by emitting a tuple with the latest source elements whenever any of the observable sequences produces an element. Declaration public IObservable<Tuple<TSource1, TSource2, TSource3>> Process<TSource1, TSource2, TSource3>(IObservable<TSource1> source1, IObservable<TSource2> source2, IObservable<TSource3> source3) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. IObservable <TSource3> source3 The third observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2, TSource3>> An observable sequence containing the result of combining the latest elements of the sources into tuples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. TSource3 The type of the elements in the third source sequence. Process<TSource1, TSource2, TSource3, TSource4>(IObservable<TSource1>, IObservable<TSource2>, IObservable<TSource3>, IObservable<TSource4>) Merges the specified sources into one observable sequence by emitting a tuple with the latest source elements whenever any of the observable sequences produces an element. Declaration public IObservable<Tuple<TSource1, TSource2, TSource3, TSource4>> Process<TSource1, TSource2, TSource3, TSource4>(IObservable<TSource1> source1, IObservable<TSource2> source2, IObservable<TSource3> source3, IObservable<TSource4> source4) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. IObservable <TSource3> source3 The third observable source. IObservable <TSource4> source4 The fourth observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2, TSource3, TSource4>> An observable sequence containing the result of combining the latest elements of the sources into tuples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. TSource3 The type of the elements in the third source sequence. TSource4 The type of the elements in the fourth source sequence. Process<TSource1, TSource2, TSource3, TSource4, TSource5>(IObservable<TSource1>, IObservable<TSource2>, IObservable<TSource3>, IObservable<TSource4>, IObservable<TSource5>) Merges the specified sources into one observable sequence by emitting a tuple with the latest source elements whenever any of the observable sequences produces an element. Declaration public IObservable<Tuple<TSource1, TSource2, TSource3, TSource4, TSource5>> Process<TSource1, TSource2, TSource3, TSource4, TSource5>(IObservable<TSource1> source1, IObservable<TSource2> source2, IObservable<TSource3> source3, IObservable<TSource4> source4, IObservable<TSource5> source5) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. IObservable <TSource3> source3 The third observable source. IObservable <TSource4> source4 The fourth observable source. IObservable <TSource5> source5 The fifth observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2, TSource3, TSource4, TSource5>> An observable sequence containing the result of combining the latest elements of the sources into tuples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. TSource3 The type of the elements in the third source sequence. TSource4 The type of the elements in the fourth source sequence. TSource5 The type of the elements in the fifth source sequence. Process<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>(IObservable<TSource1>, IObservable<TSource2>, IObservable<TSource3>, IObservable<TSource4>, IObservable<TSource5>, IObservable<TSource6>) Merges the specified sources into one observable sequence by emitting a tuple with the latest source elements whenever any of the observable sequences produces an element. Declaration public IObservable<Tuple<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>> Process<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>(IObservable<TSource1> source1, IObservable<TSource2> source2, IObservable<TSource3> source3, IObservable<TSource4> source4, IObservable<TSource5> source5, IObservable<TSource6> source6) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. IObservable <TSource3> source3 The third observable source. IObservable <TSource4> source4 The fourth observable source. IObservable <TSource5> source5 The fifth observable source. IObservable <TSource6> source6 The sixth observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>> An observable sequence containing the result of combining the latest elements of the sources into tuples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. TSource3 The type of the elements in the third source sequence. TSource4 The type of the elements in the fourth source sequence. TSource5 The type of the elements in the fifth source sequence. TSource6 The type of the elements in the sixth source sequence. Process<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>(IObservable<TSource1>, IObservable<TSource2>, IObservable<TSource3>, IObservable<TSource4>, IObservable<TSource5>, IObservable<TSource6>, IObservable<TSource7>) Merges the specified sources into one observable sequence by emitting a tuple with the latest source elements whenever any of the observable sequences produces an element. Declaration public IObservable<Tuple<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>> Process<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>(IObservable<TSource1> source1, IObservable<TSource2> source2, IObservable<TSource3> source3, IObservable<TSource4> source4, IObservable<TSource5> source5, IObservable<TSource6> source6, IObservable<TSource7> source7) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. IObservable <TSource3> source3 The third observable source. IObservable <TSource4> source4 The fourth observable source. IObservable <TSource5> source5 The fifth observable source. IObservable <TSource6> source6 The sixth observable source. IObservable <TSource7> source7 The seventh observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>> An observable sequence containing the result of combining the latest elements of the sources into tuples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. TSource3 The type of the elements in the third source sequence. TSource4 The type of the elements in the fourth source sequence. TSource5 The type of the elements in the fifth source sequence. TSource6 The type of the elements in the sixth source sequence. TSource7 The type of the elements in the seventh source sequence."
  },
  "api/Bonsai.Reactive.CombineTimestamp.html": {
    "href": "api/Bonsai.Reactive.CombineTimestamp.html",
    "title": "Class CombineTimestamp",
    "keywords": "Class CombineTimestamp Represents a combinator that converts element-timestamp tuples of an observable sequence into proper timestamped elements. Inheritance Object CombineTimestamp Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class CombineTimestamp Methods Process<TSource>(IObservable<Tuple<TSource, DateTimeOffset>>) Converts element-timestamp tuples of an observable sequence into proper timestamped elements. Declaration public IObservable<Timestamped<TSource>> Process<TSource>(IObservable<Tuple<TSource, DateTimeOffset>> source) Parameters Type Name Description IObservable < Tuple <TSource, DateTimeOffset >> source The sequence of element-timestamp tuples. Returns Type Description IObservable < Timestamped <TSource>> An observable sequence of timestamped values. Type Parameters Name Description TSource The type of values in the tuple elements of the source sequence."
  },
  "api/Bonsai.Reactive.Concat.html": {
    "href": "api/Bonsai.Reactive.Concat.html",
    "title": "Class Concat",
    "keywords": "Class Concat Represents a combinator that concatenates any number of observable sequences as long as the previous sequence terminated successfully. Inheritance Object Concat Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Concat Methods Process<TSource>(IObservable<TSource>, IObservable<TSource>) Concatenates the second observable sequence to the first observable sequence upon successful termination of the first. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> first, IObservable<TSource> second) Parameters Type Name Description IObservable <TSource> first The first observable sequence. IObservable <TSource> second The second observable sequence. Returns Type Description IObservable <TSource> An observable sequence that contains the elements of the first sequence, followed by those of the second sequence. Type Parameters Name Description TSource The type of the elements in the first sequence. Process<TSource>(IObservable<TSource>, IObservable<TSource>, IObservable<TSource>[]) Concatenates all of the specified observable sequences, as long as the previous observable sequence terminated successfully. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> first, IObservable<TSource> second, params IObservable<TSource>[] remainder) Parameters Type Name Description IObservable <TSource> first The first observable sequence. IObservable <TSource> second The second observable sequence. IObservable <TSource>[] remainder The remaining observable sequences to concatenate. Returns Type Description IObservable <TSource> An observable sequence that contains the elements of each given sequence, in sequential order. Type Parameters Name Description TSource The type of the elements in the source sequences. Process<TSource>(IObservable<IEnumerable<TSource>>) Concatenates all inner enumerable sequences into one observable sequence. Declaration public IObservable<TSource> Process<TSource>(IObservable<IEnumerable<TSource>> sources) Parameters Type Name Description IObservable < IEnumerable <TSource>> sources The observable sequence of inner enumerable sequences. Returns Type Description IObservable <TSource> An observable sequence that contains the elements of each inner enumerable sequence, in sequential order. Type Parameters Name Description TSource The type of the elements in the source sequences. Process<TSource>(IObservable<IObservable<TSource>>) Concatenates all inner observable sequences, as long as the previous observable sequence terminated successfully. Declaration public IObservable<TSource> Process<TSource>(IObservable<IObservable<TSource>> sources) Parameters Type Name Description IObservable < IObservable <TSource>> sources The observable sequence of inner observable sequences. Returns Type Description IObservable <TSource> An observable sequence that contains the elements of each observed inner sequence, in sequential order. Type Parameters Name Description TSource The type of the elements in the source sequences."
  },
  "api/Bonsai.Reactive.Count.html": {
    "href": "api/Bonsai.Reactive.Count.html",
    "title": "Class Count",
    "keywords": "Class Count Represents a combinator that returns an observable sequence containing an integer representing the total number of elements in an observable sequence. Inheritance Object Combinator < Int32 > Count Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Count : Combinator<int> Methods Process<TSource>(IObservable<TSource>) Returns an observable sequence containing an integer representing the total number of elements in an observable sequence. Declaration public override IObservable<int> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source An observable sequence that contains elements to be counted. Returns Type Description IObservable < Int32 > An observable sequence containing a single element with the number of elements in the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator<System.Int32>.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.Delay.html": {
    "href": "api/Bonsai.Reactive.Delay.html",
    "title": "Class Delay",
    "keywords": "Class Delay Represents a combinator that delays the notifications of an observable sequence by the specified relative time duration. Inheritance Object Combinator Delay Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Delay : Combinator Properties DueTime Gets or sets the time interval by which to delay the sequence. Declaration public TimeSpan DueTime { get; set; } Property Value Type Description TimeSpan DueTimeXml Gets or sets the XML serializable representation of due time. Declaration [Browsable(false)] public string DueTimeXml { get; set; } Property Value Type Description String Methods Process<TSource>(IObservable<TSource>) Delays the notifications of an observable sequence by the specified relative time duration. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to delay values for. Returns Type Description IObservable <TSource> The time-shifted sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.DelaySubscription.html": {
    "href": "api/Bonsai.Reactive.DelaySubscription.html",
    "title": "Class DelaySubscription",
    "keywords": "Class DelaySubscription Represents a combinator that time-shifts the observable sequence by delaying the subscription with the specified relative time duration. Inheritance Object Combinator DelaySubscription Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class DelaySubscription : Combinator Properties DueTime Gets or sets the time interval by which to delay the subscription to the sequence. Declaration public TimeSpan DueTime { get; set; } Property Value Type Description TimeSpan DueTimeXml Gets or sets the XML serializable representation of due time. Declaration [Browsable(false)] public string DueTimeXml { get; set; } Property Value Type Description String Methods Process<TSource>(IObservable<TSource>) Time-shifts the observable sequence by delaying the subscription with the specified relative time duration. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to delay subscription for. Returns Type Description IObservable <TSource> The time-shifted sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.Dematerialize.html": {
    "href": "api/Bonsai.Reactive.Dematerialize.html",
    "title": "Class Dematerialize",
    "keywords": "Class Dematerialize Represents a combinator that dematerializes the explicit notification values of an observable sequence as implicit notifications. Inheritance Object Dematerialize Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Dematerialize Methods Process<TSource>(IObservable<Notification<TSource>>) Dematerializes the explicit notification values of an observable sequence as implicit notifications. Declaration public IObservable<TSource> Process<TSource>(IObservable<Notification<TSource>> source) Parameters Type Name Description IObservable < Notification <TSource>> source An observable sequence containing explicit notification values which have to be turned into implicit notifications. Returns Type Description IObservable <TSource> An observable sequence exhibiting the behavior corresponding to the source sequence's notification values. Type Parameters Name Description TSource The type of the elements materialized in the source sequence notification objects."
  },
  "api/Bonsai.Reactive.Distinct.html": {
    "href": "api/Bonsai.Reactive.Distinct.html",
    "title": "Class Distinct",
    "keywords": "Class Distinct Represents a combinator that returns an observable sequence containing only distinct elements. Inheritance Object Combinator Distinct Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Distinct : Combinator Methods Process<TSource>(IObservable<TSource>) Returns an observable sequence containing only distinct elements. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source An observable sequence to retain distinct elements for. Returns Type Description IObservable <TSource> An observable sequence containing only the distinct elements from the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.DistinctBy.html": {
    "href": "api/Bonsai.Reactive.DistinctBy.html",
    "title": "Class DistinctBy",
    "keywords": "Class DistinctBy Represents a combinator that returns an observable sequence that contains only distinct elements according to the specified key. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder DistinctBy Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class DistinctBy : SingleArgumentExpressionBuilder, IExpressionBuilder Properties KeySelector Gets or sets a string used to specify a key to test for the uniqueness of each element in the observable sequence. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.DistinctUntilChanged.html": {
    "href": "api/Bonsai.Reactive.DistinctUntilChanged.html",
    "title": "Class DistinctUntilChanged",
    "keywords": "Class DistinctUntilChanged Represents a combinator that propagates only distinct contiguous elements of an observable sequence. Inheritance Object Combinator DistinctUntilChanged Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class DistinctUntilChanged : Combinator Methods Process<TSource>(IObservable<TSource>) Returns an observable sequence that contains only distinct contiguous elements. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source An observable sequence to retain distinct contiguous elements for. Returns Type Description IObservable <TSource> An observable sequence only containing the distinct contiguous elements from the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.DistinctUntilChangedBy.html": {
    "href": "api/Bonsai.Reactive.DistinctUntilChangedBy.html",
    "title": "Class DistinctUntilChangedBy",
    "keywords": "Class DistinctUntilChangedBy Represents a combinator that ensures that only distinct contiguous elements according to the specified key are propagated. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder DistinctUntilChangedBy Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class DistinctUntilChangedBy : SingleArgumentExpressionBuilder, IExpressionBuilder Properties KeySelector Gets or sets a string used to specify a key to test for contiguity of each element in the observable sequence. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.ElementAccumulation-2.html": {
    "href": "api/Bonsai.Reactive.ElementAccumulation-2.html",
    "title": "Class ElementAccumulation<TAccumulation, TElement>",
    "keywords": "Class ElementAccumulation<TAccumulation, TElement> Represents the current state of an accumulation over an observable sequence. Inheritance Object ElementAccumulation<TAccumulation, TElement> Implements IStructuralEquatable IStructuralComparable IComparable Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class ElementAccumulation<TAccumulation, TElement> : IStructuralEquatable, IStructuralComparable, IComparable Type Parameters Name Description TAccumulation The type of values in the accumulation. TElement The type of values in the observable sequence. Constructors ElementAccumulation(TAccumulation, TElement) Initializes a new instance of the ElementAccumulation<TAccumulation, TElement> class with the specified accumulator state and current element information. Declaration public ElementAccumulation(TAccumulation accumulation, TElement value) Parameters Type Name Description TAccumulation accumulation The current state of the accumulator. TElement value The current value of the sequence to accumulate. Properties Accumulation Gets the current state of the accumulator. Declaration public TAccumulation Accumulation { get; } Property Value Type Description TAccumulation Value Gets the current value of the sequence to accumulate. Declaration public TElement Value { get; } Property Value Type Description TElement Methods Equals(Object) Returns a value that indicates whether the current ElementAccumulation<TAccumulation, TElement> object is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if the current instance is equal to the specified object; otherwise, false . Overrides Object.Equals(Object) GetHashCode() Returns the hash code for the current ElementAccumulation<TAccumulation, TElement> object. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() ToString() Returns a string that represents the current ElementAccumulation<TAccumulation, TElement> instance. Declaration public override string ToString() Returns Type Description String The string representation of this ElementAccumulation<TAccumulation, TElement> object. Overrides Object.ToString() Explicit Interface Implementations IStructuralComparable.CompareTo(Object, IComparer) Declaration int IStructuralComparable.CompareTo(object other, IComparer comparer) Parameters Type Name Description Object other IComparer comparer Returns Type Description Int32 IStructuralEquatable.Equals(Object, IEqualityComparer) Declaration bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer) Parameters Type Name Description Object other IEqualityComparer comparer Returns Type Description Boolean IStructuralEquatable.GetHashCode(IEqualityComparer) Declaration int IStructuralEquatable.GetHashCode(IEqualityComparer comparer) Parameters Type Name Description IEqualityComparer comparer Returns Type Description Int32 IComparable.CompareTo(Object) Declaration int IComparable.CompareTo(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Implements System.Collections.IStructuralEquatable System.Collections.IStructuralComparable System.IComparable"
  },
  "api/Bonsai.Reactive.ElementCountWindow.html": {
    "href": "api/Bonsai.Reactive.ElementCountWindow.html",
    "title": "Class ElementCountWindow",
    "keywords": "Class ElementCountWindow Represents a combinator that projects each element of an observable sequence into zero or more windows based on element count information. Inheritance Object WindowCombinator ElementCountWindow Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class ElementCountWindow : WindowCombinator Properties Count Gets or sets the maximum number of elements in each window. Declaration public int Count { get; set; } Property Value Type Description Int32 Skip Gets or sets the number of elements to skip between the creation of each window. If it is not specified, Skip will be equal to Count in order to generate consecutive non-overlapping windows. Declaration public int? Skip { get; set; } Property Value Type Description Nullable < Int32 > Methods Process<TSource>(IObservable<TSource>) Projects each element of an observable sequence into zero or more windows based on element count information. Declaration public override IObservable<IObservable<TSource>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to produce windows over. Returns Type Description IObservable < IObservable <TSource>> An observable sequence of windows. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.WindowCombinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.ElementIndex.html": {
    "href": "api/Bonsai.Reactive.ElementIndex.html",
    "title": "Class ElementIndex",
    "keywords": "Class ElementIndex Represents a combinator that incorporates the zero-based index of elements into an observable sequence. Inheritance Object ElementIndex Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class ElementIndex Methods Process<TSource>(IObservable<TSource>) Incorporates the zero-based index of elements into an observable sequence. Declaration public IObservable<ElementIndex<TSource>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence for which to incorporate element indices. Returns Type Description IObservable < ElementIndex <TSource>> An observable sequence with index information on elements. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.ElementIndex-1.html": {
    "href": "api/Bonsai.Reactive.ElementIndex-1.html",
    "title": "Struct ElementIndex<T>",
    "keywords": "Struct ElementIndex<T> Represents an element from an observable sequence associated with its index information. The zero-based index represents the order of the element in the sequence. Implements IEquatable < ElementIndex <T>> Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public struct ElementIndex<T> : IEquatable<ElementIndex<T>> Type Parameters Name Description T The type of the value being annotated with index information. Constructors ElementIndex(T, Int32) Initializes a new instance of the ElementIndex<T> class with the specified value and index information. Declaration public ElementIndex(T value, int index) Parameters Type Name Description T value The value to be annotated with index information. Int32 index The zero-based index of the element in the sequence. Properties Index Gets the zero-based index of the element in the sequence. Declaration public readonly int Index { get; } Property Value Type Description Int32 Value Gets the value of the element. Declaration public readonly T Value { get; } Property Value Type Description T Methods Equals(ElementIndex<T>) Returns a value indicating whether this instance has the same value and index as a specified ElementIndex<T> structure. Declaration public bool Equals(ElementIndex<T> other) Parameters Type Name Description ElementIndex <T> other The ElementIndex<T> structure to compare to this instance. Returns Type Description Boolean true if other has the same value and index as this instance; otherwise, false . Equals(Object) Tests to see whether the specified object is an ElementIndex<T> structure with the same value and index as this ElementIndex<T> structure. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The Object to test. Returns Type Description Boolean true if obj is an ElementIndex<T> and has the same value and index as this ElementIndex<T> ; otherwise, false . Overrides ValueType.Equals(Object) GetHashCode() Returns a hash code for this ElementIndex<T> structure. Declaration public override int GetHashCode() Returns Type Description Int32 An integer value that specifies a hash value for this ElementIndex<T> structure. Overrides ValueType.GetHashCode() ToString() Creates a String representation of this ElementIndex<T> structure. Declaration public override string ToString() Returns Type Description String A String containing the Value and Index properties of this ElementIndex<T> structure. Overrides ValueType.ToString() Operators Equality(ElementIndex<T>, ElementIndex<T>) Tests whether two ElementIndex<T> structures are equal. Declaration public static bool operator ==(ElementIndex<T> left, ElementIndex<T> right) Parameters Type Name Description ElementIndex <T> left The ElementIndex<T> structure on the left of the equality operator. ElementIndex <T> right The ElementIndex<T> structure on the right of the equality operator. Returns Type Description Boolean true if left and right have equal value and index; otherwise, false . Inequality(ElementIndex<T>, ElementIndex<T>) Tests whether two ElementIndex<T> structures are different. Declaration public static bool operator !=(ElementIndex<T> left, ElementIndex<T> right) Parameters Type Name Description ElementIndex <T> left The ElementIndex<T> structure on the left of the inequality operator. ElementIndex <T> right The ElementIndex<T> structure on the right of the inequality operator. Returns Type Description Boolean true if left and right differ either in value or index; false if left and right are equal. Implements System.IEquatable<T>"
  },
  "api/Bonsai.Reactive.First.html": {
    "href": "api/Bonsai.Reactive.First.html",
    "title": "Class First",
    "keywords": "Class First Represents a combinator that returns the first element of an observable sequence. Inheritance Object Combinator First Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class First : Combinator Methods Process<TSource>(IObservable<TSource>) Returns the first element of an observable sequence. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence to take the first element from. Returns Type Description IObservable <TSource> An observable sequence with a single element that contains the first element of the observable sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.FirstOrDefault.html": {
    "href": "api/Bonsai.Reactive.FirstOrDefault.html",
    "title": "Class FirstOrDefault",
    "keywords": "Class FirstOrDefault Represents a combinator that returns the first element of an observable sequence, or a default value if no such element exists. Inheritance Object Combinator FirstOrDefault Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class FirstOrDefault : Combinator Methods Process<TSource>(IObservable<TSource>) Returns the first element of an observable sequence, or a default value if no such element exists. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence to take the first element from. Returns Type Description IObservable <TSource> An observable sequence with a single element that contains the first element of the observable sequence, or a default value if no such element exists. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.Gate.html": {
    "href": "api/Bonsai.Reactive.Gate.html",
    "title": "Class Gate",
    "keywords": "Class Gate Represents a combinator that takes the single next element from the sequence every time the trigger produces an element. Inheritance Object BinaryCombinator Gate Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Gate : BinaryCombinator Methods Process<TSource, TOther>(IObservable<TSource>, IObservable<TOther>) Takes the single next element from the sequence every time the trigger produces an element. Declaration public override IObservable<TSource> Process<TSource, TOther>(IObservable<TSource> source, IObservable<TOther> other) Parameters Type Name Description IObservable <TSource> source The observable sequence to be gated. IObservable <TOther> other The sequence of gate events. Every time a new gate event is received, the single next element from source is allowed to propagate. Returns Type Description IObservable <TSource> The gated observable sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. TOther The type of the elements in the sequence of gate events. Overrides Bonsai.BinaryCombinator.Process<TSource, TOther>(System.IObservable<TSource>, System.IObservable<TOther>)"
  },
  "api/Bonsai.Reactive.GateInterval.html": {
    "href": "api/Bonsai.Reactive.GateInterval.html",
    "title": "Class GateInterval",
    "keywords": "Class GateInterval Represents a combinator that takes the single next element from the sequence every time the specified interval elapses. Inheritance Object Combinator GateInterval Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class GateInterval : Combinator Properties Interval Gets or sets the time interval after which a new element of the sequence is allowed to propagate. Declaration public TimeSpan Interval { get; set; } Property Value Type Description TimeSpan IntervalXml Gets or sets the XML serializable representation of the interval. Declaration [Browsable(false)] public string IntervalXml { get; set; } Property Value Type Description String Methods Process<TSource>(IObservable<TSource>) Takes the single next element from the sequence every time the specified interval elapses. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The observable sequence to be gated. Returns Type Description IObservable <TSource> The gated observable sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.GroupBy.html": {
    "href": "api/Bonsai.Reactive.GroupBy.html",
    "title": "Class GroupBy",
    "keywords": "Class GroupBy Represents a combinator that groups the elements of an observable sequence according to the specified key. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder GroupBy Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class GroupBy : SingleArgumentExpressionBuilder, IExpressionBuilder Properties ElementSelector Gets or sets a string used to specify the properties used as elements in each grouped observable sequence. Declaration public string ElementSelector { get; set; } Property Value Type Description String KeySelector Gets or sets a string used to specify a key for each element of the observable sequence. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.html": {
    "href": "api/Bonsai.Reactive.html",
    "title": "Namespace Bonsai.Reactive",
    "keywords": "Namespace Bonsai.Reactive Classes Accumulate Represents a combinator that computes the cumulative sum of an observable sequence and returns each intermediate result. Amb Represents a combinator which propagates the observable sequence that reacts first. Average Represents a combinator that computes the numerical average of an observable sequence. Buffer Represents a combinator that projects each element of the sequence into zero or more buffers based on element count information. Catch Represents a combinator that continues an observable sequence that is terminated by an exception with the next observable sequence. CombineLatest Represents a combinator that combines values from the source sequences whenever any of the sequences produces an element. CombineTimestamp Represents a combinator that converts element-timestamp tuples of an observable sequence into proper timestamped elements. Concat Represents a combinator that concatenates any number of observable sequences as long as the previous sequence terminated successfully. Count Represents a combinator that returns an observable sequence containing an integer representing the total number of elements in an observable sequence. Delay Represents a combinator that delays the notifications of an observable sequence by the specified relative time duration. DelaySubscription Represents a combinator that time-shifts the observable sequence by delaying the subscription with the specified relative time duration. Dematerialize Represents a combinator that dematerializes the explicit notification values of an observable sequence as implicit notifications. Distinct Represents a combinator that returns an observable sequence containing only distinct elements. DistinctBy Represents a combinator that returns an observable sequence that contains only distinct elements according to the specified key. DistinctUntilChanged Represents a combinator that propagates only distinct contiguous elements of an observable sequence. DistinctUntilChangedBy Represents a combinator that ensures that only distinct contiguous elements according to the specified key are propagated. ElementAccumulation<TAccumulation, TElement> Represents the current state of an accumulation over an observable sequence. ElementCountWindow Represents a combinator that projects each element of an observable sequence into zero or more windows based on element count information. ElementIndex Represents a combinator that incorporates the zero-based index of elements into an observable sequence. First Represents a combinator that returns the first element of an observable sequence. FirstOrDefault Represents a combinator that returns the first element of an observable sequence, or a default value if no such element exists. Gate Represents a combinator that takes the single next element from the sequence every time the trigger produces an element. GateInterval Represents a combinator that takes the single next element from the sequence every time the specified interval elapses. GroupBy Represents a combinator that groups the elements of an observable sequence according to the specified key. IgnoreElements Represents a combinator that ignores all elements in an observable sequence leaving only the termination messages. IsEmpty Represents a combinator that determines whether the observable sequence is empty. Last Represents a combinator that returns the last element of an observable sequence. LastOrDefault Represents a combinator that returns the last element of an observable sequence, or a default value if no such element exists. Materialize Represents a combinator that materializes the implicit notifications of an observable sequence as explicit notification values. Max Represents a combinator that computes the maximum element in an observable sequence. MaxBy Represents a combinator that returns the elements in the observable sequence with the maximum key value. Merge Represents a combinator that merges any number of observable sequences into a single observable sequence. Min Represents a combinator that computes the minimum element in an observable sequence. MinBy Represents a combinator that returns the elements in the observable sequence with the minimum key value. OnErrorResumeNext Represents a combinator that concatenates any number of observable sequences even if any of the sequences terminates exceptionally. OrderBy Represents a combinator that sorts the elements of the input enumerable sequences according to the specified key. OrderByDescending Represents a combinator that sorts the elements of the input enumerable sequences according to the specified key. Range Represents an observable sequence of integral numbers within a specified range. Repeat Represents a combinator that repeats an observable sequence indefinitely. RepeatCount Represents a combinator that repeats an observable sequence a specified number of times. Retry Represents a combinator that repeats an observable sequence until it successfully terminates. RetryCount Represents a combinator that repeats an observable sequence the specified number of times or until it successfully terminates. Sample Represents a combinator that samples an observable sequence using a second sequence producing sampling ticks. SampleInterval Represents a combinator that samples the observable sequence at each interval. Upon each sampling tick, the latest element (if any) in the source sequence during the last sampling interval is sent to the resulting sequence. SequenceEqual Represents a combinator which determines whether two sequences are equal by comparing the elements pairwise. Skip Represents a combinator that bypasses the specified number of elements at the start of an observable sequence and returns the remaining elements. SkipLast Represents a combinator that bypasses the specified number of elements at the end of an observable sequence. SkipUntil Represents a combinator that returnsthe elements from the source sequence only after the other sequence produces an element. Slice Represents a combinator that extracts a range of elements from an observable sequence. SubscribeWhen Represents a combinator that subscribes to an observable sequence only after the second sequence produces an element. Sum Represents a combinator that computes the sum of an observable sequence. Switch Represents a combinator that transforms a sequence of windows into a sequence of values produced only from the most recent window. Synchronize Represents a combinator that synchronizes the observable sequence such that observer notifications cannot be delivered concurrently. Take Represents a combinator that returns the specified number of contiguous elements from the start of an observable sequence. TakeLast Represents a combinator that returns a specified number of contiguous elements from the end of an observable sequence. TakeUntil Represents a combinator that returns elements from an observable sequence only until the second sequence produces an element. ThenBy Represents a combinator that sorts the elements of the input enumerable sequences according to the specified key. ThenByDescending Represents a combinator that sorts the elements of the input enumerable sequences according to the specified key. Throttle Represents a combinator that ignores elements from an observable sequence which are followed by another element before the specified duration elapses. TimedGate Represents a combinator that takes the single next element from the sequence if this element is produced within a specified time interval after the gate produces an element. TimeInterval Represents a combinator that records the time interval between consecutive values produced by an observable sequence. Timeout Represents a combinator that raises an error if the next element is not received within the specified timeout duration from the previous element. Timer Represents an observable sequence that periodically produces a value after the specified initial relative due time has elapsed. TimeSpanWindow Represents a combinator that projects each element of an observable sequence into zero or more windows based on timing information. Timestamp Represents a combinator that records the timestamp for each element produced by an observable sequence. ToArray Represents a combinator that creates an array containing every element in the observable sequence. ToDictionary Represents a combinator that creates a dictionary from an observable sequence according to the specified key, and optional element selector function. ToList Represents a combinator that creates a list containing every element in the observable sequence. ToLookup Represents a combinator that creates a lookup from an observable sequence according to the specified key, and optional element selector function. TriggeredBuffer Represents a combinator that projects each element of an observable sequence into zero or more buffers aligned on an external trigger. TriggeredWindow Represents a combinator that projects each element of an observable sequence into zero or more windows aligned on an external trigger. WithLatestFrom Represents a combinator that combines the latest values from the source sequences only when the first sequence produces an element. Zip Represents a combinator that combines values from the source sequences whenever all of the sequences have produced an element. Structs ElementIndex<T> Represents an element from an observable sequence associated with its index information. The zero-based index represents the order of the element in the sequence."
  },
  "api/Bonsai.Reactive.IgnoreElements.html": {
    "href": "api/Bonsai.Reactive.IgnoreElements.html",
    "title": "Class IgnoreElements",
    "keywords": "Class IgnoreElements Represents a combinator that ignores all elements in an observable sequence leaving only the termination messages. Inheritance Object Combinator IgnoreElements Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class IgnoreElements : Combinator Methods Process<TSource>(IObservable<TSource>) Ignores all elements in an observable sequence leaving only the termination messages. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence. Returns Type Description IObservable <TSource> An empty observable sequence that signals termination, successful or exceptional, of the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.IsEmpty.html": {
    "href": "api/Bonsai.Reactive.IsEmpty.html",
    "title": "Class IsEmpty",
    "keywords": "Class IsEmpty Represents a combinator that determines whether the observable sequence is empty. Inheritance Object IsEmpty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class IsEmpty Methods Process<TSource>(IObservable<TSource>) Determines whether the observable sequence is empty. Declaration public IObservable<bool> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to check. Returns Type Description IObservable < Boolean > An observable sequence containing a single element determining whether the source sequence is empty. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.Last.html": {
    "href": "api/Bonsai.Reactive.Last.html",
    "title": "Class Last",
    "keywords": "Class Last Represents a combinator that returns the last element of an observable sequence. Inheritance Object Combinator Last Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Last : Combinator Methods Process<TSource>(IObservable<TSource>) Returns the last element of an observable sequence. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence to take the last element from. Returns Type Description IObservable <TSource> An observable sequence with a single element that contains the last element of the observable sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.LastOrDefault.html": {
    "href": "api/Bonsai.Reactive.LastOrDefault.html",
    "title": "Class LastOrDefault",
    "keywords": "Class LastOrDefault Represents a combinator that returns the last element of an observable sequence, or a default value if no such element exists. Inheritance Object Combinator LastOrDefault Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class LastOrDefault : Combinator Methods Process<TSource>(IObservable<TSource>) Returns the last element of an observable sequence, or a default value if no such element exists. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence to take the last element from. Returns Type Description IObservable <TSource> An observable sequence with a single element that contains the last element of the observable sequence, or a default value if no such element exists. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.Materialize.html": {
    "href": "api/Bonsai.Reactive.Materialize.html",
    "title": "Class Materialize",
    "keywords": "Class Materialize Represents a combinator that materializes the implicit notifications of an observable sequence as explicit notification values. Inheritance Object Materialize Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Materialize Methods Process<TSource>(IObservable<TSource>) Materializes the implicit notifications of an observable sequence as explicit notification values. Declaration public IObservable<Notification<TSource>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source An observable sequence to get notification values for. Returns Type Description IObservable < Notification <TSource>> An observable sequence containing the materialized notification values from the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.Max.html": {
    "href": "api/Bonsai.Reactive.Max.html",
    "title": "Class Max",
    "keywords": "Class Max Represents a combinator that computes the maximum element in an observable sequence. Inheritance Object Max Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Max Methods Process(IObservable<Decimal>) Returns the maximum value in an observable sequence of Decimal values. Declaration public IObservable<decimal> Process(IObservable<decimal> source) Parameters Type Name Description IObservable < Decimal > source A sequence of Decimal values to determine the maximum value of. Returns Type Description IObservable < Decimal > An observable sequence containing a single element with the maximum value in the source sequence. Process(IObservable<Double>) Returns the maximum value in an observable sequence of Double values. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source A sequence of Double values to determine the maximum value of. Returns Type Description IObservable < Double > An observable sequence containing a single element with the maximum value in the source sequence. Process(IObservable<Int32>) Returns the maximum value in an observable sequence of Int32 values. Declaration public IObservable<int> Process(IObservable<int> source) Parameters Type Name Description IObservable < Int32 > source A sequence of Int32 values to determine the maximum value of. Returns Type Description IObservable < Int32 > An observable sequence containing a single element with the maximum value in the source sequence. Process(IObservable<Int64>) Returns the maximum value in an observable sequence of Int64 values. Declaration public IObservable<long> Process(IObservable<long> source) Parameters Type Name Description IObservable < Int64 > source A sequence of Int64 values to determine the maximum value of. Returns Type Description IObservable < Int64 > An observable sequence containing a single element with the maximum value in the source sequence. Process(IObservable<Nullable<Decimal>>) Returns the maximum value in an observable sequence of nullable Decimal values. Declaration public IObservable<decimal?> Process(IObservable<decimal?> source) Parameters Type Name Description IObservable < Nullable < Decimal >> source A sequence of nullable Decimal values to determine the maximum value of. Returns Type Description IObservable < Nullable < Decimal >> An observable sequence containing a single element with the maximum value in the source sequence. Process(IObservable<Nullable<Double>>) Returns the maximum value in an observable sequence of nullable Double values. Declaration public IObservable<double?> Process(IObservable<double?> source) Parameters Type Name Description IObservable < Nullable < Double >> source A sequence of nullable Double values to determine the maximum value of. Returns Type Description IObservable < Nullable < Double >> An observable sequence containing a single element with the maximum value in the source sequence. Process(IObservable<Nullable<Int32>>) Returns the maximum value in an observable sequence of nullable Int32 values. Declaration public IObservable<int?> Process(IObservable<int?> source) Parameters Type Name Description IObservable < Nullable < Int32 >> source A sequence of nullable Int32 values to determine the maximum value of. Returns Type Description IObservable < Nullable < Int32 >> An observable sequence containing a single element with the maximum value in the source sequence. Process(IObservable<Nullable<Int64>>) Returns the maximum value in an observable sequence of nullable Int64 values. Declaration public IObservable<long?> Process(IObservable<long?> source) Parameters Type Name Description IObservable < Nullable < Int64 >> source A sequence of nullable Int64 values to determine the maximum value of. Returns Type Description IObservable < Nullable < Int64 >> An observable sequence containing a single element with the maximum value in the source sequence. Process(IObservable<Nullable<Single>>) Returns the maximum value in an observable sequence of nullable Single values. Declaration public IObservable<float?> Process(IObservable<float?> source) Parameters Type Name Description IObservable < Nullable < Single >> source A sequence of nullable Single values to determine the maximum value of. Returns Type Description IObservable < Nullable < Single >> An observable sequence containing a single element with the maximum value in the source sequence. Process(IObservable<Single>) Returns the maximum value in an observable sequence of Single values. Declaration public IObservable<float> Process(IObservable<float> source) Parameters Type Name Description IObservable < Single > source A sequence of Single values to determine the maximum value of. Returns Type Description IObservable < Single > An observable sequence containing a single element with the maximum value in the source sequence. Process<TSource>(IObservable<TSource>) Returns the maximum element in an observable sequence. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source An observable sequence to determine the maximum element of. Returns Type Description IObservable <TSource> An observable sequence containing a single element with the maximum value in the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.MaxBy.html": {
    "href": "api/Bonsai.Reactive.MaxBy.html",
    "title": "Class MaxBy",
    "keywords": "Class MaxBy Represents a combinator that returns the elements in the observable sequence with the maximum key value. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder MaxBy Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class MaxBy : SingleArgumentExpressionBuilder, IExpressionBuilder Properties KeySelector Gets or sets a string used to specify a key for each element of the observable sequence. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.Merge.html": {
    "href": "api/Bonsai.Reactive.Merge.html",
    "title": "Class Merge",
    "keywords": "Class Merge Represents a combinator that merges any number of observable sequences into a single observable sequence. Inheritance Object Merge Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Merge Methods Process<TSource>(IObservable<TSource>, IObservable<TSource>) Merges elements from two observable sequences into a single observable sequence. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> first, IObservable<TSource> second) Parameters Type Name Description IObservable <TSource> first The first observable sequence. IObservable <TSource> second The second observable sequence. Returns Type Description IObservable <TSource> The observable sequence that merges the elements of the two sequences. Type Parameters Name Description TSource The type of the elements in the first sequence. Process<TSource>(IObservable<TSource>, IObservable<TSource>, IObservable<TSource>[]) Merges elements from the specified observable sequences into a single observable sequence. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> first, IObservable<TSource> second, params IObservable<TSource>[] remainder) Parameters Type Name Description IObservable <TSource> first The first observable sequence. IObservable <TSource> second The second observable sequence. IObservable <TSource>[] remainder The remaining observable sequences to merge. Returns Type Description IObservable <TSource> The observable sequence that merges the elements of the observable sequences. Type Parameters Name Description TSource The type of the elements in the source sequences. Process<TSource>(IObservable<IEnumerable<TSource>>) Merges all inner enumerable sequences into one observable sequence. Declaration public IObservable<TSource> Process<TSource>(IObservable<IEnumerable<TSource>> sources) Parameters Type Name Description IObservable < IEnumerable <TSource>> sources The observable sequence of inner enumerable sequences. Returns Type Description IObservable <TSource> An observable sequence that contains all the elements of each inner enumerable sequence. Type Parameters Name Description TSource The type of the elements in the source sequences. Process<TSource>(IObservable<IObservable<TSource>>) Merges elements from all inner observable sequences into a single observable sequence. Declaration public IObservable<TSource> Process<TSource>(IObservable<IObservable<TSource>> sources) Parameters Type Name Description IObservable < IObservable <TSource>> sources The observable sequence of inner observable sequences. Returns Type Description IObservable <TSource> The observable sequence that merges the elements of the inner sequences. Type Parameters Name Description TSource The type of the elements in the source sequences."
  },
  "api/Bonsai.Reactive.Min.html": {
    "href": "api/Bonsai.Reactive.Min.html",
    "title": "Class Min",
    "keywords": "Class Min Represents a combinator that computes the minimum element in an observable sequence. Inheritance Object Min Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Min Methods Process(IObservable<Decimal>) Returns the minimum value in an observable sequence of Decimal values. Declaration public IObservable<decimal> Process(IObservable<decimal> source) Parameters Type Name Description IObservable < Decimal > source A sequence of Decimal values to determine the minimum value of. Returns Type Description IObservable < Decimal > An observable sequence containing a single element with the minimum value in the source sequence. Process(IObservable<Double>) Returns the minimum value in an observable sequence of Double values. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source A sequence of Double values to determine the minimum value of. Returns Type Description IObservable < Double > An observable sequence containing a single element with the minimum value in the source sequence. Process(IObservable<Int32>) Returns the minimum value in an observable sequence of Int32 values. Declaration public IObservable<int> Process(IObservable<int> source) Parameters Type Name Description IObservable < Int32 > source A sequence of Int32 values to determine the minimum value of. Returns Type Description IObservable < Int32 > An observable sequence containing a single element with the minimum value in the source sequence. Process(IObservable<Int64>) Returns the minimum value in an observable sequence of Int64 values. Declaration public IObservable<long> Process(IObservable<long> source) Parameters Type Name Description IObservable < Int64 > source A sequence of Int64 values to determine the minimum value of. Returns Type Description IObservable < Int64 > An observable sequence containing a single element with the minimum value in the source sequence. Process(IObservable<Nullable<Decimal>>) Returns the minimum value in an observable sequence of nullable Decimal values. Declaration public IObservable<decimal?> Process(IObservable<decimal?> source) Parameters Type Name Description IObservable < Nullable < Decimal >> source A sequence of nullable Decimal values to determine the minimum value of. Returns Type Description IObservable < Nullable < Decimal >> An observable sequence containing a single element with the minimum value in the source sequence. Process(IObservable<Nullable<Double>>) Returns the minimum value in an observable sequence of nullable Double values. Declaration public IObservable<double?> Process(IObservable<double?> source) Parameters Type Name Description IObservable < Nullable < Double >> source A sequence of nullable Double values to determine the minimum value of. Returns Type Description IObservable < Nullable < Double >> An observable sequence containing a single element with the minimum value in the source sequence. Process(IObservable<Nullable<Int32>>) Returns the minimum value in an observable sequence of nullable Int32 values. Declaration public IObservable<int?> Process(IObservable<int?> source) Parameters Type Name Description IObservable < Nullable < Int32 >> source A sequence of nullable Int32 values to determine the minimum value of. Returns Type Description IObservable < Nullable < Int32 >> An observable sequence containing a single element with the minimum value in the source sequence. Process(IObservable<Nullable<Int64>>) Returns the minimum value in an observable sequence of nullable Int64 values. Declaration public IObservable<long?> Process(IObservable<long?> source) Parameters Type Name Description IObservable < Nullable < Int64 >> source A sequence of nullable Int64 values to determine the minimum value of. Returns Type Description IObservable < Nullable < Int64 >> An observable sequence containing a single element with the minimum value in the source sequence. Process(IObservable<Nullable<Single>>) Returns the minimum value in an observable sequence of nullable Single values. Declaration public IObservable<float?> Process(IObservable<float?> source) Parameters Type Name Description IObservable < Nullable < Single >> source A sequence of nullable Single values to determine the minimum value of. Returns Type Description IObservable < Nullable < Single >> An observable sequence containing a single element with the minimum value in the source sequence. Process(IObservable<Single>) Returns the minimum value in an observable sequence of Single values. Declaration public IObservable<float> Process(IObservable<float> source) Parameters Type Name Description IObservable < Single > source A sequence of Single values to determine the minimum value of. Returns Type Description IObservable < Single > An observable sequence containing a single element with the minimum value in the source sequence. Process<TSource>(IObservable<TSource>) Returns the minimum element in an observable sequence. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source An observable sequence to determine the minimum element of. Returns Type Description IObservable <TSource> An observable sequence containing a single element with the minimum value in the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.MinBy.html": {
    "href": "api/Bonsai.Reactive.MinBy.html",
    "title": "Class MinBy",
    "keywords": "Class MinBy Represents a combinator that returns the elements in the observable sequence with the minimum key value. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder MinBy Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class MinBy : SingleArgumentExpressionBuilder, IExpressionBuilder Properties KeySelector Gets or sets a string used to specify a key for each element of the observable sequence. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.OnErrorResumeNext.html": {
    "href": "api/Bonsai.Reactive.OnErrorResumeNext.html",
    "title": "Class OnErrorResumeNext",
    "keywords": "Class OnErrorResumeNext Represents a combinator that concatenates any number of observable sequences even if any of the sequences terminates exceptionally. Inheritance Object OnErrorResumeNext Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class OnErrorResumeNext Methods Process<TSource>(IObservable<TSource>, IObservable<TSource>) Concatenates the second observable sequence to the first observable sequence upon successful or exceptional termination of the first. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> first, IObservable<TSource> second) Parameters Type Name Description IObservable <TSource> first The first observable sequence. IObservable <TSource> second The second observable sequence. Returns Type Description IObservable <TSource> An observable sequence that concatenates the first and second sequence, even if the first sequence terminates exceptionally. Type Parameters Name Description TSource The type of the elements in the first sequence. Process<TSource>(IObservable<TSource>[]) Concatenates all of the specified observable sequences, even if the previous observable sequence terminated exceptionally. Declaration public IObservable<TSource> Process<TSource>(params IObservable<TSource>[] sources) Parameters Type Name Description IObservable <TSource>[] sources The observable sequences to concatenate. Returns Type Description IObservable <TSource> An observable sequence that concatenates the source sequences, even if a sequence terminates exceptionally. Type Parameters Name Description TSource The type of the elements in the source sequences."
  },
  "api/Bonsai.Reactive.OrderBy.html": {
    "href": "api/Bonsai.Reactive.OrderBy.html",
    "title": "Class OrderBy",
    "keywords": "Class OrderBy Represents a combinator that sorts the elements of the input enumerable sequences according to the specified key. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder OrderBy Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class OrderBy : SingleArgumentExpressionBuilder, IExpressionBuilder Properties KeySelector Gets or sets a string used to specify a key for each element of the input enumerable sequences. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.OrderByDescending.html": {
    "href": "api/Bonsai.Reactive.OrderByDescending.html",
    "title": "Class OrderByDescending",
    "keywords": "Class OrderByDescending Represents a combinator that sorts the elements of the input enumerable sequences according to the specified key. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder OrderByDescending Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class OrderByDescending : SingleArgumentExpressionBuilder, IExpressionBuilder Properties KeySelector Gets or sets a string used to specify a key for each element of the input enumerable sequences. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.Range.html": {
    "href": "api/Bonsai.Reactive.Range.html",
    "title": "Class Range",
    "keywords": "Class Range Represents an observable sequence of integral numbers within a specified range. Inheritance Object Source < Int32 > Range Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Range : Source<int> Properties Count Gets or sets the number of sequential integers to generate. Declaration public int Count { get; set; } Property Value Type Description Int32 Start Gets or sets the value of the first integer in the sequence. Declaration public int Start { get; set; } Property Value Type Description Int32 Methods Generate() Generates an observable sequence of integral numbers within a specified range. Declaration public override IObservable<int> Generate() Returns Type Description IObservable < Int32 > An observable sequence that contains a range of sequential integral numbers. Overrides Bonsai.Source<System.Int32>.Generate() Generate<TSource>(IObservable<TSource>) Generates an observable sequence of integral numbers within a specified range whenever the source sequence emits a new element. Declaration public IObservable<int> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence used to generate the range. Returns Type Description IObservable < Int32 > An observable sequence that contains a range of sequential integral numbers for every element in the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.Repeat.html": {
    "href": "api/Bonsai.Reactive.Repeat.html",
    "title": "Class Repeat",
    "keywords": "Class Repeat Represents a combinator that repeats an observable sequence indefinitely. Inheritance Object Combinator Repeat Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Repeat : Combinator Methods Process<TSource>(IObservable<TSource>) Repeats the observable sequence indefinitely. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The observable sequence to repeat. Returns Type Description IObservable <TSource> The observable sequence producing the elements of the given sequence repeatedly and sequentially. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.RepeatCount.html": {
    "href": "api/Bonsai.Reactive.RepeatCount.html",
    "title": "Class RepeatCount",
    "keywords": "Class RepeatCount Represents a combinator that repeats an observable sequence a specified number of times. Inheritance Object Combinator RepeatCount Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class RepeatCount : Combinator Properties Count Gets or sets the number of times to repeat the sequence. Declaration public int Count { get; set; } Property Value Type Description Int32 Methods Process<TSource>(IObservable<TSource>) Repeats the observable sequence a specified number of times. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The observable sequence to repeat. Returns Type Description IObservable <TSource> The observable sequence producing the elements of the given sequence repeatedly. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.Retry.html": {
    "href": "api/Bonsai.Reactive.Retry.html",
    "title": "Class Retry",
    "keywords": "Class Retry Represents a combinator that repeats an observable sequence until it successfully terminates. Inheritance Object Combinator Retry Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Retry : Combinator Methods Process<TSource>(IObservable<TSource>) Repeats the observable sequence until it successfully terminates. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The observable sequence to repeat until it successfully terminates. Returns Type Description IObservable <TSource> The observable sequence producing the elements of the given sequence repeatedly until it terminates successfully. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.RetryCount.html": {
    "href": "api/Bonsai.Reactive.RetryCount.html",
    "title": "Class RetryCount",
    "keywords": "Class RetryCount Represents a combinator that repeats an observable sequence the specified number of times or until it successfully terminates. Inheritance Object Combinator RetryCount Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class RetryCount : Combinator Properties Count Gets or sets the number of times to repeat the sequence. Declaration public int Count { get; set; } Property Value Type Description Int32 Methods Process<TSource>(IObservable<TSource>) Repeats the observable sequence the specified number of times or until it successfully terminates. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The observable sequence to repeat until it successfully terminates. Returns Type Description IObservable <TSource> The observable sequence producing the elements of the given sequence repeatedly until it terminates successfully. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.Sample.html": {
    "href": "api/Bonsai.Reactive.Sample.html",
    "title": "Class Sample",
    "keywords": "Class Sample Represents a combinator that samples an observable sequence using a second sequence producing sampling ticks. Inheritance Object BinaryCombinator Sample Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Sample : BinaryCombinator Methods Process<TSource, TOther>(IObservable<TSource>, IObservable<TOther>) Samples the source observable sequence using a sampler observable sequence producing sampling ticks. Upon each sampling tick, the latest element (if any) in the source sequence during the last sampling interval is sent to the resulting sequence. Declaration public override IObservable<TSource> Process<TSource, TOther>(IObservable<TSource> source, IObservable<TOther> other) Parameters Type Name Description IObservable <TSource> source The source sequence to sample. IObservable <TOther> other The sampling tick sequence. Returns Type Description IObservable <TSource> The sampled observable sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. TOther The type of the elements in the sampling sequence. Overrides Bonsai.BinaryCombinator.Process<TSource, TOther>(System.IObservable<TSource>, System.IObservable<TOther>)"
  },
  "api/Bonsai.Reactive.SampleInterval.html": {
    "href": "api/Bonsai.Reactive.SampleInterval.html",
    "title": "Class SampleInterval",
    "keywords": "Class SampleInterval Represents a combinator that samples the observable sequence at each interval. Upon each sampling tick, the latest element (if any) in the source sequence during the last sampling interval is sent to the resulting sequence. Inheritance Object Combinator SampleInterval Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class SampleInterval : Combinator Properties Interval Gets or sets the interval at which to sample. If this value is equal to Zero , the scheduler will continuously sample the stream. Declaration public TimeSpan Interval { get; set; } Property Value Type Description TimeSpan IntervalXml Gets or sets the XML serializable representation of the interval. Declaration [Browsable(false)] public string IntervalXml { get; set; } Property Value Type Description String Methods Process<TSource>(IObservable<TSource>) Samples the observable sequence at each interval. Upon each sampling tick, the latest element (if any) in the source sequence during the last sampling interval is sent to the resulting sequence. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to sample. Returns Type Description IObservable <TSource> The sampled observable sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.SequenceEqual.html": {
    "href": "api/Bonsai.Reactive.SequenceEqual.html",
    "title": "Class SequenceEqual",
    "keywords": "Class SequenceEqual Represents a combinator which determines whether two sequences are equal by comparing the elements pairwise. Inheritance Object SequenceEqual Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class SequenceEqual Methods Process<TSource>(IObservable<TSource>, IObservable<TSource>) Determines whether two sequences are equal by comparing the elements pairwise. Declaration public IObservable<bool> Process<TSource>(IObservable<TSource> first, IObservable<TSource> second) Parameters Type Name Description IObservable <TSource> first First observable sequence. IObservable <TSource> second Second observable sequence. Returns Type Description IObservable < Boolean > An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type. Type Parameters Name Description TSource The type of the elements in the source sequences."
  },
  "api/Bonsai.Reactive.Skip.html": {
    "href": "api/Bonsai.Reactive.Skip.html",
    "title": "Class Skip",
    "keywords": "Class Skip Represents a combinator that bypasses the specified number of elements at the start of an observable sequence and returns the remaining elements. Inheritance Object Combinator Skip Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Skip : Combinator Constructors Skip() Initializes a new instance of the Skip class. Declaration public Skip() Properties Count Gets or sets the number of elements to skip. Declaration public int Count { get; set; } Property Value Type Description Int32 Methods Process<TSource>(IObservable<TSource>) Bypasses the specified number of elements at the start of an observable sequence and returns the remaining elements. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence to take elements from. Returns Type Description IObservable <TSource> An observable sequence that contains the elements that occur after the specified index in the input sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.SkipLast.html": {
    "href": "api/Bonsai.Reactive.SkipLast.html",
    "title": "Class SkipLast",
    "keywords": "Class SkipLast Represents a combinator that bypasses the specified number of elements at the end of an observable sequence. Inheritance Object Combinator SkipLast Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class SkipLast : Combinator Constructors SkipLast() Initializes a new instance of the SkipLast class. Declaration public SkipLast() Properties Count Gets or sets the number of elements to skip at the end of the sequence. Declaration public int Count { get; set; } Property Value Type Description Int32 Methods Process<TSource>(IObservable<TSource>) Bypasses the specified number of elements at the end of an observable sequence. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence to take elements from. Returns Type Description IObservable <TSource> An observable sequence containing the source sequence elements except for the bypassed ones at the end. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.SkipUntil.html": {
    "href": "api/Bonsai.Reactive.SkipUntil.html",
    "title": "Class SkipUntil",
    "keywords": "Class SkipUntil Represents a combinator that returnsthe elements from the source sequence only after the other sequence produces an element. Inheritance Object BinaryCombinator SkipUntil Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class SkipUntil : BinaryCombinator Methods Process<TSource, TOther>(IObservable<TSource>, IObservable<TOther>) Returns the elements from the source observable sequence only after the other observable sequence produces an element. Declaration public override IObservable<TSource> Process<TSource, TOther>(IObservable<TSource> source, IObservable<TOther> other) Parameters Type Name Description IObservable <TSource> source The source sequence to propagate elements for. IObservable <TOther> other The observable sequence that triggers propagation of elements of the source sequence. Returns Type Description IObservable <TSource> An observable sequence containing the elements of the source sequence starting from the point the other sequence triggered propagation. Type Parameters Name Description TSource The type of the elements in the source sequence. TOther The type of the elements in the other sequence that indicates the end of the skip behavior. Overrides Bonsai.BinaryCombinator.Process<TSource, TOther>(System.IObservable<TSource>, System.IObservable<TOther>)"
  },
  "api/Bonsai.Reactive.Slice.html": {
    "href": "api/Bonsai.Reactive.Slice.html",
    "title": "Class Slice",
    "keywords": "Class Slice Represents a combinator that extracts a range of elements from an observable sequence. Inheritance Object Combinator Slice Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Slice : Combinator Constructors Slice() Initializes a new instance of the Slice class. Declaration public Slice() Properties Start Gets or sets the element index at which the slice begins. Declaration public int Start { get; set; } Property Value Type Description Int32 Step Gets or sets the number of elements to skip between slice elements. Declaration public int Step { get; set; } Property Value Type Description Int32 Stop Gets or sets the optional element index at which the slice ends. Declaration public int? Stop { get; set; } Property Value Type Description Nullable < Int32 > Methods Process<TSource>(IObservable<TSource>) Extracts a range of elements from an observable sequence. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to slice. Returns Type Description IObservable <TSource> The sliced sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.SubscribeWhen.html": {
    "href": "api/Bonsai.Reactive.SubscribeWhen.html",
    "title": "Class SubscribeWhen",
    "keywords": "Class SubscribeWhen Represents a combinator that subscribes to an observable sequence only after the second sequence produces an element. Inheritance Object BinaryCombinator SubscribeWhen Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class SubscribeWhen : BinaryCombinator Methods Process<TSource, TOther>(IObservable<TSource>, IObservable<TOther>) Subscribes to an observable sequence only after the second sequence produces an element. Declaration public override IObservable<TSource> Process<TSource, TOther>(IObservable<TSource> source, IObservable<TOther> other) Parameters Type Name Description IObservable <TSource> source The sequence to subscribe to. IObservable <TOther> other The observable sequence that initiates subscription to the source sequence. Returns Type Description IObservable <TSource> An observable sequence that propagates elements of the source sequence but where subscription is delayed until a second sequence produces an element. Type Parameters Name Description TSource The type of the elements in the source sequence. TOther The type of the elements in the other sequence that indicates the start of subscription to the first sequence. Overrides Bonsai.BinaryCombinator.Process<TSource, TOther>(System.IObservable<TSource>, System.IObservable<TOther>)"
  },
  "api/Bonsai.Reactive.Sum.html": {
    "href": "api/Bonsai.Reactive.Sum.html",
    "title": "Class Sum",
    "keywords": "Class Sum Represents a combinator that computes the sum of an observable sequence. Inheritance Object Sum Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Sum Methods Process(IObservable<Decimal>) Computes the sum of a sequence of Decimal values. Declaration public IObservable<decimal> Process(IObservable<decimal> source) Parameters Type Name Description IObservable < Decimal > source A sequence of Decimal values to calculate the sum of. Returns Type Description IObservable < Decimal > An observable sequence containing a single element with the sum of the values in the source sequence. Process(IObservable<Double>) Computes the sum of a sequence of Double values. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source A sequence of Double values to calculate the sum of. Returns Type Description IObservable < Double > An observable sequence containing a single element with the sum of the values in the source sequence. Process(IObservable<Int32>) Computes the sum of a sequence of Int32 values. Declaration public IObservable<int> Process(IObservable<int> source) Parameters Type Name Description IObservable < Int32 > source A sequence of Int32 values to calculate the sum of. Returns Type Description IObservable < Int32 > An observable sequence containing a single element with the sum of the values in the source sequence. Process(IObservable<Int64>) Computes the sum of a sequence of Int64 values. Declaration public IObservable<long> Process(IObservable<long> source) Parameters Type Name Description IObservable < Int64 > source A sequence of Int64 values to calculate the sum of. Returns Type Description IObservable < Int64 > An observable sequence containing a single element with the sum of the values in the source sequence. Process(IObservable<Nullable<Decimal>>) Computes the sum of a sequence of nullable Decimal values. Declaration public IObservable<decimal?> Process(IObservable<decimal?> source) Parameters Type Name Description IObservable < Nullable < Decimal >> source A sequence of nullable Decimal values to calculate the sum of. Returns Type Description IObservable < Nullable < Decimal >> An observable sequence containing a single element with the sum of the values in the source sequence. Process(IObservable<Nullable<Double>>) Computes the sum of a sequence of nullable Double values. Declaration public IObservable<double?> Process(IObservable<double?> source) Parameters Type Name Description IObservable < Nullable < Double >> source A sequence of nullable Double values to calculate the sum of. Returns Type Description IObservable < Nullable < Double >> An observable sequence containing a single element with the sum of the values in the source sequence. Process(IObservable<Nullable<Int32>>) Computes the sum of a sequence of nullable Int32 values. Declaration public IObservable<int?> Process(IObservable<int?> source) Parameters Type Name Description IObservable < Nullable < Int32 >> source A sequence of nullable Int32 values to calculate the sum of. Returns Type Description IObservable < Nullable < Int32 >> An observable sequence containing a single element with the sum of the values in the source sequence. Process(IObservable<Nullable<Int64>>) Computes the sum of a sequence of nullable Int64 values. Declaration public IObservable<long?> Process(IObservable<long?> source) Parameters Type Name Description IObservable < Nullable < Int64 >> source A sequence of nullable Int64 values to calculate the sum of. Returns Type Description IObservable < Nullable < Int64 >> An observable sequence containing a single element with the sum of the values in the source sequence. Process(IObservable<Nullable<Single>>) Computes the sum of a sequence of nullable Single values. Declaration public IObservable<float?> Process(IObservable<float?> source) Parameters Type Name Description IObservable < Nullable < Single >> source A sequence of nullable Single values to calculate the sum of. Returns Type Description IObservable < Nullable < Single >> An observable sequence containing a single element with the sum of the values in the source sequence. Process(IObservable<Single>) Computes the sum of a sequence of Single values. Declaration public IObservable<float> Process(IObservable<float> source) Parameters Type Name Description IObservable < Single > source A sequence of Single values to calculate the sum of. Returns Type Description IObservable < Single > An observable sequence containing a single element with the sum of the values in the source sequence."
  },
  "api/Bonsai.Reactive.Switch.html": {
    "href": "api/Bonsai.Reactive.Switch.html",
    "title": "Class Switch",
    "keywords": "Class Switch Represents a combinator that transforms a sequence of windows into a sequence of values produced only from the most recent window. Inheritance Object Switch Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Switch Methods Process<TSource>(IObservable<IObservable<TSource>>) Transforms a sequence of higher-order observables into a sequence of values produced only from the most recent observable. Declaration public IObservable<TSource> Process<TSource>(IObservable<IObservable<TSource>> source) Parameters Type Name Description IObservable < IObservable <TSource>> source The source sequence of higher-order observables to switch over. Returns Type Description IObservable <TSource> An observable sequence of values produced only from the most recent observable. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.Synchronize.html": {
    "href": "api/Bonsai.Reactive.Synchronize.html",
    "title": "Class Synchronize",
    "keywords": "Class Synchronize Represents a combinator that synchronizes the observable sequence such that observer notifications cannot be delivered concurrently. Inheritance Object Combinator Synchronize Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Synchronize : Combinator Methods Process<TSource>(IObservable<TSource>) Synchronizes the observable sequence such that observer notifications cannot be delivered concurrently. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The observable sequence to synchronize. Returns Type Description IObservable <TSource> The source sequence whose outgoing calls to observers are synchronized. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.Take.html": {
    "href": "api/Bonsai.Reactive.Take.html",
    "title": "Class Take",
    "keywords": "Class Take Represents a combinator that returns the specified number of contiguous elements from the start of an observable sequence. Inheritance Object Combinator Take Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Take : Combinator Constructors Take() Initializes a new instance of the Take class. Declaration public Take() Properties Count Gets or sets the number of elements to take. Declaration public int Count { get; set; } Property Value Type Description Int32 Methods Process<TSource>(IObservable<TSource>) Returns the specified number of contiguous elements from the start of an observable sequence. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence to take elements from. Returns Type Description IObservable <TSource> An observable sequence that contains the specified number of elements from the start of the input sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.TakeLast.html": {
    "href": "api/Bonsai.Reactive.TakeLast.html",
    "title": "Class TakeLast",
    "keywords": "Class TakeLast Represents a combinator that returns a specified number of contiguous elements from the end of an observable sequence. Inheritance Object Combinator TakeLast Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class TakeLast : Combinator Constructors TakeLast() Initializes a new instance of the TakeLast class. Declaration public TakeLast() Properties Count Gets or sets the number of elements to take from the end of the sequence. Declaration public int Count { get; set; } Property Value Type Description Int32 Methods Process<TSource>(IObservable<TSource>) Returns a specified number of contiguous elements from the end of an observable sequence. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence to take elements from. Returns Type Description IObservable <TSource> An observable sequence containing the specified number of elements from the end of the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.TakeUntil.html": {
    "href": "api/Bonsai.Reactive.TakeUntil.html",
    "title": "Class TakeUntil",
    "keywords": "Class TakeUntil Represents a combinator that returns elements from an observable sequence only until the second sequence produces an element. Inheritance Object BinaryCombinator TakeUntil Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class TakeUntil : BinaryCombinator Methods Process<TSource, TOther>(IObservable<TSource>, IObservable<TOther>) Returns elements from an observable sequence only until the second sequence produces an element. Declaration public override IObservable<TSource> Process<TSource, TOther>(IObservable<TSource> source, IObservable<TOther> other) Parameters Type Name Description IObservable <TSource> source The sequence to take elements from. IObservable <TOther> other The observable sequence that terminates propagation of elements of the source sequence. Returns Type Description IObservable <TSource> An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation. Type Parameters Name Description TSource The type of the elements in the source sequence. TOther The type of the elements in the other sequence that indicates the end of take behavior. Overrides Bonsai.BinaryCombinator.Process<TSource, TOther>(System.IObservable<TSource>, System.IObservable<TOther>)"
  },
  "api/Bonsai.Reactive.ThenBy.html": {
    "href": "api/Bonsai.Reactive.ThenBy.html",
    "title": "Class ThenBy",
    "keywords": "Class ThenBy Represents a combinator that sorts the elements of the input enumerable sequences according to the specified key. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder ThenBy Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class ThenBy : SingleArgumentExpressionBuilder, IExpressionBuilder Properties KeySelector Gets or sets a string used to specify a key for each element of the input enumerable sequences. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.ThenByDescending.html": {
    "href": "api/Bonsai.Reactive.ThenByDescending.html",
    "title": "Class ThenByDescending",
    "keywords": "Class ThenByDescending Represents a combinator that sorts the elements of the input enumerable sequences according to the specified key. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder ThenByDescending Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class ThenByDescending : SingleArgumentExpressionBuilder, IExpressionBuilder Properties KeySelector Gets or sets a string used to specify a key for each element of the input enumerable sequences. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.Throttle.html": {
    "href": "api/Bonsai.Reactive.Throttle.html",
    "title": "Class Throttle",
    "keywords": "Class Throttle Represents a combinator that ignores elements from an observable sequence which are followed by another element before the specified duration elapses. Inheritance Object Combinator Throttle Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Throttle : Combinator Properties DueTime Gets or sets the time interval that must elapse before a value is propagated. Declaration public TimeSpan DueTime { get; set; } Property Value Type Description TimeSpan DueTimeXml Gets or sets the XML serializable representation of the throttling duration. Declaration [Browsable(false)] public string DueTimeXml { get; set; } Property Value Type Description String Methods Process<TSource>(IObservable<TSource>) Ignores elements from an observable sequence which are followed by another element before the specified duration elapses. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to throttle. Returns Type Description IObservable <TSource> The throttled sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.TimedGate.html": {
    "href": "api/Bonsai.Reactive.TimedGate.html",
    "title": "Class TimedGate",
    "keywords": "Class TimedGate Represents a combinator that takes the single next element from the sequence if this element is produced within a specified time interval after the gate produces an element. Inheritance Object BinaryCombinator TimedGate Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class TimedGate : BinaryCombinator Properties TimeSpan Gets or sets the maximum interval that can elapse after a gate event for a source element to be propagated. Declaration public TimeSpan TimeSpan { get; set; } Property Value Type Description TimeSpan TimeSpanXml Gets or sets the XML serializable representation of the maximum gate time span. Declaration [Browsable(false)] public string TimeSpanXml { get; set; } Property Value Type Description String Methods Process<TSource, TOther>(IObservable<TSource>, IObservable<TOther>) Takes the single next element from the sequence if this element is produced within a specified time interval after the gate produces an element. Declaration public override IObservable<TSource> Process<TSource, TOther>(IObservable<TSource> source, IObservable<TOther> other) Parameters Type Name Description IObservable <TSource> source The observable sequence to be gated. IObservable <TOther> other The sequence of gate events. Every time a new gate event is received, the single next element from source is allowed to propagate if it is produced before the maximum TimeSpan elapses. Returns Type Description IObservable <TSource> The gated observable sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. TOther The type of the elements in the sequence of gate events. Overrides Bonsai.BinaryCombinator.Process<TSource, TOther>(System.IObservable<TSource>, System.IObservable<TOther>)"
  },
  "api/Bonsai.Reactive.TimeInterval.html": {
    "href": "api/Bonsai.Reactive.TimeInterval.html",
    "title": "Class TimeInterval",
    "keywords": "Class TimeInterval Represents a combinator that records the time interval between consecutive values produced by an observable sequence. Inheritance Object TimeInterval Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class TimeInterval Methods Process<TSource>(IObservable<TSource>) Records the time interval between consecutive values produced by an observable sequence using a high resolution timer, if available. Declaration public IObservable<Reactive.TimeInterval<TSource>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to record time intervals for. Returns Type Description IObservable < System.Reactive.TimeInterval <TSource>> An observable sequence with time interval information on elements. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.Timeout.html": {
    "href": "api/Bonsai.Reactive.Timeout.html",
    "title": "Class Timeout",
    "keywords": "Class Timeout Represents a combinator that raises an error if the next element is not received within the specified timeout duration from the previous element. Inheritance Object Combinator Timeout Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Timeout : Combinator Properties DueTime Gets or sets the maximum duration between values before a timeout occurs. Declaration public TimeSpan DueTime { get; set; } Property Value Type Description TimeSpan DueTimeXml Gets or sets the XML serializable representation of the timeout duration. Declaration [Browsable(false)] public string DueTimeXml { get; set; } Property Value Type Description String Methods Process<TSource>(IObservable<TSource>) Applies a timeout policy for each element in the observable sequence. If the next element is not received within the specified timeout duration from the previous element, a TimeoutException is propagated to the observer. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to perform a timeout for. Returns Type Description IObservable <TSource> The sequence with a TimeoutException in case of a timeout. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.Timer.html": {
    "href": "api/Bonsai.Reactive.Timer.html",
    "title": "Class Timer",
    "keywords": "Class Timer Represents an observable sequence that periodically produces a value after the specified initial relative due time has elapsed. Inheritance Object Source < Int64 > Timer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Timer : Source<long> Properties DueTime Gets or sets the relative time at which to produce the first value. If this value is less than or equal to Zero , the timer will fire as soon as possible. Declaration public TimeSpan DueTime { get; set; } Property Value Type Description TimeSpan DueTimeXml Gets or sets the XML serializable representation of the due time. Declaration [Browsable(false)] public string DueTimeXml { get; set; } Property Value Type Description String Period Gets or sets the period to produce subsequent values. If this value is equal to Zero the timer will recur as fast as possible. Declaration public TimeSpan Period { get; set; } Property Value Type Description TimeSpan PeriodXml Gets or sets the XML serializable representation of the period. Declaration [Browsable(false)] public string PeriodXml { get; set; } Property Value Type Description String Methods Generate() Returns an observable sequence that periodically produces a value after the specified initial relative due time has elapsed. Declaration public override IObservable<long> Generate() Returns Type Description IObservable < Int64 > An observable sequence that produces a value after due time has elapsed and then after each period. Overrides Bonsai.Source<System.Int64>.Generate()"
  },
  "api/Bonsai.Reactive.TimeSpanWindow.html": {
    "href": "api/Bonsai.Reactive.TimeSpanWindow.html",
    "title": "Class TimeSpanWindow",
    "keywords": "Class TimeSpanWindow Represents a combinator that projects each element of an observable sequence into zero or more windows based on timing information. Inheritance Object WindowCombinator TimeSpanWindow Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class TimeSpanWindow : WindowCombinator Properties TimeShift Gets or sets the interval between creation of consecutive windows. Declaration public TimeSpan? TimeShift { get; set; } Property Value Type Description Nullable < TimeSpan > TimeShiftXml Gets or sets the XML serializable representation of window interval. Declaration [Browsable(false)] public string TimeShiftXml { get; set; } Property Value Type Description String TimeSpan Gets or sets the length of each window. Declaration public TimeSpan TimeSpan { get; set; } Property Value Type Description TimeSpan TimeSpanXml Gets or sets the XML serializable representation of window time span. Declaration [Browsable(false)] public string TimeSpanXml { get; set; } Property Value Type Description String Methods Process<TSource>(IObservable<TSource>) Projects each element of an observable sequence into zero or more windows based on timing information. Declaration public override IObservable<IObservable<TSource>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to produce windows over. Returns Type Description IObservable < IObservable <TSource>> An observable sequence of windows. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.WindowCombinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.Timestamp.html": {
    "href": "api/Bonsai.Reactive.Timestamp.html",
    "title": "Class Timestamp",
    "keywords": "Class Timestamp Represents a combinator that records the timestamp for each element produced by an observable sequence. Inheritance Object Timestamp Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Timestamp Methods Process<TSource>(IObservable<TSource>) Records the timestamp for each element produced by an observable sequence using a high resolution timer, if available. Declaration public IObservable<Timestamped<TSource>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to timestamp elements for. Returns Type Description IObservable < Timestamped <TSource>> An observable sequence with timestamp information on elements. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.ToArray.html": {
    "href": "api/Bonsai.Reactive.ToArray.html",
    "title": "Class ToArray",
    "keywords": "Class ToArray Represents a combinator that creates an array containing every element in the observable sequence. Inheritance Object ToArray Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class ToArray Methods Process<TSource>(IObservable<TSource>) Creates an array containing every element in the observable sequence. Declaration public IObservable<TSource[]> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to get an array of elements for. Returns Type Description IObservable <TSource[]> An observable sequence containing a single element with the array of all elements in the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.ToDictionary.html": {
    "href": "api/Bonsai.Reactive.ToDictionary.html",
    "title": "Class ToDictionary",
    "keywords": "Class ToDictionary Represents a combinator that creates a dictionary from an observable sequence according to the specified key, and optional element selector function. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder ToDictionary Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class ToDictionary : SingleArgumentExpressionBuilder, IExpressionBuilder Properties ElementSelector Gets or sets a string used to specify the properties used as elements of the dictionary. Declaration public string ElementSelector { get; set; } Property Value Type Description String KeySelector Gets or sets a string used to specify a key for each element of the observable sequence. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.ToList.html": {
    "href": "api/Bonsai.Reactive.ToList.html",
    "title": "Class ToList",
    "keywords": "Class ToList Represents a combinator that creates a list containing every element in the observable sequence. Inheritance Object ToList Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class ToList Methods Process<TSource>(IObservable<TSource>) Creates a list containing every element in the observable sequence. Declaration public IObservable<IList<TSource>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to get a list of elements for. Returns Type Description IObservable < IList <TSource>> An observable sequence containing a single element with the list of all elements in the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.ToLookup.html": {
    "href": "api/Bonsai.Reactive.ToLookup.html",
    "title": "Class ToLookup",
    "keywords": "Class ToLookup Represents a combinator that creates a lookup from an observable sequence according to the specified key, and optional element selector function. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder ToLookup Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class ToLookup : SingleArgumentExpressionBuilder, IExpressionBuilder Properties ElementSelector Gets or sets a string used to specify the properties used as elements of the lookup. Declaration public string ElementSelector { get; set; } Property Value Type Description String KeySelector Gets or sets a string used to specify a key for each element of the observable sequence. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.TriggeredBuffer.html": {
    "href": "api/Bonsai.Reactive.TriggeredBuffer.html",
    "title": "Class TriggeredBuffer",
    "keywords": "Class TriggeredBuffer Represents a combinator that projects each element of an observable sequence into zero or more buffers aligned on an external trigger. Inheritance Object TriggeredBuffer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class TriggeredBuffer Properties Count Gets or sets the maximum number of elements in each buffer. If it is not specified, the buffer will have its length set by the optional time span or by an external trigger boundary. Declaration public int? Count { get; set; } Property Value Type Description Nullable < Int32 > TimeSpan Gets or sets the time length of each buffer. If it is not specified, the buffer will have its length set by either a maximum number of elements or an external trigger boundary. Declaration public TimeSpan? TimeSpan { get; set; } Property Value Type Description Nullable < TimeSpan > TimeSpanXml Gets or sets the XML serializable representation of buffer time span. Declaration [Browsable(false)] public string TimeSpanXml { get; set; } Property Value Type Description String Methods Process<TSource, TBufferOpening>(IObservable<TSource>, IObservable<TBufferOpening>) Projects each element of an observable sequence into zero or more buffers. Declaration public IObservable<IList<TSource>> Process<TSource, TBufferOpening>(IObservable<TSource> source, IObservable<TBufferOpening> bufferOpenings) Parameters Type Name Description IObservable <TSource> source The source sequence to produce buffers over. IObservable <TBufferOpening> bufferOpenings The sequence of buffer opening events. If no maximum length is specified, the current buffer is closed and a new buffer is opened upon receiving a buffer opening event. Returns Type Description IObservable < IList <TSource>> An observable sequence of buffers. Type Parameters Name Description TSource The type of the elements in the source sequence. TBufferOpening The type of the elements in the sequence indicating buffer opening events."
  },
  "api/Bonsai.Reactive.TriggeredWindow.html": {
    "href": "api/Bonsai.Reactive.TriggeredWindow.html",
    "title": "Class TriggeredWindow",
    "keywords": "Class TriggeredWindow Represents a combinator that projects each element of an observable sequence into zero or more windows aligned on an external trigger. Inheritance Object TriggeredWindow Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class TriggeredWindow Properties Count Gets or sets the maximum number of elements in each window. If it is not specified, the window will have its length set by the optional time span or by an external trigger boundary. Declaration public int? Count { get; set; } Property Value Type Description Nullable < Int32 > TimeSpan Gets or sets the time length of each window. If it is not specified, the window will have its length set by either a maximum number of elements or an external trigger boundary. Declaration public TimeSpan? TimeSpan { get; set; } Property Value Type Description Nullable < TimeSpan > TimeSpanXml Gets or sets the XML serializable representation of window time span. Declaration [Browsable(false)] public string TimeSpanXml { get; set; } Property Value Type Description String Methods Process<TSource, TWindowOpening>(IObservable<TSource>, IObservable<TWindowOpening>) Projects each element of an observable sequence into zero or more windows. Declaration public IObservable<IObservable<TSource>> Process<TSource, TWindowOpening>(IObservable<TSource> source, IObservable<TWindowOpening> windowOpenings) Parameters Type Name Description IObservable <TSource> source The source sequence to produce windows over. IObservable <TWindowOpening> windowOpenings The sequence of window opening events. If no maximum length is specified, the current window is closed and a new window is opened upon receiving a window opening event. Returns Type Description IObservable < IObservable <TSource>> An observable sequence of windows. Type Parameters Name Description TSource The type of the elements in the source sequence. TWindowOpening The type of the elements in the sequence indicating window opening events."
  },
  "api/Bonsai.Reactive.WithLatestFrom.html": {
    "href": "api/Bonsai.Reactive.WithLatestFrom.html",
    "title": "Class WithLatestFrom",
    "keywords": "Class WithLatestFrom Represents a combinator that combines the latest values from the source sequences only when the first sequence produces an element. Inheritance Object WithLatestFrom Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class WithLatestFrom Methods Process<TSource, TOther>(IObservable<TSource>, IObservable<TOther>) Merges the specified sources into one observable sequence by emitting a tuple with the latest source elements only when the first observable sequence produces an element. Declaration public IObservable<Tuple<TSource, TOther>> Process<TSource, TOther>(IObservable<TSource> source, IObservable<TOther> other) Parameters Type Name Description IObservable <TSource> source The first observable sequence. IObservable <TOther> other The other observable sequence. Returns Type Description IObservable < Tuple <TSource, TOther>> An observable sequence containing the result of combining the latest elements of the sources into tuples only when the first sequence produces an element. Type Parameters Name Description TSource The type of the elements in the first source sequence. TOther The type of the elements in the other source sequence."
  },
  "api/Bonsai.Reactive.Zip.html": {
    "href": "api/Bonsai.Reactive.Zip.html",
    "title": "Class Zip",
    "keywords": "Class Zip Represents a combinator that combines values from the source sequences whenever all of the sequences have produced an element. Inheritance Object Zip Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Zip Methods Process<TSource>(IObservable<TSource>, IObservable<TSource>, IObservable<TSource>[]) Merges the specified sources into one observable sequence by emitting a list with the elements of the observable sequences whenever all of the sequences have produced a new element. Declaration public IObservable<IList<TSource>> Process<TSource>(IObservable<TSource> first, IObservable<TSource> second, params IObservable<TSource>[] remainder) Parameters Type Name Description IObservable <TSource> first The first observable sequence. IObservable <TSource> second The second observable sequence. IObservable <TSource>[] remainder The remaining observable sequences to combine. Returns Type Description IObservable < IList <TSource>> An observable sequence containing the result of combining the elements of the sources into lists. Type Parameters Name Description TSource The type of the elements in the source sequences. Process<TSource>(IObservable<IObservable<TSource>>) Merges elements from all inner observable sequences into one observable sequence by emitting a list with the elements of each sequence whenever all of the sequences have produced a new element. Declaration public IObservable<IList<TSource>> Process<TSource>(IObservable<IObservable<TSource>> sources) Parameters Type Name Description IObservable < IObservable <TSource>> sources The observable sequence of inner observable sequences. Returns Type Description IObservable < IList <TSource>> An observable sequence containing the result of combining the elements of the inner sequences into lists. Type Parameters Name Description TSource The type of the elements in the source sequences. Process<TSource1, TSource2>(IObservable<TSource1>, IObservable<TSource2>) Merges the specified sources into one observable sequence by emitting a list with the elements of the observable sequences whenever all of the sequences have produced a new element. Declaration public IObservable<Tuple<TSource1, TSource2>> Process<TSource1, TSource2>(IObservable<TSource1> source1, IObservable<TSource2> source2) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2>> An observable sequence containing the result of combining elements of the sources into tuples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. Process<TSource1, TSource2, TSource3>(IObservable<TSource1>, IObservable<TSource2>, IObservable<TSource3>) Merges the specified sources into one observable sequence by emitting a list with the elements of the observable sequences whenever all of the sequences have produced a new element. Declaration public IObservable<Tuple<TSource1, TSource2, TSource3>> Process<TSource1, TSource2, TSource3>(IObservable<TSource1> source1, IObservable<TSource2> source2, IObservable<TSource3> source3) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. IObservable <TSource3> source3 The third observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2, TSource3>> An observable sequence containing the result of combining elements of the sources into tuples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. TSource3 The type of the elements in the third source sequence. Process<TSource1, TSource2, TSource3, TSource4>(IObservable<TSource1>, IObservable<TSource2>, IObservable<TSource3>, IObservable<TSource4>) Merges the specified sources into one observable sequence by emitting a list with the elements of the observable sequences whenever all of the sequences have produced a new element. Declaration public IObservable<Tuple<TSource1, TSource2, TSource3, TSource4>> Process<TSource1, TSource2, TSource3, TSource4>(IObservable<TSource1> source1, IObservable<TSource2> source2, IObservable<TSource3> source3, IObservable<TSource4> source4) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. IObservable <TSource3> source3 The third observable source. IObservable <TSource4> source4 The fourth observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2, TSource3, TSource4>> An observable sequence containing the result of combining elements of the sources into tuples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. TSource3 The type of the elements in the third source sequence. TSource4 The type of the elements in the fourth source sequence. Process<TSource1, TSource2, TSource3, TSource4, TSource5>(IObservable<TSource1>, IObservable<TSource2>, IObservable<TSource3>, IObservable<TSource4>, IObservable<TSource5>) Merges the specified sources into one observable sequence by emitting a list with the elements of the observable sequences whenever all of the sequences have produced a new element. Declaration public IObservable<Tuple<TSource1, TSource2, TSource3, TSource4, TSource5>> Process<TSource1, TSource2, TSource3, TSource4, TSource5>(IObservable<TSource1> source1, IObservable<TSource2> source2, IObservable<TSource3> source3, IObservable<TSource4> source4, IObservable<TSource5> source5) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. IObservable <TSource3> source3 The third observable source. IObservable <TSource4> source4 The fourth observable source. IObservable <TSource5> source5 The fifth observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2, TSource3, TSource4, TSource5>> An observable sequence containing the result of combining elements of the sources into tuples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. TSource3 The type of the elements in the third source sequence. TSource4 The type of the elements in the fourth source sequence. TSource5 The type of the elements in the fifth source sequence. Process<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>(IObservable<TSource1>, IObservable<TSource2>, IObservable<TSource3>, IObservable<TSource4>, IObservable<TSource5>, IObservable<TSource6>) Merges the specified sources into one observable sequence by emitting a list with the elements of the observable sequences whenever all of the sequences have produced a new element. Declaration public IObservable<Tuple<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>> Process<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>(IObservable<TSource1> source1, IObservable<TSource2> source2, IObservable<TSource3> source3, IObservable<TSource4> source4, IObservable<TSource5> source5, IObservable<TSource6> source6) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. IObservable <TSource3> source3 The third observable source. IObservable <TSource4> source4 The fourth observable source. IObservable <TSource5> source5 The fifth observable source. IObservable <TSource6> source6 The sixth observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>> An observable sequence containing the result of combining elements of the sources into tuples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. TSource3 The type of the elements in the third source sequence. TSource4 The type of the elements in the fourth source sequence. TSource5 The type of the elements in the fifth source sequence. TSource6 The type of the elements in the sixth source sequence. Process<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>(IObservable<TSource1>, IObservable<TSource2>, IObservable<TSource3>, IObservable<TSource4>, IObservable<TSource5>, IObservable<TSource6>, IObservable<TSource7>) Merges the specified sources into one observable sequence by emitting a list with the elements of the observable sequences whenever all of the sequences have produced a new element. Declaration public IObservable<Tuple<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>> Process<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>(IObservable<TSource1> source1, IObservable<TSource2> source2, IObservable<TSource3> source3, IObservable<TSource4> source4, IObservable<TSource5> source5, IObservable<TSource6> source6, IObservable<TSource7> source7) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. IObservable <TSource3> source3 The third observable source. IObservable <TSource4> source4 The fourth observable source. IObservable <TSource5> source5 The fifth observable source. IObservable <TSource6> source6 The sixth observable source. IObservable <TSource7> source7 The seventh observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>> An observable sequence containing the result of combining elements of the sources into tuples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. TSource3 The type of the elements in the third source sequence. TSource4 The type of the elements in the fourth source sequence. TSource5 The type of the elements in the fifth source sequence. TSource6 The type of the elements in the sixth source sequence. TSource7 The type of the elements in the seventh source sequence."
  },
  "api/Bonsai.Resources.html": {
    "href": "api/Bonsai.Resources.html",
    "title": "Namespace Bonsai.Resources",
    "keywords": "Namespace Bonsai.Resources Classes LoadResources Represents an operator that loads a collection of resources into the resource manager. ResourceConfiguration<TResource> Provides the abstract base class for configuring and loading specific resources. ResourceConfigurationCollection Represents an immutable collection of resources to be loaded into a resource manager. ResourceFileNameConverter Provides a type converter to convert a resource file name to and from other representations. ResourceLoader Provides the abstract base class for operators that load specific resources into the resource manager. ResourceManager Represents a resource manager that can be used to load and release sets of resources at run time, and manage their lifespan. Disposing the resource manager will also dispose of any loaded resources. ResourceNameConverter Provides a type converter to convert a resource name to and from other representations. It also provides a mechanism to find existing resources declared in the workflow. Interfaces IResourceConfiguration Provides a mechanism for loading different types of resources."
  },
  "api/Bonsai.Resources.IResourceConfiguration.html": {
    "href": "api/Bonsai.Resources.IResourceConfiguration.html",
    "title": "Interface IResourceConfiguration",
    "keywords": "Interface IResourceConfiguration Provides a mechanism for loading different types of resources. Namespace : Bonsai.Resources Assembly : Bonsai.System.dll Syntax public interface IResourceConfiguration Properties Name Gets the identifier of the resource. Declaration string Name { get; } Property Value Type Description String Type Gets the type of the resource. Declaration Type Type { get; } Property Value Type Description Type Methods CreateResource(ResourceManager) Creates the contents of the resource using the specified resource manager. Declaration IDisposable CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager The ResourceManager object onto which the resource will be loaded. The resource manager can be accessed to load additional resource dependencies which may be required to create the new resource. Returns Type Description IDisposable A IDisposable object which can be used to access and release the resource contents."
  },
  "api/Bonsai.Resources.LoadResources.html": {
    "href": "api/Bonsai.Resources.LoadResources.html",
    "title": "Class LoadResources",
    "keywords": "Class LoadResources Represents an operator that loads a collection of resources into the resource manager. Inheritance Object Combinator < ResourceConfigurationCollection , IDisposable > LoadResources Inherited Members Combinator<ResourceConfigurationCollection, IDisposable>.Process(IObservable<ResourceConfigurationCollection>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Resources Assembly : Bonsai.System.dll Syntax public class LoadResources : Combinator<ResourceConfigurationCollection, IDisposable> Methods Process(IObservable<ResourceConfigurationCollection>) Loads a collection of resources into the resource manager. Declaration public override IObservable<IDisposable> Process(IObservable<ResourceConfigurationCollection> source) Parameters Type Name Description IObservable < ResourceConfigurationCollection > source The sequence containing the collection of resources to be loaded in the resource manager. Returns Type Description IObservable < IDisposable > A sequence of IDisposable objects which can be used to unload the loaded resources. Overrides Bonsai.Combinator<Bonsai.Resources.ResourceConfigurationCollection, System.IDisposable>.Process(System.IObservable<Bonsai.Resources.ResourceConfigurationCollection>)"
  },
  "api/Bonsai.Resources.ResourceConfiguration-1.html": {
    "href": "api/Bonsai.Resources.ResourceConfiguration-1.html",
    "title": "Class ResourceConfiguration<TResource>",
    "keywords": "Class ResourceConfiguration<TResource> Provides the abstract base class for configuring and loading specific resources. Inheritance Object ResourceConfiguration<TResource> BufferConfiguration SourceConfiguration Implements IResourceConfiguration Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Resources Assembly : Bonsai.System.dll Syntax public abstract class ResourceConfiguration<TResource> : IResourceConfiguration where TResource : IDisposable Type Parameters Name Description TResource The type of the resource. Properties Name Gets or sets the name of the resource. Declaration public string Name { get; set; } Property Value Type Description String Methods CreateResource(ResourceManager) When overridden in a derived class, creates a new resource of type TResource . Declaration public abstract TResource CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager The ResourceManager object onto which this resource will be loaded. The resource manager can be accessed to load additional resource dependencies which may be required to create the new resource. Returns Type Description TResource A new instance of type TResource . OpenResource(String) Opens a stream for reading the specified resource. Declaration protected Stream OpenResource(string path) Parameters Type Name Description String path The name of the resource to be opened for reading. Returns Type Description Stream A Stream object for reading the resource. ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Explicit Interface Implementations IResourceConfiguration.CreateResource(ResourceManager) Declaration IDisposable IResourceConfiguration.CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager Returns Type Description IDisposable IResourceConfiguration.Type Declaration Type IResourceConfiguration.Type { get; } Returns Type Description Type Implements IResourceConfiguration"
  },
  "api/Bonsai.Resources.ResourceConfigurationCollection.html": {
    "href": "api/Bonsai.Resources.ResourceConfigurationCollection.html",
    "title": "Class ResourceConfigurationCollection",
    "keywords": "Class ResourceConfigurationCollection Represents an immutable collection of resources to be loaded into a resource manager. Inheritance Object ResourceConfigurationCollection Implements IEnumerable < IResourceConfiguration > IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Resources Assembly : Bonsai.System.dll Syntax public class ResourceConfigurationCollection : IEnumerable<IResourceConfiguration>, IEnumerable Constructors ResourceConfigurationCollection(ResourceManager, IEnumerable<IResourceConfiguration>) Initializes a new instance of the ResourceConfigurationCollection class using the specified resource manager and a set of resources to load. Declaration public ResourceConfigurationCollection(ResourceManager resourceManager, IEnumerable<IResourceConfiguration> collection) Parameters Type Name Description ResourceManager resourceManager The resource manager into which the resources will be loaded. IEnumerable < IResourceConfiguration > collection The set of resources to be loaded into the resource manager. Properties ResourceManager Gets the resource manager object into which the resources will be loaded. Declaration public ResourceManager ResourceManager { get; } Property Value Type Description ResourceManager Methods Add(IResourceConfiguration) Creates a new collection of resources to be loaded into the resource manager by appending a new resource to the end of this collection. Declaration public ResourceConfigurationCollection Add(IResourceConfiguration resource) Parameters Type Name Description IResourceConfiguration resource The additional resource to be loaded into the resource manager. Returns Type Description ResourceConfigurationCollection A new ResourceConfigurationCollection object containing the combined set of resources. AddRange(IEnumerable<IResourceConfiguration>) Creates a new collection of resources to be loaded into the resource manager by appending a new set of resources to the end of this collection. Declaration public ResourceConfigurationCollection AddRange(IEnumerable<IResourceConfiguration> collection) Parameters Type Name Description IEnumerable < IResourceConfiguration > collection The additional set of resources to be loaded into the resource manager. Returns Type Description ResourceConfigurationCollection A new ResourceConfigurationCollection object containing the combined set of resources. GetEnumerator() Declaration public IEnumerator<IResourceConfiguration> GetEnumerator() Returns Type Description IEnumerator < IResourceConfiguration > Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Resources.ResourceFileNameConverter.html": {
    "href": "api/Bonsai.Resources.ResourceFileNameConverter.html",
    "title": "Class ResourceFileNameConverter",
    "keywords": "Class ResourceFileNameConverter Provides a type converter to convert a resource file name to and from other representations. Inheritance Object TypeConverter StringConverter ResourceFileNameConverter Inherited Members StringConverter.CanConvertFrom(ITypeDescriptorContext, Type) StringConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.ConvertFrom(Object) TypeConverter.ConvertFromInvariantString(String) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(String) TypeConverter.ConvertFromString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String) TypeConverter.ConvertTo(Object, Type) TypeConverter.ConvertToInvariantString(Object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(Object) TypeConverter.ConvertToString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(Object) TypeConverter.GetConvertToException(Object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[]) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValues(ITypeDescriptorContext) TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext) TypeConverter.IsValid(Object) TypeConverter.IsValid(ITypeDescriptorContext, Object) TypeConverter.SortProperties(PropertyDescriptorCollection, String[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Resources Assembly : Bonsai.System.dll Syntax public class ResourceFileNameConverter : StringConverter Methods ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) Converts the given value object to a resource file name, and also sets the Name property of the object that is connected to this type converter request, if it exists. Declaration public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) Parameters Type Name Description ITypeDescriptorContext context CultureInfo culture Object value Type destinationType Returns Type Description Object Overrides TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)"
  },
  "api/Bonsai.Resources.ResourceLoader.html": {
    "href": "api/Bonsai.Resources.ResourceLoader.html",
    "title": "Class ResourceLoader",
    "keywords": "Class ResourceLoader Provides the abstract base class for operators that load specific resources into the resource manager. Inheritance Object Combinator < ResourceConfigurationCollection , ResourceConfigurationCollection > Transform < ResourceConfigurationCollection , ResourceConfigurationCollection > ResourceLoader AudioResources Inherited Members Combinator<ResourceConfigurationCollection, ResourceConfigurationCollection>.Process(IObservable<ResourceConfigurationCollection>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Resources Assembly : Bonsai.System.dll Syntax public abstract class ResourceLoader : Transform<ResourceConfigurationCollection, ResourceConfigurationCollection> Methods GetResources() Returns the set of resources to be loaded into the resource manager. Declaration protected abstract IEnumerable<IResourceConfiguration> GetResources() Returns Type Description IEnumerable < IResourceConfiguration > A collection of IResourceConfiguration objects to be loaded into the resource manager. Process(IObservable<ResourceConfigurationCollection>) Appends a new set of resources to be loaded into the resource manager. Declaration public override IObservable<ResourceConfigurationCollection> Process(IObservable<ResourceConfigurationCollection> source) Parameters Type Name Description IObservable < ResourceConfigurationCollection > source A sequence of ResourceConfigurationCollection objects with which the loader resources will be combined. Returns Type Description IObservable < ResourceConfigurationCollection > A sequence of ResourceConfigurationCollection objects which can be used to load resources into the resource manager. Overrides Bonsai.Combinator<Bonsai.Resources.ResourceConfigurationCollection, Bonsai.Resources.ResourceConfigurationCollection>.Process(System.IObservable<Bonsai.Resources.ResourceConfigurationCollection>) Process(IObservable<ResourceManager>) Bundles a set of resources to be loaded into the resource manager. Declaration public IObservable<ResourceConfigurationCollection> Process(IObservable<ResourceManager> source) Parameters Type Name Description IObservable < ResourceManager > source A sequence of ResourceManager objects onto which the resources will be loaded. Returns Type Description IObservable < ResourceConfigurationCollection > A sequence of ResourceConfigurationCollection objects which can be used to load resources into the resource manager."
  },
  "api/Bonsai.Resources.ResourceManager.html": {
    "href": "api/Bonsai.Resources.ResourceManager.html",
    "title": "Class ResourceManager",
    "keywords": "Class ResourceManager Represents a resource manager that can be used to load and release sets of resources at run time, and manage their lifespan. Disposing the resource manager will also dispose of any loaded resources. Inheritance Object ResourceManager Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Resources Assembly : Bonsai.System.dll Syntax public sealed class ResourceManager : IDisposable Methods Dispose() Releases all resources used by the ResourceManager class. Declaration public void Dispose() Load(IEnumerable<IResourceConfiguration>) Loads a set of resources into the resource manager. Declaration public IDisposable Load(IEnumerable<IResourceConfiguration> source) Parameters Type Name Description IEnumerable < IResourceConfiguration > source A collection of resources to load into the resource manager. Returns Type Description IDisposable A IDisposable object which can be used to unload the loaded resources. Load<TResource>(String) Loads the resource with the specified name into the resource manager. Declaration public TResource Load<TResource>(string name) where TResource : IDisposable Parameters Type Name Description String name The name of the resource to load. Returns Type Description TResource The loaded resource. Repeated calls to load the same resource will return the same object instance. Type Parameters Name Description TResource The type of the loaded resource. Implements System.IDisposable"
  },
  "api/Bonsai.Resources.ResourceNameConverter.html": {
    "href": "api/Bonsai.Resources.ResourceNameConverter.html",
    "title": "Class ResourceNameConverter",
    "keywords": "Class ResourceNameConverter Provides a type converter to convert a resource name to and from other representations. It also provides a mechanism to find existing resources declared in the workflow. Inheritance Object TypeConverter StringConverter ResourceNameConverter Inherited Members StringConverter.CanConvertFrom(ITypeDescriptorContext, Type) StringConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.ConvertFrom(Object) TypeConverter.ConvertFromInvariantString(String) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(String) TypeConverter.ConvertFromString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String) TypeConverter.ConvertTo(Object, Type) TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) TypeConverter.ConvertToInvariantString(Object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(Object) TypeConverter.ConvertToString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(Object) TypeConverter.GetConvertToException(Object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[]) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.IsValid(Object) TypeConverter.IsValid(ITypeDescriptorContext, Object) TypeConverter.SortProperties(PropertyDescriptorCollection, String[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Resources Assembly : Bonsai.System.dll Syntax public class ResourceNameConverter : StringConverter Constructors ResourceNameConverter(Type) Initializes a new instance of the ResourceNameConverter class for the specified type. Declaration protected ResourceNameConverter(Type type) Parameters Type Name Description Type type The type of resources supported by this converter. Methods GetStandardValues(ITypeDescriptorContext) Returns a collection of resource names which are available in the call context of this type converter request. Declaration public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description TypeConverter.StandardValuesCollection A TypeConverter.StandardValuesCollection containing the set of available resources. Only resources for which IsResourceSupported(IResourceConfiguration) returns true will be included. Overrides TypeConverter.GetStandardValues(ITypeDescriptorContext) GetStandardValuesSupported(ITypeDescriptorContext) Declaration public override bool GetStandardValuesSupported(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description Boolean Overrides TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext) IsResourceSupported(IResourceConfiguration) Returns a value indicating whether the specified resource is supported by this converter. Declaration protected virtual bool IsResourceSupported(IResourceConfiguration resource) Parameters Type Name Description IResourceConfiguration resource The resource to be tested. Returns Type Description Boolean true if the specified resource is supported; false otherwise."
  },
  "api/Bonsai.Sink.html": {
    "href": "api/Bonsai.Sink.html",
    "title": "Class Sink",
    "keywords": "Class Sink Represents a generic operation which introduces side effects on an observable sequence without modifying its elements. Inheritance Object Combinator Sink UpdateListener UpdateSource UpdateSourceState SerialStringWrite WriteLine Inherited Members Combinator.Process<TSource>(IObservable<TSource>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Sink)] public abstract class Sink : Combinator"
  },
  "api/Bonsai.Sink-1.html": {
    "href": "api/Bonsai.Sink-1.html",
    "title": "Class Sink<TSource>",
    "keywords": "Class Sink<TSource> Represents an operation which introduces side effects on observable sequences of a specific type without modifying its elements. Inheritance Object Combinator <TSource, TSource> Sink<TSource> AnalogOutput DigitalOutput SendSysex ServoOutput AudioPlayback UpdateBuffer Inherited Members Combinator<TSource, TSource>.Process(IObservable<TSource>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Sink)] public abstract class Sink<TSource> : Combinator<TSource, TSource> Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Source-1.html": {
    "href": "api/Bonsai.Source-1.html",
    "title": "Class Source<TSource>",
    "keywords": "Class Source<TSource> Represents a generator of observable sequences of data elements. Inheritance Object Source<TSource> AnalogInput CreateArduino DigitalInput InputPullUp ReceiveSysex AudioCapture AudioReader CreateAudioContext CreateSource CreateSerialPort EnumerateDirectories EnumerateFiles EnumerateFileSystemEntries GetDirectories GetFiles GetFileSystemEntries ReadLine SerialStringRead StartProcess Range Timer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [Source] [Combinator(MethodName = \"Generate\")] [WorkflowElementCategory(ElementCategory.Source)] public abstract class Source<TSource> Type Parameters Name Description TSource The type of the elements emitted by the generator. Methods Generate() Generates an observable sequence of data elements. Declaration public abstract IObservable<TSource> Generate() Returns Type Description IObservable <TSource> An observable sequence of data elements of type TSource ."
  },
  "api/Bonsai.SourceAttribute.html": {
    "href": "api/Bonsai.SourceAttribute.html",
    "title": "Class SourceAttribute",
    "keywords": "Class SourceAttribute Specifies that a class provides a parameterless method that can generate observable sequences. Inheritance Object Attribute SourceAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class SourceAttribute : Attribute, _Attribute Constructors SourceAttribute() Initializes a new instance of the SourceAttribute class with the default generator method name. Declaration public SourceAttribute() SourceAttribute(String) Initializes a new instance of the SourceAttribute class with the specified generator method name. Declaration public SourceAttribute(string methodName) Parameters Type Name Description String methodName The name of the parameterless method that can be used to generate observable sequences. Properties MethodName Gets the name of the parameterless method that can be used to generate observable sequences. Declaration public string MethodName { get; } Property Value Type Description String Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.Transform-2.html": {
    "href": "api/Bonsai.Transform-2.html",
    "title": "Class Transform<TSource, TResult>",
    "keywords": "Class Transform<TSource, TResult> Represents an operation on observable sequences which transforms every element of the source sequence into an element in the result sequence. Inheritance Object Combinator <TSource, TResult> Transform<TSource, TResult> GetDirectoryName GetExtension GetFileName GetFileNameWithoutExtension GetFullPath GetPathRoot ResourceLoader Inherited Members Combinator<TSource, TResult>.Process(IObservable<TSource>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Transform)] public abstract class Transform<TSource, TResult> : Combinator<TSource, TResult> Type Parameters Name Description TSource The type of the elements in the source sequence. TResult The type of the elements in the result sequence."
  },
  "api/Bonsai.TypeVisualizerAttribute.html": {
    "href": "api/Bonsai.TypeVisualizerAttribute.html",
    "title": "Class TypeVisualizerAttribute",
    "keywords": "Class TypeVisualizerAttribute Determines the type of visualizer used to display the target of the attribute. Inheritance Object Attribute TypeVisualizerAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true)] public sealed class TypeVisualizerAttribute : Attribute, _Attribute Constructors TypeVisualizerAttribute(String) Initializes a new instance of the TypeVisualizerAttribute class with the specified visualizer type name. Declaration public TypeVisualizerAttribute(string visualizerTypeName) Parameters Type Name Description String visualizerTypeName A String specifying the assembly qualified name of a visualizer that can be used to display the type this attribute is bound to. TypeVisualizerAttribute(Type) Initializes a new instance of the TypeVisualizerAttribute class with the specified visualizer type. Declaration public TypeVisualizerAttribute(Type visualizer) Parameters Type Name Description Type visualizer The Type of a visualizer that can be used to display the type this attribute is bound to. Properties Target Gets or sets the type that is the target of the attribute. Declaration public Type Target { get; set; } Property Value Type Description Type TargetTypeName Gets or sets the assembly qualified name of the type that is the target of the attribute. Declaration public string TargetTypeName { get; set; } Property Value Type Description String VisualizerTypeName Gets the assembly qualified name of the visualizer class. Declaration public string VisualizerTypeName { get; } Property Value Type Description String Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.UnidimensionalArrayConverter.html": {
    "href": "api/Bonsai.UnidimensionalArrayConverter.html",
    "title": "Class UnidimensionalArrayConverter",
    "keywords": "Class UnidimensionalArrayConverter Provides a type converter to convert one-dimensional Array objects to and from various other representations. Inheritance Object TypeConverter UnidimensionalArrayConverter Inherited Members TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.ConvertFrom(Object) TypeConverter.ConvertFromInvariantString(String) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(String) TypeConverter.ConvertFromString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String) TypeConverter.ConvertTo(Object, Type) TypeConverter.ConvertToInvariantString(Object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(Object) TypeConverter.ConvertToString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(Object) TypeConverter.GetConvertToException(Object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[]) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValues(ITypeDescriptorContext) TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext) TypeConverter.IsValid(Object) TypeConverter.IsValid(ITypeDescriptorContext, Object) TypeConverter.SortProperties(PropertyDescriptorCollection, String[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public class UnidimensionalArrayConverter : TypeConverter Methods CanConvertFrom(ITypeDescriptorContext, Type) Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context. Declaration public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. Type sourceType A Type that represents the type you want to convert from. Returns Type Description Boolean true if this converter can perform the conversion; otherwise, false . Overrides TypeConverter.CanConvertFrom(ITypeDescriptorContext, Type) ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) Converts the given object to the type of this converter, using the specified context and culture information. Declaration public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. CultureInfo culture The CultureInfo to use as the current culture. Object value The Object to convert. Returns Type Description Object An Object that represents the converted value. Overrides TypeConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) Converts the given value object to the specified type, using the specified context and culture information. Declaration public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. CultureInfo culture A CultureInfo . If null is passed, the current culture is assumed. Object value The Object to convert. Type destinationType The Type to convert the value parameter to. Returns Type Description Object An Object that represents the converted value. Overrides TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)"
  },
  "api/Bonsai.WindowCombinator.html": {
    "href": "api/Bonsai.WindowCombinator.html",
    "title": "Class WindowCombinator",
    "keywords": "Class WindowCombinator Represents a generic operation which projects each element of an observable sequence into a sequence of windows. Inheritance Object WindowCombinator ElementCountWindow TimeSpanWindow Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [Combinator] public abstract class WindowCombinator Methods Process<TSource>(IObservable<TSource>) Projects each element of the source sequence into a sequence of windows. Declaration public abstract IObservable<IObservable<TSource>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to produce windows over. Returns Type Description IObservable < IObservable <TSource>> The sequence of windows. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.WorkflowBuilder.html": {
    "href": "api/Bonsai.WorkflowBuilder.html",
    "title": "Class WorkflowBuilder",
    "keywords": "Class WorkflowBuilder Represents an XML serializable expression builder workflow container. Inheritance Object WorkflowBuilder Implements IXmlSerializable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public class WorkflowBuilder : IXmlSerializable Constructors WorkflowBuilder() Initializes a new instance of the WorkflowBuilder class. Declaration public WorkflowBuilder() WorkflowBuilder(ExpressionBuilderGraph) Initializes a new instance of the WorkflowBuilder class with the specified workflow instance. Declaration public WorkflowBuilder(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The ExpressionBuilderGraph that will be used by this builder. Properties Description Gets or sets a description for the serializable workflow. Declaration public string Description { get; set; } Property Value Type Description String Serializer Gets a XmlSerializer instance that can be used to serialize or deserialize a WorkflowBuilder . Declaration public static XmlSerializer Serializer { get; } Property Value Type Description XmlSerializer Workflow Gets the ExpressionBuilderGraph instance used by this builder. Declaration public ExpressionBuilderGraph Workflow { get; } Property Value Type Description ExpressionBuilderGraph Methods ReadMetadata(String) Reads workflow metadata from the serializable XML workflow representation at the specified URI. Declaration public static WorkflowMetadata ReadMetadata(string inputUri) Parameters Type Name Description String inputUri The URI for the file containing the XML data. Returns Type Description WorkflowMetadata A WorkflowMetadata instance containing the retrieved metadata. ReadMetadata(XmlReader) Reads workflow metadata from the serializable XML workflow representation. Declaration public static WorkflowMetadata ReadMetadata(XmlReader reader) Parameters Type Name Description XmlReader reader The XmlReader stream from which the metadata is retrieved. Returns Type Description WorkflowMetadata A WorkflowMetadata instance containing the retrieved metadata. Explicit Interface Implementations IXmlSerializable.GetSchema() Declaration XmlSchema IXmlSerializable.GetSchema() Returns Type Description XmlSchema IXmlSerializable.ReadXml(XmlReader) Declaration void IXmlSerializable.ReadXml(XmlReader reader) Parameters Type Name Description XmlReader reader IXmlSerializable.WriteXml(XmlWriter) Declaration void IXmlSerializable.WriteXml(XmlWriter writer) Parameters Type Name Description XmlWriter writer Implements System.Xml.Serialization.IXmlSerializable"
  },
  "api/Bonsai.WorkflowBuildException.html": {
    "href": "api/Bonsai.WorkflowBuildException.html",
    "title": "Class WorkflowBuildException",
    "keywords": "Class WorkflowBuildException Represents errors that occur during the build phase of an expression builder workflow. Inheritance Object Exception WorkflowException WorkflowBuildException Implements ISerializable _Exception Inherited Members WorkflowException.Builder Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [Serializable] public class WorkflowBuildException : WorkflowException, ISerializable, _Exception Constructors WorkflowBuildException() Initializes a new instance of the WorkflowBuildException class. Declaration public WorkflowBuildException() WorkflowBuildException(SerializationInfo, StreamingContext) Initializes a new instance of the WorkflowBuildException class with serialized data. Declaration protected WorkflowBuildException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. WorkflowBuildException(String) Initializes a new instance of the WorkflowBuildException class with a specified error message. Declaration public WorkflowBuildException(string message) Parameters Type Name Description String message The message that describes the error. WorkflowBuildException(String, ExpressionBuilder) Initializes a new instance of the WorkflowBuildException class with a specified error message and a reference to the ExpressionBuilder that is the cause of this exception. Declaration public WorkflowBuildException(string message, ExpressionBuilder builder) Parameters Type Name Description String message The error message that explains the reason for the exception. ExpressionBuilder builder The ExpressionBuilder that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no builder is specified. WorkflowBuildException(String, ExpressionBuilder, Exception) Initializes a new instance of the WorkflowBuildException class with a specified error message and a reference to both the ExpressionBuilder and the inner exception that caused this exception. Declaration public WorkflowBuildException(string message, ExpressionBuilder builder, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. ExpressionBuilder builder The ExpressionBuilder that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no builder is specified. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. WorkflowBuildException(String, Exception) Initializes a new instance of the WorkflowBuildException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public WorkflowBuildException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Bonsai.WorkflowElementCategoryAttribute.html": {
    "href": "api/Bonsai.WorkflowElementCategoryAttribute.html",
    "title": "Class WorkflowElementCategoryAttribute",
    "keywords": "Class WorkflowElementCategoryAttribute Determines the category of the workflow element this attribute is bound to. Inheritance Object Attribute WorkflowElementCategoryAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public sealed class WorkflowElementCategoryAttribute : Attribute, _Attribute Constructors WorkflowElementCategoryAttribute(ElementCategory) Initializes a new instance of the WorkflowElementCategoryAttribute class with the specified category. Declaration public WorkflowElementCategoryAttribute(ElementCategory category) Parameters Type Name Description ElementCategory category The category of the workflow element this attribute is bound to. Fields Default Specifies the default value for the WorkflowElementCategoryAttribute . This field is read-only. Declaration public static readonly WorkflowElementCategoryAttribute Default Field Value Type Description WorkflowElementCategoryAttribute Properties Category Gets the category of the workflow element this attribute is bound to. Declaration public ElementCategory Category { get; } Property Value Type Description ElementCategory Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.WorkflowElementIconAttribute.html": {
    "href": "api/Bonsai.WorkflowElementIconAttribute.html",
    "title": "Class WorkflowElementIconAttribute",
    "keywords": "Class WorkflowElementIconAttribute Specifies the icon that should represent the element this attribute is bound to when drawing the workflow. Inheritance Object Attribute WorkflowElementIconAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class WorkflowElementIconAttribute : Attribute, _Attribute Constructors WorkflowElementIconAttribute(String) Initializes a new instance of the WorkflowElementIconAttribute class with the name of the icon resource that should represent the workflow element. Declaration public WorkflowElementIconAttribute(string name) Parameters Type Name Description String name The name of the icon resource that should represent the workflow element this attribute is bound to. WorkflowElementIconAttribute(String, String) Initializes a new instance of the WorkflowElementIconAttribute class with the name of the icon resource that should represent the workflow element, scoped by the namespace of the specified type. Declaration public WorkflowElementIconAttribute(string typeName, string name) Parameters Type Name Description String typeName The fully qualified name of the type that will be used to scope the name of the icon resource. String name The name of the icon resource that should represent the workflow element this attribute is bound to. WorkflowElementIconAttribute(Type, String) Initializes a new instance of the WorkflowElementIconAttribute class with the name of the icon resource that should represent the workflow element, scoped by the namespace of the specified type. Declaration public WorkflowElementIconAttribute(Type type, string name) Parameters Type Name Description Type type The type that will be used to scope the name of the icon resource. String name The name of the icon resource that should represent the workflow element this attribute is bound to. Fields Default Specifies the default value for the WorkflowElementIconAttribute . This field is read-only. Declaration public static readonly WorkflowElementIconAttribute Default Field Value Type Description WorkflowElementIconAttribute Properties Name Gets the name of the icon resource that should represent the workflow element this attribute is bound to. Declaration public string Name { get; } Property Value Type Description String TypeName Gets the optional qualified type name that will be used to scope the name of the icon resource. Declaration public string TypeName { get; } Property Value Type Description String Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.WorkflowException.html": {
    "href": "api/Bonsai.WorkflowException.html",
    "title": "Class WorkflowException",
    "keywords": "Class WorkflowException Represents errors that occur in expression builder workflows. Inheritance Object Exception WorkflowException WorkflowBuildException WorkflowRuntimeException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [Serializable] public class WorkflowException : Exception, ISerializable, _Exception Constructors WorkflowException() Initializes a new instance of the WorkflowException class. Declaration public WorkflowException() WorkflowException(SerializationInfo, StreamingContext) Initializes a new instance of the WorkflowException class with serialized data. Declaration protected WorkflowException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. WorkflowException(String) Initializes a new instance of the WorkflowException class with a specified error message. Declaration public WorkflowException(string message) Parameters Type Name Description String message The message that describes the error. WorkflowException(String, ExpressionBuilder) Initializes a new instance of the WorkflowException class with a specified error message and a reference to the ExpressionBuilder that is the cause of this exception. Declaration public WorkflowException(string message, ExpressionBuilder builder) Parameters Type Name Description String message The error message that explains the reason for the exception. ExpressionBuilder builder The ExpressionBuilder that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no builder is specified. WorkflowException(String, ExpressionBuilder, Exception) Initializes a new instance of the WorkflowException class with a specified error message and a reference to both the ExpressionBuilder and the inner exception that caused this exception. Declaration public WorkflowException(string message, ExpressionBuilder builder, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. ExpressionBuilder builder The ExpressionBuilder that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no builder is specified. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. WorkflowException(String, Exception) Initializes a new instance of the WorkflowException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public WorkflowException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Properties Builder Gets the ExpressionBuilder instance that was the cause for the exception. Declaration public ExpressionBuilder Builder { get; } Property Value Type Description ExpressionBuilder Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Bonsai.WorkflowMetadata.html": {
    "href": "api/Bonsai.WorkflowMetadata.html",
    "title": "Class WorkflowMetadata",
    "keywords": "Class WorkflowMetadata Represents metadata retrieved from a serializable XML workflow. Inheritance Object WorkflowMetadata Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public class WorkflowMetadata Properties Description Gets the description of the workflow. Declaration public string Description { get; } Property Value Type Description String WorkflowMarkup Gets the raw XML markup of the workflow. Declaration public string WorkflowMarkup { get; } Property Value Type Description String Methods GetExtensionTypes() Gets the extension types required to deserialize the XML markup. Declaration public Type[] GetExtensionTypes() Returns Type Description Type [] An array that contains all the types that are required to deserialize the XML markup."
  },
  "api/Bonsai.WorkflowNamespaceIconAttribute.html": {
    "href": "api/Bonsai.WorkflowNamespaceIconAttribute.html",
    "title": "Class WorkflowNamespaceIconAttribute",
    "keywords": "Class WorkflowNamespaceIconAttribute Specifies the icon that should represent a given namespace in the assembly this attribute is bound to when drawing the workflow. Inheritance Object Attribute WorkflowNamespaceIconAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] public sealed class WorkflowNamespaceIconAttribute : Attribute, _Attribute Constructors WorkflowNamespaceIconAttribute(String) Initializes a new instance of the WorkflowNamespaceIconAttribute class with the name of the default icon resource used to represent namespaces in the assembly this attribute is bound to. Declaration public WorkflowNamespaceIconAttribute(string name) Parameters Type Name Description String name The name of the default icon resource used to represent namespaces in the assembly this attribute is bound to. WorkflowNamespaceIconAttribute(String, String) Initializes a new instance of the WorkflowNamespaceIconAttribute class with a specific namespace that will be matched against workflow element types in the assembly this attribute is bound to, and the name of the icon resource used to represent the namespace in case of a successful match. Declaration public WorkflowNamespaceIconAttribute(string ns, string name) Parameters Type Name Description String ns The specific namespace that will be matched against workflow element types in the assembly this attribute is bound to. If this value is null or empty, the match will be successful against any namespace. String name The name of the icon resource used to represent the namespace in the assembly this attribute is bound to. Properties Namespace Gets the optional namespace that will be matched against a workflow element type. If this value is null or empty, the match will be successful against any namespace in the assembly this attribute is bound to. Declaration public string Namespace { get; } Property Value Type Description String ResourceName Gets the name of the icon resource used to represent a namespace in the assembly this attribute is bound to. Declaration public string ResourceName { get; } Property Value Type Description String Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.WorkflowRuntimeException.html": {
    "href": "api/Bonsai.WorkflowRuntimeException.html",
    "title": "Class WorkflowRuntimeException",
    "keywords": "Class WorkflowRuntimeException Represents errors that occur during the execution of an expression builder workflow. Inheritance Object Exception WorkflowException WorkflowRuntimeException Implements ISerializable _Exception Inherited Members WorkflowException.Builder Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [Serializable] public class WorkflowRuntimeException : WorkflowException, ISerializable, _Exception Constructors WorkflowRuntimeException() Initializes a new instance of the WorkflowRuntimeException class. Declaration public WorkflowRuntimeException() WorkflowRuntimeException(SerializationInfo, StreamingContext) Initializes a new instance of the WorkflowRuntimeException class with serialized data. Declaration protected WorkflowRuntimeException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. WorkflowRuntimeException(String) Initializes a new instance of the WorkflowRuntimeException class with a specified error message. Declaration public WorkflowRuntimeException(string message) Parameters Type Name Description String message The message that describes the error. WorkflowRuntimeException(String, ExpressionBuilder) Initializes a new instance of the WorkflowRuntimeException class with a specified error message and a reference to the ExpressionBuilder that is the cause of this exception. Declaration public WorkflowRuntimeException(string message, ExpressionBuilder builder) Parameters Type Name Description String message The error message that explains the reason for the exception. ExpressionBuilder builder The ExpressionBuilder that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no builder is specified. WorkflowRuntimeException(String, ExpressionBuilder, Exception) Initializes a new instance of the WorkflowRuntimeException class with a specified error message and a reference to both the ExpressionBuilder and the inner exception that caused this exception. Declaration public WorkflowRuntimeException(string message, ExpressionBuilder builder, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. ExpressionBuilder builder The ExpressionBuilder that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no builder is specified. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. WorkflowRuntimeException(String, Exception) Initializes a new instance of the WorkflowRuntimeException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public WorkflowRuntimeException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Bonsai.XmlNamespacePrefixAttribute.html": {
    "href": "api/Bonsai.XmlNamespacePrefixAttribute.html",
    "title": "Class XmlNamespacePrefixAttribute",
    "keywords": "Class XmlNamespacePrefixAttribute Specifies a recommended prefix to associate with a XML namespace identifier when serializing a workflow file. Inheritance Object Attribute XmlNamespacePrefixAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] public sealed class XmlNamespacePrefixAttribute : Attribute, _Attribute Constructors XmlNamespacePrefixAttribute(String, String) Initializes a new instance of the XmlNamespacePrefixAttribute class with the specified namespace and prefix. Declaration public XmlNamespacePrefixAttribute(string xmlNamespace, string prefix) Parameters Type Name Description String xmlNamespace The XML namespace identifier. String prefix The recommended prefix for the namespace. Properties Prefix Gets or sets the recommended prefix for the namespace. Declaration public string Prefix { get; set; } Property Value Type Description String XmlNamespace Gets or sets the XML namespace identifier. Declaration public string XmlNamespace { get; set; } Property Value Type Description String Implements System.Runtime.InteropServices._Attribute"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE.",
    "keywords": "This is the HOMEPAGE . Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}